cscope 16 G:\Users\Cloudfly\Desktop\luasrc               0000368336
	@lapi.c

8 
	~<as£π.h
>

9 
	~<m©h.h
>

10 
	~<°d¨g.h
>

11 
	~<°rög.h
>

13 
	#œpi_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

34 c⁄° 
	glua_idít
[] =

35 "$Lua: " 
LUA_VERSION
 " " 
LUA_COPYRIGHT
 " $\n"

36 "$Auth‹s: " 
LUA_AUTHORS
 " $\n"

41 
	#≠i_check√Àms
(
L
, 
n
Ë
	`≠i_check
(L, (nË<(L->
t›
 - L->
ba£
))

	)

43 
	#≠i_checkvÆidödex
(
L
, 
i
Ë
	`≠i_check
(L, (iË!
luaO_nûobje˘
)

	)

45 
	#≠i_ö¸_t›
(
L
Ë{
	`≠i_check
(L, L->
t›
 < L->
ci
->t›); L->t›++;}

	)

49 
TVÆue
 *
	$ödex2adr
 (
lua_Sèã
 *
L
, 
idx
) {

50 i‡(
idx
 > 0) {

51 
TVÆue
 *
o
 = 
L
->
ba£
 + (
idx
 - 1);

52 
	`≠i_check
(
L
, 
idx
 <L->
ci
->
t›
 - L->
ba£
);

53 i‡(
o
 >
L
->
t›
Ë 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
);

54  
o
;

56 i‡(
idx
 > 
LUA_REGISTRYINDEX
) {

57 
	`≠i_check
(
L
, 
idx
 !0 && -idx <L->
t›
 - L->
ba£
);

58  
L
->
t›
 + 
idx
;

60 
idx
) {

61 
LUA_REGISTRYINDEX
:  
	`ªgi°ry
(
L
);

62 
LUA_ENVIRONINDEX
: {

63 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

64 
	`£thvÆue
(
L
, &L->
ív
, 
func
->
c
.env);

65  &
L
->
ív
;

67 
LUA_GLOBALSINDEX
:  
	`gt
(
L
);

69 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

70 
idx
 = 
LUA_GLOBALSINDEX
 - idx;

71  (
idx
 <
func
->
c
.
nupvÆues
)

72 ? &
func
->
c
.
upvÆue
[
idx
-1]

73 : 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
);

76 
	}
}

79 
TabÀ
 *
	$gëcuºív
 (
lua_Sèã
 *
L
) {

80 i‡(
L
->
ci
 =L->
ba£_ci
)

81  
	`hvÆue
(
	`gt
(
L
));

83 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

84  
func
->
c
.
ív
;

86 
	}
}

89 
	$luaA_pushobje˘
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
) {

90 
	`£tobj2s
(
L
, L->
t›
, 
o
);

91 
	`≠i_ö¸_t›
(
L
);

92 
	}
}

95 
LUA_API
 
	$lua_check°ack
 (
lua_Sèã
 *
L
, 
size
) {

96 
ªs
;

97 
	`lua_lock
(
L
);

98 i‡((
L
->
t›
 - L->
ba£
 + 
size
Ë> 
LUAI_MAXCSTACK
)

99 
ªs
 = 0;

101 
	`luaD_check°ack
(
L
, 
size
);

102 i‡(
L
->
ci
->
t›
 < L->t› + 
size
)

103 
L
->
ci
->
t›
 = L->t› + 
size
;

104 
ªs
 = 1;

106 
	`lua_u∆ock
(
L
);

107  
ªs
;

108 
	}
}

111 
LUA_API
 
	$lua_xmove
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
) {

112 
i
;

113 i‡(
‰om
 =
to
) ;

114 
	`lua_lock
(
to
);

115 
	`≠i_check√Àms
(
‰om
, 
n
);

116 
	`≠i_check
(
‰om
, 
	`G
(‰omË=G(
to
));

117 
	`≠i_check
(
‰om
, 
to
->
ci
->
t›
 -Åo->t› >
n
);

118 
‰om
->
t›
 -
n
;

119 
i
 = 0; i < 
n
; i++) {

120 
	`£tobj2s
(
to
,Åo->
t›
++, 
‰om
->t› + 
i
);

122 
	`lua_u∆ock
(
to
);

123 
	}
}

126 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_©∑nic
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
) {

127 
lua_CFun˘i⁄
 
ﬁd
;

128 
	`lua_lock
(
L
);

129 
ﬁd
 = 
	`G
(
L
)->
∑nic
;

130 
	`G
(
L
)->
∑nic
 = 
∑nicf
;

131 
	`lua_u∆ock
(
L
);

132  
ﬁd
;

133 
	}
}

136 
LUA_API
 
lua_Sèã
 *
	$lua_√wthªad
 (
lua_Sèã
 *
L
) {

137 
lua_Sèã
 *
L1
;

138 
	`lua_lock
(
L
);

139 
	`luaC_checkGC
(
L
);

140 
L1
 = 
	`luaE_√wthªad
(
L
);

141 
	`£âhvÆue
(
L
, L->
t›
, 
L1
);

142 
	`≠i_ö¸_t›
(
L
);

143 
	`lua_u∆ock
(
L
);

144 
	`luai_u£r°©ëhªad
(
L
, 
L1
);

145  
L1
;

146 
	}
}

155 
LUA_API
 
	$lua_gët›
 (
lua_Sèã
 *
L
) {

156  
	`ˇ°_öt
(
L
->
t›
 - L->
ba£
);

157 
	}
}

160 
LUA_API
 
	$lua_£â›
 (
lua_Sèã
 *
L
, 
idx
) {

161 
	`lua_lock
(
L
);

162 i‡(
idx
 >= 0) {

163 
	`≠i_check
(
L
, 
idx
 <L->
°ack_œ°
 - L->
ba£
);

164 
L
->
t›
 < L->
ba£
 + 
idx
)

165 
	`£äûvÆue
(
L
->
t›
++);

166 
L
->
t›
 = L->
ba£
 + 
idx
;

169 
	`≠i_check
(
L
, -(
idx
+1Ë<(L->
t›
 - L->
ba£
));

170 
L
->
t›
 +
idx
+1;

172 
	`lua_u∆ock
(
L
);

173 
	}
}

176 
LUA_API
 
	$lua_ªmove
 (
lua_Sèã
 *
L
, 
idx
) {

177 
StkId
 
p
;

178 
	`lua_lock
(
L
);

179 
p
 = 
	`ödex2adr
(
L
, 
idx
);

180 
	`≠i_checkvÆidödex
(
L
, 
p
);

181 ++
p
 < 
L
->
t›
Ë
	`£tobjs2s
(L,Ö-1,Ö);

182 
L
->
t›
--;

183 
	`lua_u∆ock
(
L
);

184 
	}
}

187 
LUA_API
 
	$lua_ö£π
 (
lua_Sèã
 *
L
, 
idx
) {

188 
StkId
 
p
;

189 
StkId
 
q
;

190 
	`lua_lock
(
L
);

191 
p
 = 
	`ödex2adr
(
L
, 
idx
);

192 
	`≠i_checkvÆidödex
(
L
, 
p
);

193 
q
 = 
L
->
t›
; q>
p
; q--Ë
	`£tobjs2s
(L, q, q-1);

194 
	`£tobjs2s
(
L
, 
p
, L->
t›
);

195 
	`lua_u∆ock
(
L
);

196 
	}
}

199 
LUA_API
 
	$lua_ª∂a˚
 (
lua_Sèã
 *
L
, 
idx
) {

200 
StkId
 
o
;

201 
	`lua_lock
(
L
);

202 
	`≠i_check√Àms
(
L
, 1);

203 
o
 = 
	`ödex2adr
(
L
, 
idx
);

204 
	`≠i_checkvÆidödex
(
L
, 
o
);

205 i‡(
idx
 =
LUA_ENVIRONINDEX
) {

206 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

207 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

208 
func
->
c
.
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

209 
	`luaC_b¨rõr
(
L
, 
func
, L->
t›
 - 1);

212 
	`£tobj
(
L
, 
o
, L->
t›
 - 1);

213 i‡(
idx
 < 
LUA_GLOBALSINDEX
)

214 
	`luaC_b¨rõr
(
L
, 
	`cuº_func
(L), L->
t›
 - 1);

216 
L
->
t›
--;

217 
	`lua_u∆ock
(
L
);

218 
	}
}

221 
LUA_API
 
	$lua_pushvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

222 
	`lua_lock
(
L
);

223 
	`£tobj2s
(
L
, L->
t›
, 
	`ödex2adr
(L, 
idx
));

224 
	`≠i_ö¸_t›
(
L
);

225 
	`lua_u∆ock
(
L
);

226 
	}
}

235 
LUA_API
 
	$lua_ty≥
 (
lua_Sèã
 *
L
, 
idx
) {

236 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

237  (
o
 =
luaO_nûobje˘
Ë? 
LUA_TNONE
 : 
	`ây≥
(o);

238 
	}
}

241 
LUA_API
 c⁄° *
	$lua_ty≥«me
 (
lua_Sèã
 *
L
, 
t
) {

242 
	`UNUSED
(
L
);

243  (
t
 =
LUA_TNONE
Ë? "nÿvÆue" : 
luaT_ty≥«mes
[t];

244 
	}
}

247 
LUA_API
 
	$lua_iscfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

248 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

249  
	`iscfun˘i⁄
(
o
);

250 
	}
}

253 
LUA_API
 
	$lua_i¢umbî
 (
lua_Sèã
 *
L
, 
idx
) {

254 
TVÆue
 
n
;

255 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

256  
	`t⁄umbî
(
o
, &
n
);

257 
	}
}

260 
LUA_API
 
	$lua_is°rög
 (
lua_Sèã
 *
L
, 
idx
) {

261 
t
 = 
	`lua_ty≥
(
L
, 
idx
);

262  (
t
 =
LUA_TSTRING
 ||Å =
LUA_TNUMBER
);

263 
	}
}

266 
LUA_API
 
	$lua_isu£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

267 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

268  (
	`âisu£rd©a
(
o
Ë|| 
	`âi¶ightu£rd©a
(o));

269 
	}
}

272 
LUA_API
 
	$lua_øwequÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

273 
StkId
 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

274 
StkId
 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

275  (
o1
 =
luaO_nûobje˘
 || 
o2
 ==ÜuaO_nilobject) ? 0

276 : 
	`luaO_øwequÆObj
(
o1
, 
o2
);

277 
	}
}

280 
LUA_API
 
	$lua_equÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

281 
StkId
 
o1
, 
o2
;

282 
i
;

283 
	`lua_lock
(
L
);

284 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

285 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

286 
i
 = (
o1
 =
luaO_nûobje˘
 || 
o2
 =luaO_nûobje˘Ë? 0 : 
	`equÆobj
(
L
, o1, o2);

287 
	`lua_u∆ock
(
L
);

288  
i
;

289 
	}
}

292 
LUA_API
 
	$lua_Às°h™
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

293 
StkId
 
o1
, 
o2
;

294 
i
;

295 
	`lua_lock
(
L
);

296 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

297 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

298 
i
 = (
o1
 =
luaO_nûobje˘
 || 
o2
 ==ÜuaO_nilobject) ? 0

299 : 
	`luaV_Às°h™
(
L
, 
o1
, 
o2
);

300 
	`lua_u∆ock
(
L
);

301  
i
;

302 
	}
}

306 
LUA_API
 
lua_Numbî
 
	$lua_t⁄umbî
 (
lua_Sèã
 *
L
, 
idx
) {

307 
TVÆue
 
n
;

308 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

309 i‡(
	`t⁄umbî
(
o
, &
n
))

310  
	`nvÆue
(
o
);

313 
	}
}

316 
LUA_API
 
lua_I¡egî
 
	$lua_toöãgî
 (
lua_Sèã
 *
L
, 
idx
) {

317 
TVÆue
 
n
;

318 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

319 i‡(
	`t⁄umbî
(
o
, &
n
)) {

320 
lua_I¡egî
 
ªs
;

321 
lua_Numbî
 
num
 = 
	`nvÆue
(
o
);

322 
	`lua_numbî2öãgî
(
ªs
, 
num
);

323  
ªs
;

327 
	}
}

330 
LUA_API
 
	$lua_toboﬁón
 (
lua_Sèã
 *
L
, 
idx
) {

331 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

332  !
	`l_isÁl£
(
o
);

333 
	}
}

336 
LUA_API
 c⁄° *
	$lua_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

337 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

338 i‡(!
	`âis°rög
(
o
)) {

339 
	`lua_lock
(
L
);

340 i‡(!
	`luaV_to°rög
(
L
, 
o
)) {

341 i‡(
Àn
 !
NULL
) *len = 0;

342 
	`lua_u∆ock
(
L
);

343  
NULL
;

345 
	`luaC_checkGC
(
L
);

346 
o
 = 
	`ödex2adr
(
L
, 
idx
);

347 
	`lua_u∆ock
(
L
);

349 i‡(
Àn
 !
NULL
Ë*À¿
	`tsvÆue
(
o
)->len;

350  
	`svÆue
(
o
);

351 
	}
}

354 
LUA_API
 
size_t
 
	$lua_objÀn
 (
lua_Sèã
 *
L
, 
idx
) {

355 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

356 
	`ây≥
(
o
)) {

357 
LUA_TSTRING
:  
	`tsvÆue
(
o
)->
Àn
;

358 
LUA_TUSERDATA
:  
	`uvÆue
(
o
)->
Àn
;

359 
LUA_TTABLE
:  
	`luaH_gën
(
	`hvÆue
(
o
));

360 
LUA_TNUMBER
: {

361 
size_t
 
l
;

362 
	`lua_lock
(
L
);

363 
l
 = (
	`luaV_to°rög
(
L
, 
o
Ë? 
	`tsvÆue
(o)->
Àn
 : 0);

364 
	`lua_u∆ock
(
L
);

365  
l
;

369 
	}
}

372 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_tocfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

373 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

374  (!
	`iscfun˘i⁄
(
o
)Ë? 
NULL
 : 
	`˛vÆue
(o)->
c
.
f
;

375 
	}
}

378 
LUA_API
 *
	$lua_tou£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

379 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

380 
	`ây≥
(
o
)) {

381 
LUA_TUSERDATA
:  (
	`øwuvÆue
(
o
) + 1);

382 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
o
);

383 :  
NULL
;

385 
	}
}

388 
LUA_API
 
lua_Sèã
 *
	$lua_tŸhªad
 (
lua_Sèã
 *
L
, 
idx
) {

389 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

390  (!
	`âi°hªad
(
o
)Ë? 
NULL
 : 
	`thvÆue
(o);

391 
	}
}

394 
LUA_API
 c⁄° *
	$lua_t›oöãr
 (
lua_Sèã
 *
L
, 
idx
) {

395 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

396 
	`ây≥
(
o
)) {

397 
LUA_TTABLE
:  
	`hvÆue
(
o
);

398 
LUA_TFUNCTION
:  
	`˛vÆue
(
o
);

399 
LUA_TTHREAD
:  
	`thvÆue
(
o
);

400 
LUA_TUSERDATA
:

401 
LUA_TLIGHTUSERDATA
:

402  
	`lua_tou£rd©a
(
L
, 
idx
);

403 :  
NULL
;

405 
	}
}

414 
LUA_API
 
	$lua_pushnû
 (
lua_Sèã
 *
L
) {

415 
	`lua_lock
(
L
);

416 
	`£äûvÆue
(
L
->
t›
);

417 
	`≠i_ö¸_t›
(
L
);

418 
	`lua_u∆ock
(
L
);

419 
	}
}

422 
LUA_API
 
	$lua_pushnumbî
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
n
) {

423 
	`lua_lock
(
L
);

424 
	`£ävÆue
(
L
->
t›
, 
n
);

425 
	`≠i_ö¸_t›
(
L
);

426 
	`lua_u∆ock
(
L
);

427 
	}
}

430 
LUA_API
 
	$lua_pushöãgî
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
) {

431 
	`lua_lock
(
L
);

432 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
n
));

433 
	`≠i_ö¸_t›
(
L
);

434 
	`lua_u∆ock
(
L
);

435 
	}
}

438 
LUA_API
 
	$lua_pushl°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
) {

439 
	`lua_lock
(
L
);

440 
	`luaC_checkGC
(
L
);

441 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, 
s
, 
Àn
));

442 
	`≠i_ö¸_t›
(
L
);

443 
	`lua_u∆ock
(
L
);

444 
	}
}

447 
LUA_API
 
	$lua_push°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

448 i‡(
s
 =
NULL
)

449 
	`lua_pushnû
(
L
);

451 
	`lua_pushl°rög
(
L
, 
s
, 
	`°æí
(s));

452 
	}
}

455 
LUA_API
 c⁄° *
	$lua_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

456 
va_li°
 
¨gp
) {

457 c⁄° *
ªt
;

458 
	`lua_lock
(
L
);

459 
	`luaC_checkGC
(
L
);

460 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

461 
	`lua_u∆ock
(
L
);

462  
ªt
;

463 
	}
}

466 
LUA_API
 c⁄° *
	$lua_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

467 c⁄° *
ªt
;

468 
va_li°
 
¨gp
;

469 
	`lua_lock
(
L
);

470 
	`luaC_checkGC
(
L
);

471 
	`va_°¨t
(
¨gp
, 
fmt
);

472 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

473 
	`va_íd
(
¨gp
);

474 
	`lua_u∆ock
(
L
);

475  
ªt
;

476 
	}
}

479 
LUA_API
 
	$lua_pushc˛osuª
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
) {

480 
Closuª
 *
˛
;

481 
	`lua_lock
(
L
);

482 
	`luaC_checkGC
(
L
);

483 
	`≠i_check√Àms
(
L
, 
n
);

484 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 
n
, 
	`gëcuºív
(L));

485 
˛
->
c
.
f
 = 
‚
;

486 
L
->
t›
 -
n
;

487 
n
--)

488 
	`£tobj2n
(
L
, &
˛
->
c
.
upvÆue
[
n
], L->
t›
+n);

489 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

490 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
˛
)));

491 
	`≠i_ö¸_t›
(
L
);

492 
	`lua_u∆ock
(
L
);

493 
	}
}

496 
LUA_API
 
	$lua_pushboﬁón
 (
lua_Sèã
 *
L
, 
b
) {

497 
	`lua_lock
(
L
);

498 
	`£tbvÆue
(
L
->
t›
, (
b
 != 0));

499 
	`≠i_ö¸_t›
(
L
);

500 
	`lua_u∆ock
(
L
);

501 
	}
}

504 
LUA_API
 
	$lua_pushlightu£rd©a
 (
lua_Sèã
 *
L
, *
p
) {

505 
	`lua_lock
(
L
);

506 
	`£çvÆue
(
L
->
t›
, 
p
);

507 
	`≠i_ö¸_t›
(
L
);

508 
	`lua_u∆ock
(
L
);

509 
	}
}

512 
LUA_API
 
	$lua_pushthªad
 (
lua_Sèã
 *
L
) {

513 
	`lua_lock
(
L
);

514 
	`£âhvÆue
(
L
, L->
t›
, L);

515 
	`≠i_ö¸_t›
(
L
);

516 
	`lua_u∆ock
(
L
);

517  (
	`G
(
L
)->
maöthªad
 == L);

518 
	}
}

527 
LUA_API
 
	$lua_gëèbÀ
 (
lua_Sèã
 *
L
, 
idx
) {

528 
StkId
 
t
;

529 
	`lua_lock
(
L
);

530 
t
 = 
	`ödex2adr
(
L
, 
idx
);

531 
	`≠i_checkvÆidödex
(
L
, 
t
);

532 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

533 
	`lua_u∆ock
(
L
);

534 
	}
}

537 
LUA_API
 
	$lua_gëfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

538 
StkId
 
t
;

539 
TVÆue
 
key
;

540 
	`lua_lock
(
L
);

541 
t
 = 
	`ödex2adr
(
L
, 
idx
);

542 
	`≠i_checkvÆidödex
(
L
, 
t
);

543 
	`£tsvÆue
(
L
, &
key
, 
	`luaS_√w
(L, 
k
));

544 
	`luaV_gëèbÀ
(
L
, 
t
, &
key
, L->
t›
);

545 
	`≠i_ö¸_t›
(
L
);

546 
	`lua_u∆ock
(
L
);

547 
	}
}

550 
LUA_API
 
	$lua_øwgë
 (
lua_Sèã
 *
L
, 
idx
) {

551 
StkId
 
t
;

552 
	`lua_lock
(
L
);

553 
t
 = 
	`ödex2adr
(
L
, 
idx
);

554 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

555 
	`£tobj2s
(
L
, L->
t›
 - 1, 
	`luaH_gë
(
	`hvÆue
(
t
), L->top - 1));

556 
	`lua_u∆ock
(
L
);

557 
	}
}

560 
LUA_API
 
	$lua_øwgëi
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

561 
StkId
 
o
;

562 
	`lua_lock
(
L
);

563 
o
 = 
	`ödex2adr
(
L
, 
idx
);

564 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

565 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gënum
(
	`hvÆue
(
o
), 
n
));

566 
	`≠i_ö¸_t›
(
L
);

567 
	`lua_u∆ock
(
L
);

568 
	}
}

571 
LUA_API
 
	$lua_¸óãèbÀ
 (
lua_Sèã
 *
L
, 
«ºay
, 
ƒec
) {

572 
	`lua_lock
(
L
);

573 
	`luaC_checkGC
(
L
);

574 
	`£thvÆue
(
L
, L->
t›
, 
	`luaH_√w
(L, 
«ºay
, 
ƒec
));

575 
	`≠i_ö¸_t›
(
L
);

576 
	`lua_u∆ock
(
L
);

577 
	}
}

580 
LUA_API
 
	$lua_gëmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

581 c⁄° 
TVÆue
 *
obj
;

582 
TabÀ
 *
mt
 = 
NULL
;

583 
ªs
;

584 
	`lua_lock
(
L
);

585 
obj
 = 
	`ödex2adr
(
L
, 
objödex
);

586 
	`ây≥
(
obj
)) {

587 
LUA_TTABLE
:

588 
mt
 = 
	`hvÆue
(
obj
)->
më©abÀ
;

590 
LUA_TUSERDATA
:

591 
mt
 = 
	`uvÆue
(
obj
)->
më©abÀ
;

594 
mt
 = 
	`G
(
L
)->mt[
	`ây≥
(
obj
)];

597 i‡(
mt
 =
NULL
)

598 
ªs
 = 0;

600 
	`£thvÆue
(
L
, L->
t›
, 
mt
);

601 
	`≠i_ö¸_t›
(
L
);

602 
ªs
 = 1;

604 
	`lua_u∆ock
(
L
);

605  
ªs
;

606 
	}
}

609 
LUA_API
 
	$lua_gë„nv
 (
lua_Sèã
 *
L
, 
idx
) {

610 
StkId
 
o
;

611 
	`lua_lock
(
L
);

612 
o
 = 
	`ödex2adr
(
L
, 
idx
);

613 
	`≠i_checkvÆidödex
(
L
, 
o
);

614 
	`ây≥
(
o
)) {

615 
LUA_TFUNCTION
:

616 
	`£thvÆue
(
L
, L->
t›
, 
	`˛vÆue
(
o
)->
c
.
ív
);

618 
LUA_TUSERDATA
:

619 
	`£thvÆue
(
L
, L->
t›
, 
	`uvÆue
(
o
)->
ív
);

621 
LUA_TTHREAD
:

622 
	`£tobj2s
(
L
, L->
t›
, 
	`gt
(
	`thvÆue
(
o
)));

625 
	`£äûvÆue
(
L
->
t›
);

628 
	`≠i_ö¸_t›
(
L
);

629 
	`lua_u∆ock
(
L
);

630 
	}
}

638 
LUA_API
 
	$lua_£âabÀ
 (
lua_Sèã
 *
L
, 
idx
) {

639 
StkId
 
t
;

640 
	`lua_lock
(
L
);

641 
	`≠i_check√Àms
(
L
, 2);

642 
t
 = 
	`ödex2adr
(
L
, 
idx
);

643 
	`≠i_checkvÆidödex
(
L
, 
t
);

644 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 2, L->top - 1);

645 
L
->
t›
 -= 2;

646 
	`lua_u∆ock
(
L
);

647 
	}
}

650 
LUA_API
 
	$lua_£tfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

651 
StkId
 
t
;

652 
TVÆue
 
key
;

653 
	`lua_lock
(
L
);

654 
	`≠i_check√Àms
(
L
, 1);

655 
t
 = 
	`ödex2adr
(
L
, 
idx
);

656 
	`≠i_checkvÆidödex
(
L
, 
t
);

657 
	`£tsvÆue
(
L
, &
key
, 
	`luaS_√w
(L, 
k
));

658 
	`luaV_£âabÀ
(
L
, 
t
, &
key
, L->
t›
 - 1);

659 
L
->
t›
--;

660 
	`lua_u∆ock
(
L
);

661 
	}
}

664 
LUA_API
 
	$lua_øw£t
 (
lua_Sèã
 *
L
, 
idx
) {

665 
StkId
 
t
;

666 
	`lua_lock
(
L
);

667 
	`≠i_check√Àms
(
L
, 2);

668 
t
 = 
	`ödex2adr
(
L
, 
idx
);

669 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

670 
	`£tobj2t
(
L
, 
	`luaH_£t
(L, 
	`hvÆue
(
t
), L->
t›
-2), L->top-1);

671 
	`luaC_b¨rõπ
(
L
, 
	`hvÆue
(
t
), L->
t›
-1);

672 
L
->
t›
 -= 2;

673 
	`lua_u∆ock
(
L
);

674 
	}
}

677 
LUA_API
 
	$lua_øw£ti
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

678 
StkId
 
o
;

679 
	`lua_lock
(
L
);

680 
	`≠i_check√Àms
(
L
, 1);

681 
o
 = 
	`ödex2adr
(
L
, 
idx
);

682 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

683 
	`£tobj2t
(
L
, 
	`luaH_£äum
(L, 
	`hvÆue
(
o
), 
n
), L->
t›
-1);

684 
	`luaC_b¨rõπ
(
L
, 
	`hvÆue
(
o
), L->
t›
-1);

685 
L
->
t›
--;

686 
	`lua_u∆ock
(
L
);

687 
	}
}

690 
LUA_API
 
	$lua_£tmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

691 
TVÆue
 *
obj
;

692 
TabÀ
 *
mt
;

693 
	`lua_lock
(
L
);

694 
	`≠i_check√Àms
(
L
, 1);

695 
obj
 = 
	`ödex2adr
(
L
, 
objödex
);

696 
	`≠i_checkvÆidödex
(
L
, 
obj
);

697 i‡(
	`âi¢û
(
L
->
t›
 - 1))

698 
mt
 = 
NULL
;

700 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

701 
mt
 = 
	`hvÆue
(
L
->
t›
 - 1);

703 
	`ây≥
(
obj
)) {

704 
LUA_TTABLE
: {

705 
	`hvÆue
(
obj
)->
më©abÀ
 = 
mt
;

706 i‡(
mt
)

707 
	`luaC_objb¨rõπ
(
L
, 
	`hvÆue
(
obj
), 
mt
);

710 
LUA_TUSERDATA
: {

711 
	`uvÆue
(
obj
)->
më©abÀ
 = 
mt
;

712 i‡(
mt
)

713 
	`luaC_objb¨rõr
(
L
, 
	`øwuvÆue
(
obj
), 
mt
);

717 
	`G
(
L
)->
mt
[
	`ây≥
(
obj
)] = mt;

721 
L
->
t›
--;

722 
	`lua_u∆ock
(
L
);

724 
	}
}

727 
LUA_API
 
	$lua_£t„nv
 (
lua_Sèã
 *
L
, 
idx
) {

728 
StkId
 
o
;

729 
ªs
 = 1;

730 
	`lua_lock
(
L
);

731 
	`≠i_check√Àms
(
L
, 1);

732 
o
 = 
	`ödex2adr
(
L
, 
idx
);

733 
	`≠i_checkvÆidödex
(
L
, 
o
);

734 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

735 
	`ây≥
(
o
)) {

736 
LUA_TFUNCTION
:

737 
	`˛vÆue
(
o
)->
c
.
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

739 
LUA_TUSERDATA
:

740 
	`uvÆue
(
o
)->
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

742 
LUA_TTHREAD
:

743 
	`£thvÆue
(
L
, 
	`gt
(
	`thvÆue
(
o
)), 
	`hvÆue
(L->
t›
 - 1));

746 
ªs
 = 0;

749 
	`luaC_objb¨rõr
(
L
, 
	`gcvÆue
(
o
), 
	`hvÆue
(L->
t›
 - 1));

750 
L
->
t›
--;

751 
	`lua_u∆ock
(
L
);

752  
ªs
;

753 
	}
}

761 
	#adju°ªsu…s
(
L
,
ƒes
) \

762 { i‡(
ƒes
 =
LUA_MULTRET
 && 
L
->
t›
 >L->
ci
->t›ËL->ci->t› = L->t›; }

	)

765 
	#checkªsu…s
(
L
,
«
,
ƒ
) \

766 
	`≠i_check
(
L
, (
ƒ
Ë=
LUA_MULTRET
 || (L->
ci
->
t›
 - L->t› >“rË- (
«
)))

	)

769 
LUA_API
 
	$lua_ˇŒ
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
) {

770 
StkId
 
func
;

771 
	`lua_lock
(
L
);

772 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

773 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

774 
func
 = 
L
->
t›
 - (
«rgs
+1);

775 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
);

776 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

777 
	`lua_u∆ock
(
L
);

778 
	}
}

785 
	sCÆlS
 {

786 
StkId
 
	mfunc
;

787 
	mƒesu…s
;

791 
	$f_ˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

792 
CÆlS
 *
c
 = 
	`ˇ°
(CÆlS *, 
ud
);

793 
	`luaD_ˇŒ
(
L
, 
c
->
func
, c->
ƒesu…s
);

794 
	}
}

798 
LUA_API
 
	$lua_pˇŒ
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
) {

799 
CÆlS
 
c
;

800 
°©us
;

801 
±rdiff_t
 
func
;

802 
	`lua_lock
(
L
);

803 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

804 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

805 i‡(
îrfunc
 == 0)

806 
func
 = 0;

808 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
îrfunc
);

809 
	`≠i_checkvÆidödex
(
L
, 
o
);

810 
func
 = 
	`ßve°ack
(
L
, 
o
);

812 
c
.
func
 = 
L
->
t›
 - (
«rgs
+1);

813 
c
.
ƒesu…s
 =Çresults;

814 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_ˇŒ
, &
c
, 
	`ßve°ack
(L, c.
func
), func);

815 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

816 
	`lua_u∆ock
(
L
);

817  
°©us
;

818 
	}
}

824 
	sCCÆlS
 {

825 
lua_CFun˘i⁄
 
	mfunc
;

826 *
	mud
;

830 
	$f_CˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

831 
CCÆlS
 *
c
 = 
	`ˇ°
(CCÆlS *, 
ud
);

832 
Closuª
 *
˛
;

833 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 0, 
	`gëcuºív
(L));

834 
˛
->
c
.
f
 = c->
func
;

835 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

836 
	`≠i_ö¸_t›
(
L
);

837 
	`£çvÆue
(
L
->
t›
, 
c
->
ud
);

838 
	`≠i_ö¸_t›
(
L
);

839 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

840 
	}
}

843 
LUA_API
 
	$lua_˝ˇŒ
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
func
, *
ud
) {

844 
CCÆlS
 
c
;

845 
°©us
;

846 
	`lua_lock
(
L
);

847 
c
.
func
 = func;

848 
c
.
ud
 = ud;

849 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_CˇŒ
, &
c
, 
	`ßve°ack
(L, L->
t›
), 0);

850 
	`lua_u∆ock
(
L
);

851  
°©us
;

852 
	}
}

855 
LUA_API
 
	$lua_lﬂd
 (
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
d©a
,

856 c⁄° *
chunk«me
) {

857 
ZIO
 
z
;

858 
°©us
;

859 
	`lua_lock
(
L
);

860 i‡(!
chunk«me
) chunkname = "?";

861 
	`luaZ_öô
(
L
, &
z
, 
ªadî
, 
d©a
);

862 
°©us
 = 
	`luaD_¥Ÿe˘ed∑r£r
(
L
, &
z
, 
chunk«me
);

863 
	`lua_u∆ock
(
L
);

864  
°©us
;

865 
	}
}

868 
LUA_API
 
	$lua_dump
 (
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
) {

869 
°©us
;

870 
TVÆue
 *
o
;

871 
	`lua_lock
(
L
);

872 
	`≠i_check√Àms
(
L
, 1);

873 
o
 = 
L
->
t›
 - 1;

874 i‡(
	`isLfun˘i⁄
(
o
))

875 
°©us
 = 
	`luaU_dump
(
L
, 
	`˛vÆue
(
o
)->
l
.
p
, 
wrôî
, 
d©a
, 0);

877 
°©us
 = 1;

878 
	`lua_u∆ock
(
L
);

879  
°©us
;

880 
	}
}

883 
LUA_API
 
	$lua_°©us
 (
lua_Sèã
 *
L
) {

884  
L
->
°©us
;

885 
	}
}

892 
LUA_API
 
	$lua_gc
 (
lua_Sèã
 *
L
, 
wh©
, 
d©a
) {

893 
ªs
 = 0;

894 
globÆ_Sèã
 *
g
;

895 
	`lua_lock
(
L
);

896 
g
 = 
	`G
(
L
);

897 
wh©
) {

898 
LUA_GCSTOP
: {

899 
g
->
GCthªshﬁd
 = 
MAX_LUMEM
;

902 
LUA_GCRESTART
: {

903 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
;

906 
LUA_GCCOLLECT
: {

907 
	`luaC_fuŒgc
(
L
);

910 
LUA_GCCOUNT
: {

912 
ªs
 = 
	`ˇ°_öt
(
g
->
tŸÆbyãs
 >> 10);

915 
LUA_GCCOUNTB
: {

916 
ªs
 = 
	`ˇ°_öt
(
g
->
tŸÆbyãs
 & 0x3ff);

919 
LUA_GCSTEP
: {

920 
lu_mem
 
a
 = (
	`ˇ°
÷u_mem, 
d©a
) << 10);

921 i‡(
a
 <
g
->
tŸÆbyãs
)

922 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
 - 
a
;

924 
g
->
GCthªshﬁd
 = 0;

925 
g
->
GCthªshﬁd
 <g->
tŸÆbyãs
)

926 
	`luaC_°ï
(
L
);

927 i‡(
g
->
gc°©e
 =
GCS∑u£
)

928 
ªs
 = 1;

931 
LUA_GCSETPAUSE
: {

932 
ªs
 = 
g
->
g˝au£
;

933 
g
->
g˝au£
 = 
d©a
;

936 
LUA_GCSETSTEPMUL
: {

937 
ªs
 = 
g
->
gc°ïmul
;

938 
g
->
gc°ïmul
 = 
d©a
;

941 : 
ªs
 = -1;

943 
	`lua_u∆ock
(
L
);

944  
ªs
;

945 
	}
}

954 
LUA_API
 
	$lua_îr‹
 (
lua_Sèã
 *
L
) {

955 
	`lua_lock
(
L
);

956 
	`≠i_check√Àms
(
L
, 1);

957 
	`luaG_îr‹msg
(
L
);

958 
	`lua_u∆ock
(
L
);

960 
	}
}

963 
LUA_API
 
	$lua_√xt
 (
lua_Sèã
 *
L
, 
idx
) {

964 
StkId
 
t
;

965 
m‹e
;

966 
	`lua_lock
(
L
);

967 
t
 = 
	`ödex2adr
(
L
, 
idx
);

968 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

969 
m‹e
 = 
	`luaH_√xt
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 1);

970 i‡(
m‹e
) {

971 
	`≠i_ö¸_t›
(
L
);

974 
L
->
t›
 -= 1;

975 
	`lua_u∆ock
(
L
);

976  
m‹e
;

977 
	}
}

980 
LUA_API
 
	$lua_c⁄ˇt
 (
lua_Sèã
 *
L
, 
n
) {

981 
	`lua_lock
(
L
);

982 
	`≠i_check√Àms
(
L
, 
n
);

983 i‡(
n
 >= 2) {

984 
	`luaC_checkGC
(
L
);

985 
	`luaV_c⁄ˇt
(
L
, 
n
, 
	`ˇ°_öt
(L->
t›
 - L->
ba£
) - 1);

986 
L
->
t›
 -(
n
-1);

988 i‡(
n
 == 0) {

989 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, "", 0));

990 
	`≠i_ö¸_t›
(
L
);

993 
	`lua_u∆ock
(
L
);

994 
	}
}

997 
LUA_API
 
lua_AŒoc
 
	$lua_gëÆlocf
 (
lua_Sèã
 *
L
, **
ud
) {

998 
lua_AŒoc
 
f
;

999 
	`lua_lock
(
L
);

1000 i‡(
ud
Ë*ud = 
	`G
(
L
)->ud;

1001 
f
 = 
	`G
(
L
)->
‰óŒoc
;

1002 
	`lua_u∆ock
(
L
);

1003  
f
;

1004 
	}
}

1007 
LUA_API
 
	$lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
) {

1008 
	`lua_lock
(
L
);

1009 
	`G
(
L
)->
ud
 = ud;

1010 
	`G
(
L
)->
‰óŒoc
 = 
f
;

1011 
	`lua_u∆ock
(
L
);

1012 
	}
}

1015 
LUA_API
 *
	$lua_√wu£rd©a
 (
lua_Sèã
 *
L
, 
size_t
 
size
) {

1016 
Ud©a
 *
u
;

1017 
	`lua_lock
(
L
);

1018 
	`luaC_checkGC
(
L
);

1019 
u
 = 
	`luaS_√wud©a
(
L
, 
size
, 
	`gëcuºív
(L));

1020 
	`£tuvÆue
(
L
, L->
t›
, 
u
);

1021 
	`≠i_ö¸_t›
(
L
);

1022 
	`lua_u∆ock
(
L
);

1023  
u
 + 1;

1024 
	}
}

1029 c⁄° *
	$aux_upvÆue
 (
StkId
 
fi
, 
n
, 
TVÆue
 **
vÆ
) {

1030 
Closuª
 *
f
;

1031 i‡(!
	`âisfun˘i⁄
(
fi
)Ë 
NULL
;

1032 
f
 = 
	`˛vÆue
(
fi
);

1033 i‡(
f
->
c
.
isC
) {

1034 i‡(!(1 <
n
 &&Ç <
f
->
c
.
nupvÆues
)Ë 
NULL
;

1035 *
vÆ
 = &
f
->
c
.
upvÆue
[
n
-1];

1039 
PrŸo
 *
p
 = 
f
->
l
.p;

1040 i‡(!(1 <
n
 &&Ç <
p
->
sizeupvÆues
)Ë 
NULL
;

1041 *
vÆ
 = 
f
->
l
.
upvÆs
[
n
-1]->
v
;

1042  
	`gë°r
(
p
->
upvÆues
[
n
-1]);

1044 
	}
}

1047 
LUA_API
 c⁄° *
	$lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1048 c⁄° *
«me
;

1049 
TVÆue
 *
vÆ
;

1050 
	`lua_lock
(
L
);

1051 
«me
 = 
	`aux_upvÆue
(
	`ödex2adr
(
L
, 
funcödex
), 
n
, &
vÆ
);

1052 i‡(
«me
) {

1053 
	`£tobj2s
(
L
, L->
t›
, 
vÆ
);

1054 
	`≠i_ö¸_t›
(
L
);

1056 
	`lua_u∆ock
(
L
);

1057  
«me
;

1058 
	}
}

1061 
LUA_API
 c⁄° *
	$lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1062 c⁄° *
«me
;

1063 
TVÆue
 *
vÆ
;

1064 
StkId
 
fi
;

1065 
	`lua_lock
(
L
);

1066 
fi
 = 
	`ödex2adr
(
L
, 
funcödex
);

1067 
	`≠i_check√Àms
(
L
, 1);

1068 
«me
 = 
	`aux_upvÆue
(
fi
, 
n
, &
vÆ
);

1069 i‡(
«me
) {

1070 
L
->
t›
--;

1071 
	`£tobj
(
L
, 
vÆ
, L->
t›
);

1072 
	`luaC_b¨rõr
(
L
, 
	`˛vÆue
(
fi
), L->
t›
);

1074 
	`lua_u∆ock
(
L
);

1075  
«me
;

1076 
	}
}

	@lapi.h

7 #i‚de‡
œpi_h


8 
	#œpi_h


	)

11 
	~"lobje˘.h
"

14 
LUAI_FUNC
 
luaA_pushobje˘
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
);

	@lauxlib.c

8 
	~<˘y≥.h
>

9 
	~<î∫o.h
>

10 
	~<°d¨g.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

20 
	#œuxlib_c


	)

21 
	#LUA_LIB


	)

23 
	~"lua.h
"

25 
	~"œuxlib.h
"

28 
	#FREELIST_REF
 0

	)

32 
	#abs_ödex
(
L
, 
i
Ë((iË> 0 || (iË<
LUA_REGISTRYINDEX
 ? (i) : \

33 
	`lua_gët›
(
L
Ë+ (
i
Ë+ 1)

	)

43 
LUALIB_API
 
	$luaL_¨gîr‹
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
exåamsg
) {

44 
lua_Debug
 
¨
;

45 i‡(!
	`lua_gë°ack
(
L
, 0, &
¨
))

46  
	`luaL_îr‹
(
L
, "badárgumíà#%d (%s)", 
«rg
, 
exåamsg
);

47 
	`lua_gëöfo
(
L
, "n", &
¨
);

48 i‡(
	`°rcmp
(
¨
.
«mewh©
, "method") == 0) {

49 
«rg
--;

50 i‡(
«rg
 == 0)

51  
	`luaL_îr‹
(
L
, "ˇŒög " 
LUA_QS
 " on bad self (%s)",

52 
¨
.
«me
, 
exåamsg
);

54 i‡(
¨
.
«me
 =
NULL
)

55 
¨
.
«me
 = "?";

56  
	`luaL_îr‹
(
L
, "badárgumíà#%dÅÿ" 
LUA_QS
 " (%s)",

57 
«rg
, 
¨
.
«me
, 
exåamsg
);

58 
	}
}

61 
LUALIB_API
 
	$luaL_ty≥º‹
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
) {

62 c⁄° *
msg
 = 
	`lua_pushf°rög
(
L
, "%sÉxpected, got %s",

63 
äame
, 
	`luaL_ty≥«me
(
L
, 
«rg
));

64  
	`luaL_¨gîr‹
(
L
, 
«rg
, 
msg
);

65 
	}
}

68 
	$èg_îr‹
 (
lua_Sèã
 *
L
, 
«rg
, 
èg
) {

69 
	`luaL_ty≥º‹
(
L
, 
«rg
, 
	`lua_ty≥«me
(L, 
èg
));

70 
	}
}

73 
LUALIB_API
 
	$luaL_whîe
 (
lua_Sèã
 *
L
, 
Àvñ
) {

74 
lua_Debug
 
¨
;

75 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
)) {

76 
	`lua_gëöfo
(
L
, "Sl", &
¨
);

77 i‡(
¨
.
cuºíéöe
 > 0) {

78 
	`lua_pushf°rög
(
L
, "%s:%d: ", 
¨
.
sh‹t_§c
,ár.
cuºíéöe
);

82 
	`lua_pushlôîÆ
(
L
, "");

83 
	}
}

86 
LUALIB_API
 
	$luaL_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

87 
va_li°
 
¨gp
;

88 
	`va_°¨t
(
¨gp
, 
fmt
);

89 
	`luaL_whîe
(
L
, 1);

90 
	`lua_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

91 
	`va_íd
(
¨gp
);

92 
	`lua_c⁄ˇt
(
L
, 2);

93  
	`lua_îr‹
(
L
);

94 
	}
}

99 
LUALIB_API
 
	$luaL_check›ti⁄
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
def
,

100 c⁄° *c⁄° 
l°
[]) {

101 c⁄° *
«me
 = (
def
Ë? 
	`luaL_›t°rög
(
L
, 
«rg
, def) :

102 
	`luaL_check°rög
(
L
, 
«rg
);

103 
i
;

104 
i
=0; 
l°
[i]; i++)

105 i‡(
	`°rcmp
(
l°
[
i
], 
«me
) == 0)

106  
i
;

107  
	`luaL_¨gîr‹
(
L
, 
«rg
,

108 
	`lua_pushf°rög
(
L
, "övÆid o±i⁄ " 
LUA_QS
, 
«me
));

109 
	}
}

112 
LUALIB_API
 
	$luaL_√wmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

113 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

114 i‡(!
	`lua_i¢û
(
L
, -1))

116 
	`lua_p›
(
L
, 1);

117 
	`lua_√wèbÀ
(
L
);

118 
	`lua_pushvÆue
(
L
, -1);

119 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

121 
	}
}

124 
LUALIB_API
 *
	$luaL_checkud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

125 *
p
 = 
	`lua_tou£rd©a
(
L
, 
ud
);

126 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

127 i‡(
p
 =
NULL
 || !
	`lua_gëmë©abÀ
(
L
, 
ud
Ë|| !
	`lua_øwequÆ
(L, -1, -2))

128 
	`luaL_ty≥º‹
(
L
, 
ud
, 
äame
);

129 
	`lua_p›
(
L
, 2);

130  
p
;

131 
	}
}

134 
LUALIB_API
 
	$luaL_check°ack
 (
lua_Sèã
 *
L
, 
•a˚
, c⁄° *
mes
) {

135 i‡(!
	`lua_check°ack
(
L
, 
•a˚
))

136 
	`luaL_îr‹
(
L
, "°ack ovîÊow (%s)", 
mes
);

137 
	}
}

140 
LUALIB_API
 
	$luaL_checkty≥
 (
lua_Sèã
 *
L
, 
«rg
, 
t
) {

141 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë!
t
)

142 
	`èg_îr‹
(
L
, 
«rg
, 
t
);

143 
	}
}

146 
LUALIB_API
 
	$luaL_check™y
 (
lua_Sèã
 *
L
, 
«rg
) {

147 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë=
LUA_TNONE
)

148 
	`luaL_¨gîr‹
(
L
, 
«rg
, "valueÉxpected");

149 
	}
}

152 
LUALIB_API
 c⁄° *
	$luaL_checkl°rög
 (
lua_Sèã
 *
L
, 
«rg
, 
size_t
 *
Àn
) {

153 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
«rg
, 
Àn
);

154 i‡(!
s
Ë
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TSTRING
);

155  
s
;

156 
	}
}

159 
LUALIB_API
 c⁄° *
	$luaL_›é°rög
 (
lua_Sèã
 *
L
, 
«rg
,

160 c⁄° *
def
, 
size_t
 *
Àn
) {

161 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
«rg
)) {

162 i‡(
Àn
)

163 *
Àn
 = (
def
 ? 
	`°æí
(def) : 0);

164  
def
;

166  
	`luaL_checkl°rög
(
L
, 
«rg
, 
Àn
);

167 
	}
}

170 
LUALIB_API
 
lua_Numbî
 
	$luaL_checknumbî
 (
lua_Sèã
 *
L
, 
«rg
) {

171 
lua_Numbî
 
d
 = 
	`lua_t⁄umbî
(
L
, 
«rg
);

172 i‡(
d
 =0 && !
	`lua_i¢umbî
(
L
, 
«rg
))

173 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TNUMBER
);

174  
d
;

175 
	}
}

178 
LUALIB_API
 
lua_Numbî
 
	$luaL_›äumbî
 (
lua_Sèã
 *
L
, 
«rg
, 
lua_Numbî
 
def
) {

179  
	`luaL_›t
(
L
, 
luaL_checknumbî
, 
«rg
, 
def
);

180 
	}
}

183 
LUALIB_API
 
lua_I¡egî
 
	$luaL_checköãgî
 (
lua_Sèã
 *
L
, 
«rg
) {

184 
lua_I¡egî
 
d
 = 
	`lua_toöãgî
(
L
, 
«rg
);

185 i‡(
d
 =0 && !
	`lua_i¢umbî
(
L
, 
«rg
))

186 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TNUMBER
);

187  
d
;

188 
	}
}

191 
LUALIB_API
 
lua_I¡egî
 
	$luaL_›töãgî
 (
lua_Sèã
 *
L
, 
«rg
,

192 
lua_I¡egî
 
def
) {

193  
	`luaL_›t
(
L
, 
luaL_checköãgî
, 
«rg
, 
def
);

194 
	}
}

197 
LUALIB_API
 
	$luaL_gëmëafõld
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

198 i‡(!
	`lua_gëmë©abÀ
(
L
, 
obj
))

200 
	`lua_push°rög
(
L
, 
evít
);

201 
	`lua_øwgë
(
L
, -2);

202 i‡(
	`lua_i¢û
(
L
, -1)) {

203 
	`lua_p›
(
L
, 2);

207 
	`lua_ªmove
(
L
, -2);

210 
	}
}

213 
LUALIB_API
 
	$luaL_ˇŒmëa
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

214 
obj
 = 
	`abs_ödex
(
L
, obj);

215 i‡(!
	`luaL_gëmëafõld
(
L
, 
obj
, 
evít
))

217 
	`lua_pushvÆue
(
L
, 
obj
);

218 
	`lua_ˇŒ
(
L
, 1, 1);

220 
	}
}

223 
LUALIB_API
 (
luaL_ªgi°î
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

224 c⁄° 
luaL_Reg
 *
l
) {

225 
	`luaI_›ílib
(
L
, 
lib«me
, 
l
, 0);

226 
	}
}

229 
	$libsize
 (c⁄° 
luaL_Reg
 *
l
) {

230 
size
 = 0;

231 ; 
l
->
«me
;Ü++Ë
size
++;

232  
size
;

233 
	}
}

236 
LUALIB_API
 
	$luaI_›ílib
 (
lua_Sèã
 *
L
, c⁄° *
lib«me
,

237 c⁄° 
luaL_Reg
 *
l
, 
nup
) {

238 i‡(
lib«me
) {

239 
size
 = 
	`libsize
(
l
);

241 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED", 
size
);

242 
	`lua_gëfõld
(
L
, -1, 
lib«me
);

243 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

244 
	`lua_p›
(
L
, 1);

246 i‡(
	`luaL_födèbÀ
(
L
, 
LUA_GLOBALSINDEX
, 
lib«me
, 
size
Ë!
NULL
)

247 
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ " 
LUA_QS
, 
lib«me
);

248 
	`lua_pushvÆue
(
L
, -1);

249 
	`lua_£tfõld
(
L
, -3, 
lib«me
);

251 
	`lua_ªmove
(
L
, -2);

252 
	`lua_ö£π
(
L
, -(
nup
+1));

254 ; 
l
->
«me
;Ü++) {

255 
i
;

256 
i
=0; i<
nup
; i++)

257 
	`lua_pushvÆue
(
L
, -
nup
);

258 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

259 
	`lua_£tfõld
(
L
, -(
nup
+2), 
l
->
«me
);

261 
	`lua_p›
(
L
, 
nup
);

262 
	}
}

272 #i‡
deföed
(
LUA_COMPAT_GETN
)

274 
	$checköt
 (
lua_Sèã
 *
L
, 
t››
) {

275 
n
 = (
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
Ë? 
	`lua_toöãgî
(L, -1) : -1;

276 
	`lua_p›
(
L
, 
t››
);

277  
n
;

278 
	}
}

281 
	$gësizes
 (
lua_Sèã
 *
L
) {

282 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_SIZES");

283 i‡(
	`lua_i¢û
(
L
, -1)) {

284 
	`lua_p›
(
L
, 1);

285 
	`lua_√wèbÀ
(
L
);

286 
	`lua_pushvÆue
(
L
, -1);

287 
	`lua_£tmë©abÀ
(
L
, -2);

288 
	`lua_pushlôîÆ
(
L
, "kv");

289 
	`lua_£tfõld
(
L
, -2, "__mode");

290 
	`lua_pushvÆue
(
L
, -1);

291 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_SIZES");

293 
	}
}

296 
LUALIB_API
 
	$luaL_£ä
 (
lua_Sèã
 *
L
, 
t
, 
n
) {

297 
t
 = 
	`abs_ödex
(
L
,Å);

298 
	`lua_pushlôîÆ
(
L
, "n");

299 
	`lua_øwgë
(
L
, 
t
);

300 i‡(
	`checköt
(
L
, 1) >= 0) {

301 
	`lua_pushlôîÆ
(
L
, "n");

302 
	`lua_pushöãgî
(
L
, 
n
);

303 
	`lua_øw£t
(
L
, 
t
);

306 
	`gësizes
(
L
);

307 
	`lua_pushvÆue
(
L
, 
t
);

308 
	`lua_pushöãgî
(
L
, 
n
);

309 
	`lua_øw£t
(
L
, -3);

310 
	`lua_p›
(
L
, 1);

312 
	}
}

315 
LUALIB_API
 
	$luaL_gën
 (
lua_Sèã
 *
L
, 
t
) {

316 
n
;

317 
t
 = 
	`abs_ödex
(
L
,Å);

318 
	`lua_pushlôîÆ
(
L
, "n");

319 
	`lua_øwgë
(
L
, 
t
);

320 i‡((
n
 = 
	`checköt
(
L
, 1)) >= 0) Ç;

321 
	`gësizes
(
L
);

322 
	`lua_pushvÆue
(
L
, 
t
);

323 
	`lua_øwgë
(
L
, -2);

324 i‡((
n
 = 
	`checköt
(
L
, 2)) >= 0) Ç;

325  ()
	`lua_objÀn
(
L
, 
t
);

326 
	}
}

334 
LUALIB_API
 c⁄° *
	$luaL_gsub
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

335 c⁄° *
r
) {

336 c⁄° *
wûd
;

337 
size_t
 
l
 = 
	`°æí
(
p
);

338 
luaL_Buf„r
 
b
;

339 
	`luaL_bufföô
(
L
, &
b
);

340 (
wûd
 = 
	`°r°r
(
s
, 
p
)Ë!
NULL
) {

341 
	`luaL_addl°rög
(&
b
, 
s
, 
wûd
 - s);

342 
	`luaL_add°rög
(&
b
, 
r
);

343 
s
 = 
wûd
 + 
l
;

345 
	`luaL_add°rög
(&
b
, 
s
);

346 
	`luaL_pushªsu…
(&
b
);

347  
	`lua_to°rög
(
L
, -1);

348 
	}
}

351 
LUALIB_API
 c⁄° *
	$luaL_födèbÀ
 (
lua_Sèã
 *
L
, 
idx
,

352 c⁄° *
‚ame
, 
szhöt
) {

353 c⁄° *
e
;

354 
	`lua_pushvÆue
(
L
, 
idx
);

356 
e
 = 
	`°rchr
(
‚ame
, '.');

357 i‡(
e
 =
NULL
Ëê
‚ame
 + 
	`°æí
(fname);

358 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

359 
	`lua_øwgë
(
L
, -2);

360 i‡(
	`lua_i¢û
(
L
, -1)) {

361 
	`lua_p›
(
L
, 1);

362 
	`lua_¸óãèbÀ
(
L
, 0, (*
e
 ='.' ? 1 : 
szhöt
));

363 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

364 
	`lua_pushvÆue
(
L
, -2);

365 
	`lua_£âabÀ
(
L
, -4);

367 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

368 
	`lua_p›
(
L
, 2);

369  
‚ame
;

371 
	`lua_ªmove
(
L
, -2);

372 
‚ame
 = 
e
 + 1;

373 } *
e
 == '.');

374  
NULL
;

375 
	}
}

386 
	#bufÊí
(
B
Ë((B)->
p
 - (B)->
buf„r
)

	)

387 
	#buff‰ì
(
B
Ë((
size_t
)(
LUAL_BUFFERSIZE
 - 
	`bufÊí
(B)))

	)

389 
	#LIMIT
 (
LUA_MINSTACK
/2)

	)

392 
	$em±ybuf„r
 (
luaL_Buf„r
 *
B
) {

393 
size_t
 
l
 = 
	`bufÊí
(
B
);

394 i‡(
l
 == 0)  0;

396 
	`lua_pushl°rög
(
B
->
L
, B->
buf„r
, 
l
);

397 
B
->
p
 = B->
buf„r
;

398 
B
->
lvl
++;

401 
	}
}

404 
	$adju°°ack
 (
luaL_Buf„r
 *
B
) {

405 i‡(
B
->
lvl
 > 1) {

406 
lua_Sèã
 *
L
 = 
B
->L;

407 
togë
 = 1;

408 
size_t
 
t›Àn
 = 
	`lua_°æí
(
L
, -1);

410 
size_t
 
l
 = 
	`lua_°æí
(
L
, -(
togë
+1));

411 i‡(
B
->
lvl
 - 
togë
 + 1 >
LIMIT
 || 
t›Àn
 > 
l
) {

412 
t›Àn
 +
l
;

413 
togë
++;

416 } 
togë
 < 
B
->
lvl
);

417 
	`lua_c⁄ˇt
(
L
, 
togë
);

418 
B
->
lvl
 = B->lv»- 
togë
 + 1;

420 
	}
}

423 
LUALIB_API
 *
	$luaL_¥ïbuf„r
 (
luaL_Buf„r
 *
B
) {

424 i‡(
	`em±ybuf„r
(
B
))

425 
	`adju°°ack
(
B
);

426  
B
->
buf„r
;

427 
	}
}

430 
LUALIB_API
 
	$luaL_addl°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
) {

431 
l
--)

432 
	`luaL_addch¨
(
B
, *
s
++);

433 
	}
}

436 
LUALIB_API
 
	$luaL_add°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
) {

437 
	`luaL_addl°rög
(
B
, 
s
, 
	`°æí
(s));

438 
	}
}

441 
LUALIB_API
 
	$luaL_pushªsu…
 (
luaL_Buf„r
 *
B
) {

442 
	`em±ybuf„r
(
B
);

443 
	`lua_c⁄ˇt
(
B
->
L
, B->
lvl
);

444 
B
->
lvl
 = 1;

445 
	}
}

448 
LUALIB_API
 
	$luaL_addvÆue
 (
luaL_Buf„r
 *
B
) {

449 
lua_Sèã
 *
L
 = 
B
->L;

450 
size_t
 
vl
;

451 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
vl
);

452 i‡(
vl
 <
	`buff‰ì
(
B
)) {

453 
	`mem˝y
(
B
->
p
, 
s
, 
vl
);

454 
B
->
p
 +
vl
;

455 
	`lua_p›
(
L
, 1);

458 i‡(
	`em±ybuf„r
(
B
))

459 
	`lua_ö£π
(
L
, -2);

460 
B
->
lvl
++;

461 
	`adju°°ack
(
B
);

463 
	}
}

466 
LUALIB_API
 
	$luaL_bufföô
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
) {

467 
B
->
L
 = L;

468 
B
->
p
 = B->
buf„r
;

469 
B
->
lvl
 = 0;

470 
	}
}

475 
LUALIB_API
 
	$luaL_ªf
 (
lua_Sèã
 *
L
, 
t
) {

476 
ªf
;

477 
t
 = 
	`abs_ödex
(
L
,Å);

478 i‡(
	`lua_i¢û
(
L
, -1)) {

479 
	`lua_p›
(
L
, 1);

480  
LUA_REFNIL
;

482 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

483 
ªf
 = ()
	`lua_toöãgî
(
L
, -1);

484 
	`lua_p›
(
L
, 1);

485 i‡(
ªf
 != 0) {

486 
	`lua_øwgëi
(
L
, 
t
, 
ªf
);

487 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

490 
ªf
 = ()
	`lua_objÀn
(
L
, 
t
);

491 
ªf
++;

493 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

494  
ªf
;

495 
	}
}

498 
LUALIB_API
 
	$luaL_uƒef
 (
lua_Sèã
 *
L
, 
t
, 
ªf
) {

499 i‡(
ªf
 >= 0) {

500 
t
 = 
	`abs_ödex
(
L
,Å);

501 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

502 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

503 
	`lua_pushöãgî
(
L
, 
ªf
);

504 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

506 
	}
}

516 
	sLﬂdF
 {

517 
	mexåÆöe
;

518 
FILE
 *
	mf
;

519 
	mbuff
[
LUAL_BUFFERSIZE
];

520 } 
	tLﬂdF
;

523 c⁄° *
	$gëF
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

524 
LﬂdF
 *
lf
 = (LﬂdF *)
ud
;

525 ()
L
;

526 i‡(
lf
->
exåÆöe
) {

527 
lf
->
exåÆöe
 = 0;

528 *
size
 = 1;

531 i‡(
	`„of
(
lf
->
f
)Ë 
NULL
;

532 *
size
 = 
	`‰ód
(
lf
->
buff
, 1, 
LUAL_BUFFERSIZE
,Üf->
f
);

533  (*
size
 > 0Ë? 
lf
->
buff
 : 
NULL
;

534 
	}
}

537 
	$îrfûe
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
‚ameödex
) {

538 c⁄° *
£º
 = 
	`°ªº‹
(
î∫o
);

539 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 
‚ameödex
) + 1;

540 
	`lua_pushf°rög
(
L
, "ˇ¬Ÿ %†%s: %s", 
wh©
, 
fûíame
, 
£º
);

541 
	`lua_ªmove
(
L
, 
‚ameödex
);

542  
LUA_ERRFILE
;

543 
	}
}

546 
LUALIB_API
 
	$luaL_lﬂdfûe
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
) {

547 
LﬂdF
 
lf
;

548 
°©us
, 
ªad°©us
;

549 
c
;

550 
‚ameödex
 = 
	`lua_gët›
(
L
) + 1;

551 
lf
.
exåÆöe
 = 0;

552 i‡(
fûíame
 =
NULL
) {

553 
	`lua_pushlôîÆ
(
L
, "=stdin");

554 
lf
.
f
 = 
°dö
;

557 
	`lua_pushf°rög
(
L
, "@%s", 
fûíame
);

558 
lf
.
f
 = 
	`f›í
(
fûíame
, "r");

559 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "›í", 
‚ameödex
);

561 
c
 = 
	`gëc
(
lf
.
f
);

562 i‡(
c
 == '#') {

563 
lf
.
exåÆöe
 = 1;

564 (
c
 = 
	`gëc
(
lf
.
f
)Ë!
EOF
 && c != '\n') ;

565 i‡(
c
 ='\n'Ë¯
	`gëc
(
lf
.
f
);

567 i‡(
c
 =
LUA_SIGNATURE
[0] && 
lf
.
f
 !
°dö
) {

568 
	`f˛o£
(
lf
.
f
);

569 
lf
.
f
 = 
	`f›í
(
fûíame
, "rb");

570 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "ª›í", 
‚ameödex
);

572 (
c
 = 
	`gëc
(
lf
.
f
)Ë!
EOF
 && c !
LUA_SIGNATURE
[0]) ;

573 
lf
.
exåÆöe
 = 0;

575 
	`ungëc
(
c
, 
lf
.
f
);

576 
°©us
 = 
	`lua_lﬂd
(
L
, 
gëF
, &
lf
, 
	`lua_to°rög
(L, -1));

577 
ªad°©us
 = 
	`„º‹
(
lf
.
f
);

578 i‡(
lf
.
f
 !
°dö
Ë
	`f˛o£
(lf.f);

579 i‡(
ªad°©us
) {

580 
	`lua_£â›
(
L
, 
‚ameödex
);

581  
	`îrfûe
(
L
, "ªad", 
‚ameödex
);

583 
	`lua_ªmove
(
L
, 
‚ameödex
);

584  
°©us
;

585 
	}
}

588 
	sLﬂdS
 {

589 c⁄° *
	ms
;

590 
size_t
 
	msize
;

591 } 
	tLﬂdS
;

594 c⁄° *
	$gëS
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

595 
LﬂdS
 *
ls
 = (LﬂdS *)
ud
;

596 ()
L
;

597 i‡(
ls
->
size
 =0Ë 
NULL
;

598 *
size
 = 
ls
->size;

599 
ls
->
size
 = 0;

600  
ls
->
s
;

601 
	}
}

604 
LUALIB_API
 
	$luaL_lﬂdbuf„r
 (
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
size
,

605 c⁄° *
«me
) {

606 
LﬂdS
 
ls
;

607 
ls
.
s
 = 
buff
;

608 
ls
.
size
 = size;

609  
	`lua_lﬂd
(
L
, 
gëS
, &
ls
, 
«me
);

610 
	}
}

613 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
) {

614  
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), s);

615 
	}
}

622 *
	$l_Æloc
 (*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
) {

623 ()
ud
;

624 ()
osize
;

625 i‡(
nsize
 == 0) {

626 
	`‰ì
(
±r
);

627  
NULL
;

630  
	`ªÆloc
(
±r
, 
nsize
);

631 
	}
}

634 
	$∑nic
 (
lua_Sèã
 *
L
) {

635 ()
L
;

636 
	`Ârötf
(
°dîr
, "PANIC: unprotectedÉrror in callÅo Lua API (%s)\n",

637 
	`lua_to°rög
(
L
, -1));

639 
	}
}

642 
LUALIB_API
 
lua_Sèã
 *
	$luaL_√w°©e
 () {

643 
lua_Sèã
 *
L
 = 
	`lua_√w°©e
(
l_Æloc
, 
NULL
);

644 i‡(
L
Ë
	`lua_©∑nic
(L, &
∑nic
);

645  
L
;

646 
	}
}

	@lauxlib.h

8 #i‚de‡
œuxlib_h


9 
	#œuxlib_h


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

15 
	~"lua.h
"

18 #i‡
deföed
(
LUA_COMPAT_GETN
)

19 
LUALIB_API
 (
luaL_gën
Ë(
lua_Sèã
 *
L
, 
t
);

20 
LUALIB_API
 (
luaL_£ä
Ë(
lua_Sèã
 *
L
, 
t
, 
n
);

22 
	#luaL_gën
(
L
,
i
Ë(()
	`lua_objÀn
(L, i))

	)

23 
	#luaL_£ä
(
L
,
i
,
j
Ë(()0Ë

	)

26 #i‡
	`deföed
(
LUA_COMPAT_OPENLIB
)

27 
	#luaI_›ílib
 
luaL_›ílib


	)

32 
	#LUA_ERRFILE
 (
LUA_ERRERR
+1)

	)

35 
	sluaL_Reg
 {

36 c⁄° *
«me
;

37 
lua_CFun˘i⁄
 
func
;

38 } 
	tluaL_Reg
;

42 
LUALIB_API
 (
luaI_›ílib
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

43 c⁄° 
luaL_Reg
 *
l
, 
nup
);

44 
LUALIB_API
 (
luaL_ªgi°î
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

45 c⁄° 
luaL_Reg
 *
l
);

46 
LUALIB_API
 (
luaL_gëmëafõld
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

47 
LUALIB_API
 (
luaL_ˇŒmëa
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

48 
LUALIB_API
 (
luaL_ty≥º‹
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
);

49 
LUALIB_API
 (
luaL_¨gîr‹
Ë(
lua_Sèã
 *
L
, 
num¨g
, c⁄° *
exåamsg
);

50 
LUALIB_API
 c⁄° *(
luaL_checkl°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

51 
size_t
 *
l
);

52 
LUALIB_API
 c⁄° *(
luaL_›é°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

53 c⁄° *
def
, 
size_t
 *
l
);

54 
LUALIB_API
 
	$lua_Numbî
 (
luaL_checknumbî
Ë(
lua_Sèã
 *
L
, 
numArg
);

55 
LUALIB_API
 
	$lua_Numbî
 (
luaL_›äumbî
Ë(
lua_Sèã
 *
L
, 
nArg
, 
lua_Numbî
 
def
);

57 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_checköãgî
Ë(
lua_Sèã
 *
L
, 
numArg
);

58 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_›töãgî
Ë(
lua_Sèã
 *
L
, 
nArg
,

59 
lua_I¡egî
 
def
);

61 
LUALIB_API
 (
luaL_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
, c⁄° *
msg
);

62 
LUALIB_API
 (
luaL_checkty≥
Ë(
lua_Sèã
 *
L
, 
«rg
, 
t
);

63 
LUALIB_API
 (
luaL_check™y
Ë(
lua_Sèã
 *
L
, 
«rg
);

65 
LUALIB_API
 (
luaL_√wmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

66 
LUALIB_API
 *(
luaL_checkud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

68 
LUALIB_API
 (
luaL_whîe
Ë(
lua_Sèã
 *
L
, 
lvl
);

69 
LUALIB_API
 (
luaL_îr‹
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

71 
LUALIB_API
 (
luaL_check›ti⁄
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
def
,

72 c⁄° *c⁄° 
l°
[]);

74 
LUALIB_API
 (
luaL_ªf
Ë(
lua_Sèã
 *
L
, 
t
);

75 
LUALIB_API
 (
luaL_uƒef
Ë(
lua_Sèã
 *
L
, 
t
, 
ªf
);

77 
LUALIB_API
 (
luaL_lﬂdfûe
Ë(
lua_Sèã
 *
L
, c⁄° *
fûíame
);

78 
LUALIB_API
 (
luaL_lﬂdbuf„r
Ë(
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
sz
,

79 c⁄° *
«me
);

80 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

82 
LUALIB_API
 
lua_Sèã
 *(
luaL_√w°©e
) ();

85 
LUALIB_API
 c⁄° *(
luaL_gsub
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

86 c⁄° *
r
);

88 
LUALIB_API
 c⁄° *(
luaL_födèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
,

89 c⁄° *
‚ame
, 
szhöt
);

100 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
num¨g
,
exåamsg
) \

101 (()((
c⁄d
Ë|| 
	`luaL_¨gîr‹
(
L
, (
num¨g
), (
exåamsg
))))

	)

102 
	#luaL_check°rög
(
L
,
n
Ë(
	`luaL_checkl°rög
(L, (n), 
NULL
))

	)

103 
	#luaL_›t°rög
(
L
,
n
,
d
Ë(
	`luaL_›é°rög
(L, (n), (d), 
NULL
))

	)

104 
	#luaL_checköt
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

105 
	#luaL_›töt
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

106 
	#luaL_checkl⁄g
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

107 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

109 
	#luaL_ty≥«me
(
L
,
i
Ë
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L,(i)))

	)

111 
	#luaL_dofûe
(
L
, 
‚
Ë(
	`luaL_lﬂdfûe
(L, fnË|| 
	`lua_pˇŒ
(L, 0, 0, 0))

	)

113 
	#luaL_do°rög
(
L
, 
s
Ë(
	`luaL_lﬂd°rög
(L, sË|| 
	`lua_pˇŒ
(L, 0, 0, 0))

	)

115 
	#luaL_gëmë©abÀ
(
L
,
n
Ë(
	`lua_gëfõld
(L, 
LUA_REGISTRYINDEX
, (n)))

	)

117 
	#luaL_›t
(
L
,
f
,
n
,
d
Ë(
	`lua_i¢⁄e‹nû
(L,“)Ë? (dË: 
	`f
(L,“)))

	)

127 
	sluaL_Buf„r
 {

128 *
p
;

129 
lvl
;

130 
lua_Sèã
 *
L
;

131 
buf„r
[
LUAL_BUFFERSIZE
];

132 } 
	tluaL_Buf„r
;

134 
	#luaL_addch¨
(
B
,
c
) \

135 (()((
B
)->
p
 < ((B)->
buf„r
+
LUAL_BUFFERSIZE
Ë|| 
	`luaL_¥ïbuf„r
(B)), \

136 (*(
B
)->
p
++ = ()(
c
)))

	)

139 
	#luaL_putch¨
(
B
,
c
Ë
	`luaL_addch¨
(B,c)

	)

141 
	#luaL_addsize
(
B
,
n
Ë((B)->
p
 +“))

	)

143 
LUALIB_API
 (
luaL_bufföô
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
);

144 
LUALIB_API
 *(
luaL_¥ïbuf„r
Ë(
luaL_Buf„r
 *
B
);

145 
LUALIB_API
 (
luaL_addl°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
);

146 
LUALIB_API
 (
luaL_add°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
);

147 
LUALIB_API
 (
luaL_addvÆue
Ë(
luaL_Buf„r
 *
B
);

148 
LUALIB_API
 (
luaL_pushªsu…
Ë(
luaL_Buf„r
 *
B
);

157 
	#LUA_NOREF
 (-2)

	)

158 
	#LUA_REFNIL
 (-1)

	)

160 
	#lua_ªf
(
L
,
lock
Ë(÷ockË? 
	`luaL_ªf
(L, 
LUA_REGISTRYINDEX
) : \

161 (
	`lua_push°rög
(
L
, "u∆ockedÑe„ªn˚†¨êobsﬁëe"), 
	`lua_îr‹
(L), 0))

	)

163 
	#lua_uƒef
(
L
,
ªf
Ë
	`luaL_uƒef
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

165 
	#lua_gëªf
(
L
,
ªf
Ë
	`lua_øwgëi
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

168 
	#luaL_ªg
 
luaL_Reg


	)

	@lbaselib.c

9 
	~<˘y≥.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	#lba£lib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

31 
	$luaB_¥öt
 (
lua_Sèã
 *
L
) {

32 
n
 = 
	`lua_gët›
(
L
);

33 
i
;

34 
	`lua_gëglobÆ
(
L
, "tostring");

35 
i
=1; i<=
n
; i++) {

36 c⁄° *
s
;

37 
	`lua_pushvÆue
(
L
, -1);

38 
	`lua_pushvÆue
(
L
, 
i
);

39 
	`lua_ˇŒ
(
L
, 1, 1);

40 
s
 = 
	`lua_to°rög
(
L
, -1);

41 i‡(
s
 =
NULL
)

42  
	`luaL_îr‹
(
L
, 
	`LUA_QL
("tostring") " mustÑeturná stringÅo "

43 
	`LUA_QL
("print"));

44 i‡(
i
>1Ë
	`Âuts
("\t", 
°dout
);

45 
	`Âuts
(
s
, 
°dout
);

46 
	`lua_p›
(
L
, 1);

48 
	`Âuts
("\n", 
°dout
);

50 
	}
}

53 
	$luaB_t⁄umbî
 (
lua_Sèã
 *
L
) {

54 
ba£
 = 
	`luaL_›töt
(
L
, 2, 10);

55 i‡(
ba£
 == 10) {

56 
	`luaL_check™y
(
L
, 1);

57 i‡(
	`lua_i¢umbî
(
L
, 1)) {

58 
	`lua_pushnumbî
(
L
, 
	`lua_t⁄umbî
(L, 1));

63 c⁄° *
s1
 = 
	`luaL_check°rög
(
L
, 1);

64 *
s2
;

65 
n
;

66 
	`luaL_¨gcheck
(
L
, 2 <
ba£
 && base <= 36, 2, "base out ofÑange");

67 
n
 = 
	`°πoul
(
s1
, &
s2
, 
ba£
);

68 i‡(
s1
 !
s2
) {

69 
	`is•a˚
(()(*
s2
))) s2++;

70 i‡(*
s2
 == '\0') {

71 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
n
);

76 
	`lua_pushnû
(
L
);

78 
	}
}

81 
	$luaB_îr‹
 (
lua_Sèã
 *
L
) {

82 
Àvñ
 = 
	`luaL_›töt
(
L
, 2, 1);

83 
	`lua_£â›
(
L
, 1);

84 i‡(
	`lua_is°rög
(
L
, 1Ë&& 
Àvñ
 > 0) {

85 
	`luaL_whîe
(
L
, 
Àvñ
);

86 
	`lua_pushvÆue
(
L
, 1);

87 
	`lua_c⁄ˇt
(
L
, 2);

89  
	`lua_îr‹
(
L
);

90 
	}
}

93 
	$luaB_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

94 
	`luaL_check™y
(
L
, 1);

95 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

96 
	`lua_pushnû
(
L
);

99 
	`luaL_gëmëafõld
(
L
, 1, "__metatable");

101 
	}
}

104 
	$luaB_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

105 
t
 = 
	`lua_ty≥
(
L
, 2);

106 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

107 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

109 i‡(
	`luaL_gëmëafõld
(
L
, 1, "__metatable"))

110 
	`luaL_îr‹
(
L
, "cannot changeáÖrotected metatable");

111 
	`lua_£â›
(
L
, 2);

112 
	`lua_£tmë©abÀ
(
L
, 1);

114 
	}
}

117 
	$gëfunc
 (
lua_Sèã
 *
L
) {

118 i‡(
	`lua_isfun˘i⁄
(
L
, 1)Ë
	`lua_pushvÆue
(L, 1);

120 
lua_Debug
 
¨
;

121 
Àvñ
 = 
	`luaL_›töt
(
L
, 1, 1);

122 
	`luaL_¨gcheck
(
L
, 
Àvñ
 >= 0, 1, "level must beÇon-negative");

123 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
) == 0)

124 
	`luaL_¨gîr‹
(
L
, 1, "invalidÜevel");

125 
	`lua_gëöfo
(
L
, "f", &
¨
);

126 i‡(
	`lua_i¢û
(
L
, -1))

127 
	`luaL_îr‹
(
L
, "no functionÉnvironment forÅail callátÜevel %d",

128 
Àvñ
);

130 
	}
}

133 
	$luaB_gë„nv
 (
lua_Sèã
 *
L
) {

134 
	`gëfunc
(
L
);

135 i‡(
	`lua_iscfun˘i⁄
(
L
, -1))

136 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

138 
	`lua_gë„nv
(
L
, -1);

140 
	}
}

143 
	$luaB_£t„nv
 (
lua_Sèã
 *
L
) {

144 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

145 
	`gëfunc
(
L
);

146 
	`lua_pushvÆue
(
L
, 2);

147 i‡(
	`lua_i¢umbî
(
L
, 1Ë&& 
	`lua_t⁄umbî
(L, 1) == 0) {

149 
	`lua_pushthªad
(
L
);

150 
	`lua_ö£π
(
L
, -2);

151 
	`lua_£t„nv
(
L
, -2);

154 i‡(
	`lua_iscfun˘i⁄
(
L
, -2Ë|| 
	`lua_£t„nv
(L, -2) == 0)

155 
	`luaL_îr‹
(
L
,

156 
	`LUA_QL
("setfenv") " cannot changeÉnvironment of given object");

158 
	}
}

161 
	$luaB_øwequÆ
 (
lua_Sèã
 *
L
) {

162 
	`luaL_check™y
(
L
, 1);

163 
	`luaL_check™y
(
L
, 2);

164 
	`lua_pushboﬁón
(
L
, 
	`lua_øwequÆ
(L, 1, 2));

166 
	}
}

169 
	$luaB_øwgë
 (
lua_Sèã
 *
L
) {

170 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

171 
	`luaL_check™y
(
L
, 2);

172 
	`lua_£â›
(
L
, 2);

173 
	`lua_øwgë
(
L
, 1);

175 
	}
}

177 
	$luaB_øw£t
 (
lua_Sèã
 *
L
) {

178 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

179 
	`luaL_check™y
(
L
, 2);

180 
	`luaL_check™y
(
L
, 3);

181 
	`lua_£â›
(
L
, 3);

182 
	`lua_øw£t
(
L
, 1);

184 
	}
}

187 
	$luaB_gcöfo
 (
lua_Sèã
 *
L
) {

188 
	`lua_pushöãgî
(
L
, 
	`lua_gëgccou¡
(L));

190 
	}
}

193 
	$luaB_cﬁÀ˘g¨bage
 (
lua_Sèã
 *
L
) {

194 c⁄° *c⁄° 
›ts
[] = {"stop", "restart", "collect",

195 "cou¡", "°ï", "£çau£", "£t°ïmul", 
NULL
};

196 c⁄° 
›t¢um
[] = {
LUA_GCSTOP
, 
LUA_GCRESTART
, 
LUA_GCCOLLECT
,

197 
LUA_GCCOUNT
, 
LUA_GCSTEP
, 
LUA_GCSETPAUSE
, 
LUA_GCSETSTEPMUL
};

198 
o
 = 
	`luaL_check›ti⁄
(
L
, 1, "cﬁÀ˘", 
›ts
);

199 
ex
 = 
	`luaL_›töt
(
L
, 2, 0);

200 
ªs
 = 
	`lua_gc
(
L
, 
›t¢um
[
o
], 
ex
);

201 
›t¢um
[
o
]) {

202 
LUA_GCCOUNT
: {

203 
b
 = 
	`lua_gc
(
L
, 
LUA_GCCOUNTB
, 0);

204 
	`lua_pushnumbî
(
L
, 
ªs
 + ((
lua_Numbî
)
b
/1024));

207 
LUA_GCSTEP
: {

208 
	`lua_pushboﬁón
(
L
, 
ªs
);

212 
	`lua_pushnumbî
(
L
, 
ªs
);

216 
	}
}

219 
	$luaB_ty≥
 (
lua_Sèã
 *
L
) {

220 
	`luaL_check™y
(
L
, 1);

221 
	`lua_push°rög
(
L
, 
	`luaL_ty≥«me
(L, 1));

223 
	}
}

226 
	$luaB_√xt
 (
lua_Sèã
 *
L
) {

227 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

228 
	`lua_£â›
(
L
, 2);

229 i‡(
	`lua_√xt
(
L
, 1))

232 
	`lua_pushnû
(
L
);

235 
	}
}

238 
	$luaB_∑ús
 (
lua_Sèã
 *
L
) {

239 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

240 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

241 
	`lua_pushvÆue
(
L
, 1);

242 
	`lua_pushnû
(
L
);

244 
	}
}

247 
	$ùaúßux
 (
lua_Sèã
 *
L
) {

248 
i
 = 
	`luaL_checköt
(
L
, 2);

249 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

250 
i
++;

251 
	`lua_pushöãgî
(
L
, 
i
);

252 
	`lua_øwgëi
(
L
, 1, 
i
);

253  (
	`lua_i¢û
(
L
, -1)) ? 0 : 2;

254 
	}
}

257 
	$luaB_ùaús
 (
lua_Sèã
 *
L
) {

258 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

259 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

260 
	`lua_pushvÆue
(
L
, 1);

261 
	`lua_pushöãgî
(
L
, 0);

263 
	}
}

266 
	$lﬂd_aux
 (
lua_Sèã
 *
L
, 
°©us
) {

267 i‡(
°©us
 == 0)

270 
	`lua_pushnû
(
L
);

271 
	`lua_ö£π
(
L
, -2);

274 
	}
}

277 
	$luaB_lﬂd°rög
 (
lua_Sèã
 *
L
) {

278 
size_t
 
l
;

279 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

280 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, 
s
);

281  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
s
, 
l
, 
chunk«me
));

282 
	}
}

285 
	$luaB_lﬂdfûe
 (
lua_Sèã
 *
L
) {

286 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

287  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdfûe
(L, 
‚ame
));

288 
	}
}

297 c⁄° *
	$gíîic_ªadî
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

298 ()
ud
;

299 
	`luaL_check°ack
(
L
, 2, "too manyÇested functions");

300 
	`lua_pushvÆue
(
L
, 1);

301 
	`lua_ˇŒ
(
L
, 0, 1);

302 i‡(
	`lua_i¢û
(
L
, -1)) {

303 *
size
 = 0;

304  
NULL
;

306 i‡(
	`lua_is°rög
(
L
, -1)) {

307 
	`lua_ª∂a˚
(
L
, 3);

308  
	`lua_tﬁ°rög
(
L
, 3, 
size
);

310 
	`luaL_îr‹
(
L
, "reader function mustÑeturná string");

311  
NULL
;

312 
	}
}

315 
	$luaB_lﬂd
 (
lua_Sèã
 *
L
) {

316 
°©us
;

317 c⁄° *
˙ame
 = 
	`luaL_›t°rög
(
L
, 2, "=(load)");

318 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

319 
	`lua_£â›
(
L
, 3);

320 
°©us
 = 
	`lua_lﬂd
(
L
, 
gíîic_ªadî
, 
NULL
, 
˙ame
);

321  
	`lﬂd_aux
(
L
, 
°©us
);

322 
	}
}

325 
	$luaB_dofûe
 (
lua_Sèã
 *
L
) {

326 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

327 
n
 = 
	`lua_gët›
(
L
);

328 i‡(
	`luaL_lﬂdfûe
(
L
, 
‚ame
Ë!0Ë
	`lua_îr‹
(L);

329 
	`lua_ˇŒ
(
L
, 0, 
LUA_MULTRET
);

330  
	`lua_gët›
(
L
Ë- 
n
;

331 
	}
}

334 
	$luaB_as£π
 (
lua_Sèã
 *
L
) {

335 
	`luaL_check™y
(
L
, 1);

336 i‡(!
	`lua_toboﬁón
(
L
, 1))

337  
	`luaL_îr‹
(
L
, "%s", 
	`luaL_›t°rög
(L, 2, "assertion failed!"));

338  
	`lua_gët›
(
L
);

339 
	}
}

342 
	$luaB_u≈ack
 (
lua_Sèã
 *
L
) {

343 
i
, 
e
, 
n
;

344 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

345 
i
 = 
	`luaL_›töt
(
L
, 2, 1);

346 
e
 = 
	`luaL_›t
(
L
, 
luaL_checköt
, 3, 
	`luaL_gën
(L, 1));

347 
n
 = 
e
 - 
i
 + 1;

348 i‡(
n
 <= 0)  0;

349 
	`luaL_check°ack
(
L
, 
n
, "tableÅoo bigÅo unpack");

350 ; 
i
<=
e
; i++)

351 
	`lua_øwgëi
(
L
, 1, 
i
);

352  
n
;

353 
	}
}

356 
	$luaB_£À˘
 (
lua_Sèã
 *
L
) {

357 
n
 = 
	`lua_gët›
(
L
);

358 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
 && *
	`lua_to°rög
(L, 1) == '#') {

359 
	`lua_pushöãgî
(
L
, 
n
-1);

363 
i
 = 
	`luaL_checköt
(
L
, 1);

364 i‡(
i
 < 0Ëò
n
 + i;

365 i‡(
i
 > 
n
) i =Ç;

366 
	`luaL_¨gcheck
(
L
, 1 <
i
, 1, "index out ofÑange");

367  
n
 - 
i
;

369 
	}
}

372 
	$luaB_pˇŒ
 (
lua_Sèã
 *
L
) {

373 
°©us
;

374 
	`luaL_check™y
(
L
, 1);

375 
°©us
 = 
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(LË- 1, 
LUA_MULTRET
, 0);

376 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

377 
	`lua_ö£π
(
L
, 1);

378  
	`lua_gët›
(
L
);

379 
	}
}

382 
	$luaB_xpˇŒ
 (
lua_Sèã
 *
L
) {

383 
°©us
;

384 
	`luaL_check™y
(
L
, 2);

385 
	`lua_£â›
(
L
, 2);

386 
	`lua_ö£π
(
L
, 1);

387 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 
LUA_MULTRET
, 1);

388 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

389 
	`lua_ª∂a˚
(
L
, 1);

390  
	`lua_gët›
(
L
);

391 
	}
}

394 
	$luaB_to°rög
 (
lua_Sèã
 *
L
) {

395 
	`luaL_check™y
(
L
, 1);

396 i‡(
	`luaL_ˇŒmëa
(
L
, 1, "__tostring"))

398 
	`lua_ty≥
(
L
, 1)) {

399 
LUA_TNUMBER
:

400 
	`lua_push°rög
(
L
, 
	`lua_to°rög
(L, 1));

402 
LUA_TSTRING
:

403 
	`lua_pushvÆue
(
L
, 1);

405 
LUA_TBOOLEAN
:

406 
	`lua_push°rög
(
L
, (
	`lua_toboﬁón
(L, 1) ? "true" : "false"));

408 
LUA_TNIL
:

409 
	`lua_pushlôîÆ
(
L
, "nil");

412 
	`lua_pushf°rög
(
L
, "%s: %p", 
	`luaL_ty≥«me
(L, 1), 
	`lua_t›oöãr
(L, 1));

416 
	}
}

419 
	$luaB_√w¥oxy
 (
lua_Sèã
 *
L
) {

420 
	`lua_£â›
(
L
, 1);

421 
	`lua_√wu£rd©a
(
L
, 0);

422 i‡(
	`lua_toboﬁón
(
L
, 1) == 0)

424 i‡(
	`lua_isboﬁón
(
L
, 1)) {

425 
	`lua_√wèbÀ
(
L
);

426 
	`lua_pushvÆue
(
L
, -1);

427 
	`lua_pushboﬁón
(
L
, 1);

428 
	`lua_øw£t
(
L
, 
	`lua_upvÆueödex
(1));

431 
vÆid¥oxy
 = 0;

432 i‡(
	`lua_gëmë©abÀ
(
L
, 1)) {

433 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

434 
vÆid¥oxy
 = 
	`lua_toboﬁón
(
L
, -1);

435 
	`lua_p›
(
L
, 1);

437 
	`luaL_¨gcheck
(
L
, 
vÆid¥oxy
, 1, "boolean orÖroxyÉxpected");

438 
	`lua_gëmë©abÀ
(
L
, 1);

440 
	`lua_£tmë©abÀ
(
L
, 2);

442 
	}
}

445 c⁄° 
luaL_Reg
 
	gba£_funcs
[] = {

446 {"as£π", 
luaB_as£π
},

447 {"cﬁÀ˘g¨bage", 
luaB_cﬁÀ˘g¨bage
},

448 {"dofûe", 
luaB_dofûe
},

449 {"îr‹", 
luaB_îr‹
},

450 {"gcöfo", 
luaB_gcöfo
},

451 {"gë„nv", 
luaB_gë„nv
},

452 {"gëmë©abÀ", 
luaB_gëmë©abÀ
},

453 {"lﬂdfûe", 
luaB_lﬂdfûe
},

454 {"lﬂd", 
luaB_lﬂd
},

455 {"lﬂd°rög", 
luaB_lﬂd°rög
},

456 {"√xt", 
luaB_√xt
},

457 {"pˇŒ", 
luaB_pˇŒ
},

458 {"¥öt", 
luaB_¥öt
},

459 {"øwequÆ", 
luaB_øwequÆ
},

460 {"øwgë", 
luaB_øwgë
},

461 {"øw£t", 
luaB_øw£t
},

462 {"£À˘", 
luaB_£À˘
},

463 {"£t„nv", 
luaB_£t„nv
},

464 {"£tmë©abÀ", 
luaB_£tmë©abÀ
},

465 {"t⁄umbî", 
luaB_t⁄umbî
},

466 {"to°rög", 
luaB_to°rög
},

467 {"ty≥", 
luaB_ty≥
},

468 {"u≈ack", 
luaB_u≈ack
},

469 {"xpˇŒ", 
luaB_xpˇŒ
},

470 {
NULL
, NULL}

480 
	$auxªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
co
, 
«rg
) {

481 
°©us
;

482 i‡(!
	`lua_check°ack
(
co
, 
«rg
))

483 
	`luaL_îr‹
(
L
, "too manyárgumentsÅoÑesume");

484 i‡(
	`lua_°©us
(
co
Ë=0 && 
	`lua_gët›
(co) == 0) {

485 
	`lua_pushlôîÆ
(
L
, "cannotÑesume dead coroutine");

488 
	`lua_xmove
(
L
, 
co
, 
«rg
);

489 
°©us
 = 
	`lua_ªsume
(
co
, 
«rg
);

490 i‡(
°©us
 =0 || sètu†=
LUA_YIELD
) {

491 
ƒes
 = 
	`lua_gët›
(
co
);

492 i‡(!
	`lua_check°ack
(
L
, 
ƒes
))

493 
	`luaL_îr‹
(
L
, "too manyÑesultsÅoÑesume");

494 
	`lua_xmove
(
co
, 
L
, 
ƒes
);

495  
ƒes
;

498 
	`lua_xmove
(
co
, 
L
, 1);

501 
	}
}

504 
	$luaB_c‹esume
 (
lua_Sèã
 *
L
) {

505 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

506 
r
;

507 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

508 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L) - 1);

509 i‡(
r
 < 0) {

510 
	`lua_pushboﬁón
(
L
, 0);

511 
	`lua_ö£π
(
L
, -2);

515 
	`lua_pushboﬁón
(
L
, 1);

516 
	`lua_ö£π
(
L
, -(
r
 + 1));

517  
r
 + 1;

519 
	}
}

522 
	$luaB_auxwøp
 (
lua_Sèã
 *
L
) {

523 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 
	`lua_upvÆueödex
(1));

524 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L));

525 i‡(
r
 < 0) {

526 i‡(
	`lua_is°rög
(
L
, -1)) {

527 
	`luaL_whîe
(
L
, 1);

528 
	`lua_ö£π
(
L
, -2);

529 
	`lua_c⁄ˇt
(
L
, 2);

531 
	`lua_îr‹
(
L
);

533  
r
;

534 
	}
}

537 
	$luaB_co¸óã
 (
lua_Sèã
 *
L
) {

538 
lua_Sèã
 *
NL
 = 
	`lua_√wthªad
(
L
);

539 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1,

541 
	`lua_pushvÆue
(
L
, 1);

542 
	`lua_xmove
(
L
, 
NL
, 1);

544 
	}
}

547 
	$luaB_cowøp
 (
lua_Sèã
 *
L
) {

548 
	`luaB_co¸óã
(
L
);

549 
	`lua_pushc˛osuª
(
L
, 
luaB_auxwøp
, 1);

551 
	}
}

554 
	$luaB_yõld
 (
lua_Sèã
 *
L
) {

555  
	`lua_yõld
(
L
, 
	`lua_gët›
(L));

556 
	}
}

559 
	$luaB_co°©us
 (
lua_Sèã
 *
L
) {

560 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

561 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

562 i‡(
L
 =
co
Ë
	`lua_pushlôîÆ
(L, "running");

564 
	`lua_°©us
(
co
)) {

565 
LUA_YIELD
:

566 
	`lua_pushlôîÆ
(
L
, "suspended");

569 
lua_Debug
 
¨
;

570 i‡(
	`lua_gë°ack
(
co
, 0, &
¨
) > 0)

571 
	`lua_pushlôîÆ
(
L
, "normal");

572 i‡(
	`lua_gët›
(
co
) == 0)

573 
	`lua_pushlôîÆ
(
L
, "dead");

575 
	`lua_pushlôîÆ
(
L
, "suspended");

579 
	`lua_pushlôîÆ
(
L
, "dead");

584 
	}
}

587 
	$luaB_c‹u¬ög
 (
lua_Sèã
 *
L
) {

588 i‡(
	`lua_pushthªad
(
L
))

592 
	}
}

595 c⁄° 
luaL_Reg
 
	gco_funcs
[] = {

596 {"¸óã", 
luaB_co¸óã
},

597 {"ªsume", 
luaB_c‹esume
},

598 {"ru¬ög", 
luaB_c‹u¬ög
},

599 {"°©us", 
luaB_co°©us
},

600 {"wøp", 
luaB_cowøp
},

601 {"yõld", 
luaB_yõld
},

602 {
NULL
, NULL}

608 
	$aux›í
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

609 
lua_CFun˘i⁄
 
f
,Üua_CFun˘i⁄ 
u
) {

610 
	`lua_pushcfun˘i⁄
(
L
, 
u
);

611 
	`lua_pushc˛osuª
(
L
, 
f
, 1);

612 
	`lua_£tfõld
(
L
, -2, 
«me
);

613 
	}
}

616 
	$ba£_›í
 (
lua_Sèã
 *
L
) {

618 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

619 
	`lua_£tglobÆ
(
L
, "_G");

621 
	`luaL_ªgi°î
(
L
, "_G", 
ba£_funcs
);

622 
	`lua_pushlôîÆ
(
L
, 
LUA_VERSION
);

623 
	`lua_£tglobÆ
(
L
, "_VERSION");

625 
	`aux›í
(
L
, "ùaús", 
luaB_ùaús
, 
ùaúßux
);

626 
	`aux›í
(
L
, "∑ús", 
luaB_∑ús
, 
luaB_√xt
);

628 
	`lua_¸óãèbÀ
(
L
, 0, 1);

629 
	`lua_pushvÆue
(
L
, -1);

630 
	`lua_£tmë©abÀ
(
L
, -2);

631 
	`lua_pushlôîÆ
(
L
, "kv");

632 
	`lua_£tfõld
(
L
, -2, "__mode");

633 
	`lua_pushc˛osuª
(
L
, 
luaB_√w¥oxy
, 1);

634 
	`lua_£tglobÆ
(
L
, "newproxy");

635 
	}
}

638 
LUALIB_API
 
	$lua›í_ba£
 (
lua_Sèã
 *
L
) {

639 
	`ba£_›í
(
L
);

640 
	`luaL_ªgi°î
(
L
, 
LUA_COLIBNAME
, 
co_funcs
);

642 
	}
}

	@lcode.c

8 
	~<°dlib.h
>

10 
	#lcode_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lcode.h
"

16 
	~"ldebug.h
"

17 
	~"ldo.h
"

18 
	~"lgc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"Õ¨£r.h
"

24 
	~"…abÀ.h
"

27 
	#hasjumps
(
e
Ë(”)->
t
 !”)->
f
)

	)

30 
	$i¢umîÆ
(
expdesc
 *
e
) {

31  (
e
->
k
 =
VKNUM
 &&É->
t
 =
NO_JUMP
 &&É->
f
 == NO_JUMP);

32 
	}
}

35 
	$luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
) {

36 
In°ru˘i⁄
 *
¥evious
;

37 i‡(
fs
->
pc
 > fs->
œ°èrgë
) {

38 i‡(
fs
->
pc
 == 0)

40 i‡(
	`GET_OPCODE
(*(
¥evious
 = &
fs
->
f
->
code
[fs->
pc
-1])Ë=
OP_LOADNIL
) {

41 
p‰om
 = 
	`GETARG_A
(*
¥evious
);

42 
±o
 = 
	`GETARG_B
(*
¥evious
);

43 i‡(
p‰om
 <
‰om
 && from <
±o
+1) {

44 i‡(
‰om
+
n
-1 > 
±o
)

45 
	`SETARG_B
(*
¥evious
, 
‰om
+
n
-1);

50 
	`luaK_codeABC
(
fs
, 
OP_LOADNIL
, 
‰om
, from+
n
-1, 0);

51 
	}
}

54 
	$luaK_jump
 (
FuncSèã
 *
fs
) {

55 
jpc
 = 
fs
->jpc;

56 
j
;

57 
fs
->
jpc
 = 
NO_JUMP
;

58 
j
 = 
	`luaK_codeAsBx
(
fs
, 
OP_JMP
, 0, 
NO_JUMP
);

59 
	`luaK_c⁄ˇt
(
fs
, &
j
, 
jpc
);

60  
j
;

61 
	}
}

64 
	$luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
) {

65 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 
fú°
, 
ƒë
+1, 0);

66 
	}
}

69 
	$c⁄djump
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
A
, 
B
, 
C
) {

70 
	`luaK_codeABC
(
fs
, 
›
, 
A
, 
B
, 
C
);

71  
	`luaK_jump
(
fs
);

72 
	}
}

75 
	$fixjump
 (
FuncSèã
 *
fs
, 
pc
, 
de°
) {

76 
In°ru˘i⁄
 *
jmp
 = &
fs
->
f
->
code
[
pc
];

77 
off£t
 = 
de°
-(
pc
+1);

78 
	`lua_as£π
(
de°
 !
NO_JUMP
);

79 i‡(
	`abs
(
off£t
Ë> 
MAXARG_sBx
)

80 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "control structureÅooÜong");

81 
	`SETARG_sBx
(*
jmp
, 
off£t
);

82 
	}
}

89 
	$luaK_gëœbñ
 (
FuncSèã
 *
fs
) {

90 
fs
->
œ°èrgë
 = fs->
pc
;

91  
fs
->
pc
;

92 
	}
}

95 
	$gëjump
 (
FuncSèã
 *
fs
, 
pc
) {

96 
off£t
 = 
	`GETARG_sBx
(
fs
->
f
->
code
[
pc
]);

97 i‡(
off£t
 =
NO_JUMP
)

98  
NO_JUMP
;

100  (
pc
+1)+
off£t
;

101 
	}
}

104 
In°ru˘i⁄
 *
	$gëjumpc⁄åﬁ
 (
FuncSèã
 *
fs
, 
pc
) {

105 
In°ru˘i⁄
 *
pi
 = &
fs
->
f
->
code
[
pc
];

106 i‡(
pc
 >1 && 
	`ã°TMode
(
	`GET_OPCODE
(*(
pi
-1))))

107  
pi
-1;

109  
pi
;

110 
	}
}

117 
	$√ed_vÆue
 (
FuncSèã
 *
fs
, 
li°
) {

118 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist)) {

119 
In°ru˘i⁄
 
i
 = *
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

120 i‡(
	`GET_OPCODE
(
i
Ë!
OP_TESTSET
)  1;

123 
	}
}

126 
	$∑tchã°ªg
 (
FuncSèã
 *
fs
, 
node
, 
ªg
) {

127 
In°ru˘i⁄
 *
i
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
node
);

128 i‡(
	`GET_OPCODE
(*
i
Ë!
OP_TESTSET
)

130 i‡(
ªg
 !
NO_REG
 &&Ñeg !
	`GETARG_B
(*
i
))

131 
	`SETARG_A
(*
i
, 
ªg
);

133 *
i
 = 
	`CREATE_ABC
(
OP_TEST
, 
	`GETARG_B
(*i), 0, 
	`GETARG_C
(*i));

136 
	}
}

139 
	$ªmovevÆues
 (
FuncSèã
 *
fs
, 
li°
) {

140 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist))

141 
	`∑tchã°ªg
(
fs
, 
li°
, 
NO_REG
);

142 
	}
}

145 
	$∑tchli°aux
 (
FuncSèã
 *
fs
, 
li°
, 
vèrgë
, 
ªg
,

146 
dèrgë
) {

147 
li°
 !
NO_JUMP
) {

148 
√xt
 = 
	`gëjump
(
fs
, 
li°
);

149 i‡(
	`∑tchã°ªg
(
fs
, 
li°
, 
ªg
))

150 
	`fixjump
(
fs
, 
li°
, 
vèrgë
);

152 
	`fixjump
(
fs
, 
li°
, 
dèrgë
);

153 
li°
 = 
√xt
;

155 
	}
}

158 
	$disch¨gejpc
 (
FuncSèã
 *
fs
) {

159 
	`∑tchli°aux
(
fs
, fs->
jpc
, fs->
pc
, 
NO_REG
, fs->pc);

160 
fs
->
jpc
 = 
NO_JUMP
;

161 
	}
}

164 
	$luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
) {

165 i‡(
èrgë
 =
fs
->
pc
)

166 
	`luaK_∑tchtohîe
(
fs
, 
li°
);

168 
	`lua_as£π
(
èrgë
 < 
fs
->
pc
);

169 
	`∑tchli°aux
(
fs
, 
li°
, 
èrgë
, 
NO_REG
,Åarget);

171 
	}
}

174 
	$luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
) {

175 
	`luaK_gëœbñ
(
fs
);

176 
	`luaK_c⁄ˇt
(
fs
, &fs->
jpc
, 
li°
);

177 
	}
}

180 
	$luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
) {

181 i‡(
l2
 =
NO_JUMP
) ;

182 i‡(*
l1
 =
NO_JUMP
)

183 *
l1
 = 
l2
;

185 
li°
 = *
l1
;

186 
√xt
;

187 (
√xt
 = 
	`gëjump
(
fs
, 
li°
)Ë!
NO_JUMP
)

188 
li°
 = 
√xt
;

189 
	`fixjump
(
fs
, 
li°
, 
l2
);

191 
	}
}

194 
	$luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
) {

195 
√w°ack
 = 
fs
->
‰ìªg
 + 
n
;

196 i‡(
√w°ack
 > 
fs
->
f
->
max°acksize
) {

197 i‡(
√w°ack
 >
MAXSTACK
)

198 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "function orÉxpressionÅoo complex");

199 
fs
->
f
->
max°acksize
 = 
	`ˇ°_byã
(
√w°ack
);

201 
	}
}

204 
	$luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
) {

205 
	`luaK_check°ack
(
fs
, 
n
);

206 
fs
->
‰ìªg
 +
n
;

207 
	}
}

210 
	$‰ìªg
 (
FuncSèã
 *
fs
, 
ªg
) {

211 i‡(!
	`ISK
(
ªg
Ë&&Ñeg >
fs
->
«˘v¨
) {

212 
fs
->
‰ìªg
--;

213 
	`lua_as£π
(
ªg
 =
fs
->
‰ìªg
);

215 
	}
}

218 
	$‰ìexp
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

219 i‡(
e
->
k
 =
VNONRELOC
)

220 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
öfo
);

221 
	}
}

224 
	$addk
 (
FuncSèã
 *
fs
, 
TVÆue
 *
k
, TVÆuê*
v
) {

225 
lua_Sèã
 *
L
 = 
fs
->L;

226 
TVÆue
 *
idx
 = 
	`luaH_£t
(
L
, 
fs
->
h
, 
k
);

227 
PrŸo
 *
f
 = 
fs
->f;

228 
ﬁdsize
 = 
f
->
sizek
;

229 i‡(
	`âi¢umbî
(
idx
)) {

230 
	`lua_as£π
(
	`luaO_øwequÆObj
(&
fs
->
f
->
k
[
	`ˇ°_öt
(
	`nvÆue
(
idx
))], 
v
));

231  
	`ˇ°_öt
(
	`nvÆue
(
idx
));

234 
	`£ävÆue
(
idx
, 
	`ˇ°_num
(
fs
->
nk
));

235 
	`luaM_growve˘‹
(
L
, 
f
->
k
, 
fs
->
nk
, f->
sizek
, 
TVÆue
,

236 
MAXARG_Bx
, "constantÅable overflow");

237 
ﬁdsize
 < 
f
->
sizek
Ë
	`£äûvÆue
(&f->
k
[oldsize++]);

238 
	`£tobj
(
L
, &
f
->
k
[
fs
->
nk
], 
v
);

239 
	`luaC_b¨rõr
(
L
, 
f
, 
v
);

240  
fs
->
nk
++;

242 
	}
}

245 
	$luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
) {

246 
TVÆue
 
o
;

247 
	`£tsvÆue
(
fs
->
L
, &
o
, 
s
);

248  
	`addk
(
fs
, &
o
, &o);

249 
	}
}

252 
	$luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
) {

253 
TVÆue
 
o
;

254 
	`£ävÆue
(&
o
, 
r
);

255  
	`addk
(
fs
, &
o
, &o);

256 
	}
}

259 
	$boﬁK
 (
FuncSèã
 *
fs
, 
b
) {

260 
TVÆue
 
o
;

261 
	`£tbvÆue
(&
o
, 
b
);

262  
	`addk
(
fs
, &
o
, &o);

263 
	}
}

266 
	$nûK
 (
FuncSèã
 *
fs
) {

267 
TVÆue
 
k
, 
v
;

268 
	`£äûvÆue
(&
v
);

270 
	`£thvÆue
(
fs
->
L
, &
k
, fs->
h
);

271  
	`addk
(
fs
, &
k
, &
v
);

272 
	}
}

275 
	$luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
) {

276 i‡(
e
->
k
 =
VCALL
) {

277 
	`SETARG_C
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

279 i‡(
e
->
k
 =
VVARARG
) {

280 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

281 
	`SETARG_A
(
	`gëcode
(
fs
, 
e
), fs->
‰ìªg
);

282 
	`luaK_ª£rvîegs
(
fs
, 1);

284 
	}
}

287 
	$luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

288 i‡(
e
->
k
 =
VCALL
) {

289 
e
->
k
 = 
VNONRELOC
;

290 
e
->
u
.
s
.
öfo
 = 
	`GETARG_A
(
	`gëcode
(
fs
,É));

292 i‡(
e
->
k
 =
VVARARG
) {

293 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 2);

294 
e
->
k
 = 
VRELOCABLE
;

296 
	}
}

299 
	$luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

300 
e
->
k
) {

301 
VLOCAL
: {

302 
e
->
k
 = 
VNONRELOC
;

305 
VUPVAL
: {

306 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETUPVAL
, 0,É->u.s.info, 0);

307 
e
->
k
 = 
VRELOCABLE
;

310 
VGLOBAL
: {

311 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABx
(
fs
, 
OP_GETGLOBAL
, 0,É->u.s.info);

312 
e
->
k
 = 
VRELOCABLE
;

315 
VINDEXED
: {

316 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
aux
);

317 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
öfo
);

318 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETTABLE
, 0,É->u.s.öfo,É->u.s.
aux
);

319 
e
->
k
 = 
VRELOCABLE
;

322 
VVARARG
:

323 
VCALL
: {

324 
	`luaK_£t⁄îë
(
fs
, 
e
);

329 
	}
}

332 
	$code_œbñ
 (
FuncSèã
 *
fs
, 
A
, 
b
, 
jump
) {

333 
	`luaK_gëœbñ
(
fs
);

334  
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
A
, 
b
, 
jump
);

335 
	}
}

338 
	$disch¨ge2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

339 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

340 
e
->
k
) {

341 
VNIL
: {

342 
	`luaK_nû
(
fs
, 
ªg
, 1);

345 
VFALSE
: 
VTRUE
: {

346 
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
ªg
, 
e
->
k
 =
VTRUE
, 0);

349 
VK
: {

350 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
e
->
u
.
s
.
öfo
);

353 
VKNUM
: {

354 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
	`luaK_numbîK
(fs, 
e
->
u
.
nvÆ
));

357 
VRELOCABLE
: {

358 
In°ru˘i⁄
 *
pc
 = &
	`gëcode
(
fs
, 
e
);

359 
	`SETARG_A
(*
pc
, 
ªg
);

362 
VNONRELOC
: {

363 i‡(
ªg
 !
e
->
u
.
s
.
öfo
)

364 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, 
ªg
, 
e
->
u
.
s
.
öfo
, 0);

368 
	`lua_as£π
(
e
->
k
 =
VVOID
 ||É->k =
VJMP
);

372 
e
->
u
.
s
.
öfo
 = 
ªg
;

373 
e
->
k
 = 
VNONRELOC
;

374 
	}
}

377 
	$disch¨ge2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

378 i‡(
e
->
k
 !
VNONRELOC
) {

379 
	`luaK_ª£rvîegs
(
fs
, 1);

380 
	`disch¨ge2ªg
(
fs
, 
e
, fs->
‰ìªg
-1);

382 
	}
}

385 
	$exp2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

386 
	`disch¨ge2ªg
(
fs
, 
e
, 
ªg
);

387 i‡(
e
->
k
 =
VJMP
)

388 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
,É->
u
.
s
.
öfo
);

389 i‡(
	`hasjumps
(
e
)) {

390 
föÆ
;

391 
p_f
 = 
NO_JUMP
;

392 
p_t
 = 
NO_JUMP
;

393 i‡(
	`√ed_vÆue
(
fs
, 
e
->
t
Ë||Çìd_vÆue(fs,É->
f
)) {

394 
fj
 = (
e
->
k
 =
VJMP
Ë? 
NO_JUMP
 : 
	`luaK_jump
(
fs
);

395 
p_f
 = 
	`code_œbñ
(
fs
, 
ªg
, 0, 1);

396 
p_t
 = 
	`code_œbñ
(
fs
, 
ªg
, 1, 0);

397 
	`luaK_∑tchtohîe
(
fs
, 
fj
);

399 
föÆ
 = 
	`luaK_gëœbñ
(
fs
);

400 
	`∑tchli°aux
(
fs
, 
e
->
f
, 
föÆ
, 
ªg
, 
p_f
);

401 
	`∑tchli°aux
(
fs
, 
e
->
t
, 
föÆ
, 
ªg
, 
p_t
);

403 
e
->
f
 =É->
t
 = 
NO_JUMP
;

404 
e
->
u
.
s
.
öfo
 = 
ªg
;

405 
e
->
k
 = 
VNONRELOC
;

406 
	}
}

409 
	$luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

410 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

411 
	`‰ìexp
(
fs
, 
e
);

412 
	`luaK_ª£rvîegs
(
fs
, 1);

413 
	`exp2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

414 
	}
}

417 
	$luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

418 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

419 i‡(
e
->
k
 =
VNONRELOC
) {

420 i‡(!
	`hasjumps
(
e
)ËÉ->
u
.
s
.
öfo
;

421 i‡(
e
->
u
.
s
.
öfo
 >
fs
->
«˘v¨
) {

422 
	`exp2ªg
(
fs
, 
e
,É->
u
.
s
.
öfo
);

423  
e
->
u
.
s
.
öfo
;

426 
	`luaK_exp2√xåeg
(
fs
, 
e
);

427  
e
->
u
.
s
.
öfo
;

428 
	}
}

431 
	$luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

432 i‡(
	`hasjumps
(
e
))

433 
	`luaK_exp2™yªg
(
fs
, 
e
);

435 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

436 
	}
}

439 
	$luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

440 
	`luaK_exp2vÆ
(
fs
, 
e
);

441 
e
->
k
) {

442 
VKNUM
:

443 
VTRUE
:

444 
VFALSE
:

445 
VNIL
: {

446 i‡(
fs
->
nk
 <
MAXINDEXRK
) {

447 
e
->
u
.
s
.
öfo
 = (e->
k
 =
VNIL
Ë? 
	`nûK
(
fs
) :

448 (
e
->
k
 =
VKNUM
Ë? 
	`luaK_numbîK
(
fs
,É->
u
.
nvÆ
) :

449 
	`boﬁK
(
fs
, (
e
->
k
 =
VTRUE
));

450 
e
->
k
 = 
VK
;

451  
	`RKASK
(
e
->
u
.
s
.
öfo
);

455 
VK
: {

456 i‡(
e
->
u
.
s
.
öfo
 <
MAXINDEXRK
)

457  
	`RKASK
(
e
->
u
.
s
.
öfo
);

463  
	`luaK_exp2™yªg
(
fs
, 
e
);

464 
	}
}

467 
	$luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
ex
) {

468 
v¨
->
k
) {

469 
VLOCAL
: {

470 
	`‰ìexp
(
fs
, 
ex
);

471 
	`exp2ªg
(
fs
, 
ex
, 
v¨
->
u
.
s
.
öfo
);

474 
VUPVAL
: {

475 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

476 
	`luaK_codeABC
(
fs
, 
OP_SETUPVAL
, 
e
, 
v¨
->
u
.
s
.
öfo
, 0);

479 
VGLOBAL
: {

480 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

481 
	`luaK_codeABx
(
fs
, 
OP_SETGLOBAL
, 
e
, 
v¨
->
u
.
s
.
öfo
);

484 
VINDEXED
: {

485 
e
 = 
	`luaK_exp2RK
(
fs
, 
ex
);

486 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
v¨
->
u
.
s
.
öfo
, v¨->u.s.
aux
, 
e
);

490 
	`lua_as£π
(0);

494 
	`‰ìexp
(
fs
, 
ex
);

495 
	}
}

498 
	$luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
) {

499 
func
;

500 
	`luaK_exp2™yªg
(
fs
, 
e
);

501 
	`‰ìexp
(
fs
, 
e
);

502 
func
 = 
fs
->
‰ìªg
;

503 
	`luaK_ª£rvîegs
(
fs
, 2);

504 
	`luaK_codeABC
(
fs
, 
OP_SELF
, 
func
, 
e
->
u
.
s
.
öfo
, 
	`luaK_exp2RK
(fs, 
key
));

505 
	`‰ìexp
(
fs
, 
key
);

506 
e
->
u
.
s
.
öfo
 = 
func
;

507 
e
->
k
 = 
VNONRELOC
;

508 
	}
}

511 
	$övîtjump
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

512 
In°ru˘i⁄
 *
pc
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
e
->
u
.
s
.
öfo
);

513 
	`lua_as£π
(
	`ã°TMode
(
	`GET_OPCODE
(*
pc
)Ë&& GET_OPCODE(*pcË!
OP_TESTSET
 &&

514 
	`GET_OPCODE
(*
pc
Ë!
OP_TEST
);

515 
	`SETARG_A
(*
pc
, !(
	`GETARG_A
(*pc)));

516 
	}
}

519 
	$jump⁄c⁄d
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
c⁄d
) {

520 i‡(
e
->
k
 =
VRELOCABLE
) {

521 
In°ru˘i⁄
 
õ
 = 
	`gëcode
(
fs
, 
e
);

522 i‡(
	`GET_OPCODE
(
õ
Ë=
OP_NOT
) {

523 
fs
->
pc
--;

524  
	`c⁄djump
(
fs
, 
OP_TEST
, 
	`GETARG_B
(
õ
), 0, !
c⁄d
);

528 
	`disch¨ge2™yªg
(
fs
, 
e
);

529 
	`‰ìexp
(
fs
, 
e
);

530  
	`c⁄djump
(
fs
, 
OP_TESTSET
, 
NO_REG
, 
e
->
u
.
s
.
öfo
, 
c⁄d
);

531 
	}
}

534 
	$luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

535 
pc
;

536 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

537 
e
->
k
) {

538 
VK
: 
VKNUM
: 
VTRUE
: {

539 
pc
 = 
NO_JUMP
;

542 
VFALSE
: {

543 
pc
 = 
	`luaK_jump
(
fs
);

546 
VJMP
: {

547 
	`övîtjump
(
fs
, 
e
);

548 
pc
 = 
e
->
u
.
s
.
öfo
;

552 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 0);

556 
	`luaK_c⁄ˇt
(
fs
, &
e
->
f
, 
pc
);

557 
	`luaK_∑tchtohîe
(
fs
, 
e
->
t
);

558 
e
->
t
 = 
NO_JUMP
;

559 
	}
}

562 
	$luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

563 
pc
;

564 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

565 
e
->
k
) {

566 
VNIL
: 
VFALSE
: {

567 
pc
 = 
NO_JUMP
;

570 
VTRUE
: {

571 
pc
 = 
	`luaK_jump
(
fs
);

574 
VJMP
: {

575 
pc
 = 
e
->
u
.
s
.
öfo
;

579 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 1);

583 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
, 
pc
);

584 
	`luaK_∑tchtohîe
(
fs
, 
e
->
f
);

585 
e
->
f
 = 
NO_JUMP
;

586 
	}
}

589 
	$codíŸ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

590 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

591 
e
->
k
) {

592 
VNIL
: 
VFALSE
: {

593 
e
->
k
 = 
VTRUE
;

596 
VK
: 
VKNUM
: 
VTRUE
: {

597 
e
->
k
 = 
VFALSE
;

600 
VJMP
: {

601 
	`övîtjump
(
fs
, 
e
);

604 
VRELOCABLE
:

605 
VNONRELOC
: {

606 
	`disch¨ge2™yªg
(
fs
, 
e
);

607 
	`‰ìexp
(
fs
, 
e
);

608 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_NOT
, 0,É->u.s.info, 0);

609 
e
->
k
 = 
VRELOCABLE
;

613 
	`lua_as£π
(0);

618 { 
ãmp
 = 
e
->
f
;É->‡e->
t
;É->t =Åemp; }

619 
	`ªmovevÆues
(
fs
, 
e
->
f
);

620 
	`ªmovevÆues
(
fs
, 
e
->
t
);

621 
	}
}

624 
	$luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
) {

625 
t
->
u
.
s
.
aux
 = 
	`luaK_exp2RK
(
fs
, 
k
);

626 
t
->
k
 = 
VINDEXED
;

627 
	}
}

630 
	$c⁄°fﬁdög
 (
OpCode
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

631 
lua_Numbî
 
v1
, 
v2
, 
r
;

632 i‡(!
	`i¢umîÆ
(
e1
Ë|| !i¢umîÆ(
e2
))  0;

633 
v1
 = 
e1
->
u
.
nvÆ
;

634 
v2
 = 
e2
->
u
.
nvÆ
;

635 
›
) {

636 
OP_ADD
: 
r
 = 
	`luai_numadd
(
v1
, 
v2
); ;

637 
OP_SUB
: 
r
 = 
	`luai_numsub
(
v1
, 
v2
); ;

638 
OP_MUL
: 
r
 = 
	`luai_nummul
(
v1
, 
v2
); ;

639 
OP_DIV
:

640 i‡(
v2
 == 0)  0;

641 
r
 = 
	`luai_numdiv
(
v1
, 
v2
); ;

642 
OP_MOD
:

643 i‡(
v2
 == 0)  0;

644 
r
 = 
	`luai_nummod
(
v1
, 
v2
); ;

645 
OP_POW
: 
r
 = 
	`luai_numpow
(
v1
, 
v2
); ;

646 
OP_UNM
: 
r
 = 
	`luai_numunm
(
v1
); ;

647 
OP_LEN
:  0;

648 : 
	`lua_as£π
(0); 
r
 = 0; ;

650 i‡(
	`luai_numi¢™
(
r
))  0;

651 
e1
->
u
.
nvÆ
 = 
r
;

653 
	}
}

656 
	$codórôh
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

657 i‡(
	`c⁄°fﬁdög
(
›
, 
e1
, 
e2
))

660 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

661 
o2
 = (
›
 !
OP_UNM
 && o∞!
OP_LEN
Ë? 
	`luaK_exp2RK
(
fs
, 
e2
) : 0;

662 
	`‰ìexp
(
fs
, 
e2
);

663 
	`‰ìexp
(
fs
, 
e1
);

664 
e1
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0, 
o1
, 
o2
);

665 
e1
->
k
 = 
VRELOCABLE
;

667 
	}
}

670 
	$codecomp
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
c⁄d
, 
expdesc
 *
e1
,

671 
expdesc
 *
e2
) {

672 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

673 
o2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

674 
	`‰ìexp
(
fs
, 
e2
);

675 
	`‰ìexp
(
fs
, 
e1
);

676 i‡(
c⁄d
 =0 && 
›
 !
OP_EQ
) {

677 
ãmp
;

678 
ãmp
 = 
o1
; o1 = 
o2
; o2 =Åemp;

679 
c⁄d
 = 1;

681 
e1
->
u
.
s
.
öfo
 = 
	`c⁄djump
(
fs
, 
›
, 
c⁄d
, 
o1
, 
o2
);

682 
e1
->
k
 = 
VJMP
;

683 
	}
}

686 
	$luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
e
) {

687 
expdesc
 
e2
;

688 
e2
.
t
 =É2.
f
 = 
NO_JUMP
;É2.
k
 = 
VKNUM
;É2.
u
.
nvÆ
 = 0;

689 
›
) {

690 
OPR_MINUS
: {

691 i‡(
e
->
k
 =
VK
)

692 
	`luaK_exp2™yªg
(
fs
, 
e
);

693 
	`codórôh
(
fs
, 
OP_UNM
, 
e
, &
e2
);

696 
OPR_NOT
: 
	`codíŸ
(
fs
, 
e
); ;

697 
OPR_LEN
: {

698 
	`luaK_exp2™yªg
(
fs
, 
e
);

699 
	`codórôh
(
fs
, 
OP_LEN
, 
e
, &
e2
);

702 : 
	`lua_as£π
(0);

704 
	}
}

707 
	$luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
) {

708 
›
) {

709 
OPR_AND
: {

710 
	`luaK_goi·rue
(
fs
, 
v
);

713 
OPR_OR
: {

714 
	`luaK_goifÁl£
(
fs
, 
v
);

717 
OPR_CONCAT
: {

718 
	`luaK_exp2√xåeg
(
fs
, 
v
);

722 i‡(!
	`i¢umîÆ
(
v
)Ë
	`luaK_exp2RK
(
fs
, v);

726 
	}
}

729 
	$luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

730 
›
) {

731 
OPR_AND
: {

732 
	`lua_as£π
(
e1
->
t
 =
NO_JUMP
);

733 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

734 
	`luaK_c⁄ˇt
(
fs
, &
e1
->
f
, 
e2
->f);

735 
e1
->
k
 = 
e2
->k;É1->
u
.
s
.
öfo
 =É2->u.s.info;

736 
e1
->
u
.
s
.
aux
 = 
e2
->u.s.aux;É1->
t
 =É2->t;

739 
OPR_OR
: {

740 
	`lua_as£π
(
e1
->
f
 =
NO_JUMP
);

741 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

742 
	`luaK_c⁄ˇt
(
fs
, &
e1
->
t
, 
e2
->t);

743 
e1
->
k
 = 
e2
->k;É1->
u
.
s
.
öfo
 =É2->u.s.info;

744 
e1
->
u
.
s
.
aux
 = 
e2
->u.s.aux;É1->
f
 =É2->f;

747 
OPR_CONCAT
: {

748 
	`luaK_exp2vÆ
(
fs
, 
e2
);

749 i‡(
e2
->
k
 =
VRELOCABLE
 && 
	`GET_OPCODE
(
	`gëcode
(
fs
,É2)Ë=
OP_CONCAT
) {

750 
	`lua_as£π
(
e1
->
u
.
s
.
öfo
 =
	`GETARG_B
(
	`gëcode
(
fs
, 
e2
))-1);

751 
	`‰ìexp
(
fs
, 
e1
);

752 
	`SETARG_B
(
	`gëcode
(
fs
, 
e2
), 
e1
->
u
.
s
.
öfo
);

753 
e1
->
k
 = 
e2
->k;É1->
u
.
s
.
öfo
 =É2->u.s.info;

756 
	`luaK_exp2√xåeg
(
fs
, 
e2
);

757 
	`codórôh
(
fs
, 
OP_CONCAT
, 
e1
, 
e2
);

761 
OPR_ADD
: 
	`codórôh
(
fs
, 
OP_ADD
, 
e1
, 
e2
); ;

762 
OPR_SUB
: 
	`codórôh
(
fs
, 
OP_SUB
, 
e1
, 
e2
); ;

763 
OPR_MUL
: 
	`codórôh
(
fs
, 
OP_MUL
, 
e1
, 
e2
); ;

764 
OPR_DIV
: 
	`codórôh
(
fs
, 
OP_DIV
, 
e1
, 
e2
); ;

765 
OPR_MOD
: 
	`codórôh
(
fs
, 
OP_MOD
, 
e1
, 
e2
); ;

766 
OPR_POW
: 
	`codórôh
(
fs
, 
OP_POW
, 
e1
, 
e2
); ;

767 
OPR_EQ
: 
	`codecomp
(
fs
, 
OP_EQ
, 1, 
e1
, 
e2
); ;

768 
OPR_NE
: 
	`codecomp
(
fs
, 
OP_EQ
, 0, 
e1
, 
e2
); ;

769 
OPR_LT
: 
	`codecomp
(
fs
, 
OP_LT
, 1, 
e1
, 
e2
); ;

770 
OPR_LE
: 
	`codecomp
(
fs
, 
OP_LE
, 1, 
e1
, 
e2
); ;

771 
OPR_GT
: 
	`codecomp
(
fs
, 
OP_LT
, 0, 
e1
, 
e2
); ;

772 
OPR_GE
: 
	`codecomp
(
fs
, 
OP_LE
, 0, 
e1
, 
e2
); ;

773 : 
	`lua_as£π
(0);

775 
	}
}

778 
	$luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
) {

779 
fs
->
f
->
löeöfo
[fs->
pc
 - 1] = 
löe
;

780 
	}
}

783 
	$luaK_code
 (
FuncSèã
 *
fs
, 
In°ru˘i⁄
 
i
, 
löe
) {

784 
PrŸo
 *
f
 = 
fs
->f;

785 
	`disch¨gejpc
(
fs
);

787 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
code
, fs->
pc
, f->
sizecode
, 
In°ru˘i⁄
,

788 
MAX_INT
, "code size overflow");

789 
f
->
code
[
fs
->
pc
] = 
i
;

791 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
löeöfo
, fs->
pc
, f->
sizñöeöfo
, ,

792 
MAX_INT
, "code size overflow");

793 
f
->
löeöfo
[
fs
->
pc
] = 
löe
;

794  
fs
->
pc
++;

795 
	}
}

798 
	$luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
b
, 
c
) {

799 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABC
);

800 
	`lua_as£π
(
	`gëBMode
(
o
Ë!
OpArgN
 || 
b
 == 0);

801 
	`lua_as£π
(
	`gëCMode
(
o
Ë!
OpArgN
 || 
c
 == 0);

802  
	`luaK_code
(
fs
, 
	`CREATE_ABC
(
o
, 
a
, 
b
, 
c
), fs->
ls
->
œ°löe
);

803 
	}
}

806 
	$luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
bc
) {

807 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABx
 || gëOpMode(oË=
iAsBx
);

808 
	`lua_as£π
(
	`gëCMode
(
o
Ë=
OpArgN
);

809  
	`luaK_code
(
fs
, 
	`CREATE_ABx
(
o
, 
a
, 
bc
), fs->
ls
->
œ°löe
);

810 
	}
}

813 
	$luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
) {

814 
c
 = (
√Àms
 - 1)/
LFIELDS_PER_FLUSH
 + 1;

815 
b
 = (
to°‹e
 =
LUA_MULTRET
) ? 0 :Åostore;

816 
	`lua_as£π
(
to°‹e
 != 0);

817 i‡(
c
 <
MAXARG_C
)

818 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 
c
);

820 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 0);

821 
	`luaK_code
(
fs
, 
	`ˇ°
(
In°ru˘i⁄
, 
c
), fs->
ls
->
œ°löe
);

823 
fs
->
‰ìªg
 = 
ba£
 + 1;

824 
	}
}

	@lcode.h

7 #i‚de‡
lcode_h


8 
	#lcode_h


	)

10 
	~"Œex.h
"

11 
	~"lobje˘.h
"

12 
	~"l›codes.h
"

13 
	~"Õ¨£r.h
"

20 
	#NO_JUMP
 (-1)

	)

26 
	eBöO¥
 {

27 
	mOPR_ADD
, 
	mOPR_SUB
, 
	mOPR_MUL
, 
	mOPR_DIV
, 
	mOPR_MOD
, 
	mOPR_POW
,

28 
	mOPR_CONCAT
,

29 
	mOPR_NE
, 
	mOPR_EQ
,

30 
	mOPR_LT
, 
	mOPR_LE
, 
	mOPR_GT
, 
	mOPR_GE
,

31 
	mOPR_AND
, 
	mOPR_OR
,

32 
	mOPR_NOBINOPR


33 } 
	tBöO¥
;

35 
	#bö›i°e°
(
›
Ë((›Ë>
OPR_NE
)

	)

37 
	eUnO¥
 { 
	mOPR_MINUS
, 
	mOPR_NOT
, 
	mOPR_LEN
, 
	mOPR_NOUNOPR
 } 
	tUnO¥
;

40 
	#gëcode
(
fs
,
e
Ë((fs)->
f
->
code
[”)->
u
.
s
.
öfo
])

	)

42 
	#luaK_codeAsBx
(
fs
,
o
,
A
,
sBx
Ë
	`luaK_codeABx
(fs,o,A,(sBx)+
MAXARG_sBx
)

	)

44 
	#luaK_£tmu…ªt
(
fs
,
e
Ë
	`luaK_£åëu∫s
(fs,É, 
LUA_MULTRET
)

	)

46 
LUAI_FUNC
 
luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
Bx
);

47 
LUAI_FUNC
 
luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
B
, 
C
);

48 
LUAI_FUNC
 
luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
);

49 
LUAI_FUNC
 
luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
);

50 
LUAI_FUNC
 
luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
);

51 
LUAI_FUNC
 
luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
);

52 
LUAI_FUNC
 
luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
);

53 
LUAI_FUNC
 
luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
);

54 
LUAI_FUNC
 
luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

55 
LUAI_FUNC
 
luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

56 
LUAI_FUNC
 
luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

57 
LUAI_FUNC
 
luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

58 
LUAI_FUNC
 
luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

59 
LUAI_FUNC
 
luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
);

60 
LUAI_FUNC
 
luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
);

61 
LUAI_FUNC
 
luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

62 
LUAI_FUNC
 
luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
e
);

63 
LUAI_FUNC
 
luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
);

64 
LUAI_FUNC
 
luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

65 
LUAI_FUNC
 
luaK_jump
 (
FuncSèã
 *
fs
);

66 
LUAI_FUNC
 
luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
);

67 
LUAI_FUNC
 
luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
);

68 
LUAI_FUNC
 
luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
);

69 
LUAI_FUNC
 
luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
);

70 
LUAI_FUNC
 
luaK_gëœbñ
 (
FuncSèã
 *
fs
);

71 
LUAI_FUNC
 
luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
v
);

72 
LUAI_FUNC
 
luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
);

73 
LUAI_FUNC
 
luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v1
,Éxpdes¯*
v2
);

74 
LUAI_FUNC
 
luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
);

	@ldblib.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#ldblib_c


	)

13 
	#LUA_LIB


	)

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

22 
	$db_gëªgi°ry
 (
lua_Sèã
 *
L
) {

23 
	`lua_pushvÆue
(
L
, 
LUA_REGISTRYINDEX
);

25 
	}
}

28 
	$db_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

29 
	`luaL_check™y
(
L
, 1);

30 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

31 
	`lua_pushnû
(
L
);

34 
	}
}

37 
	$db_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

38 
t
 = 
	`lua_ty≥
(
L
, 2);

39 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

41 
	`lua_£â›
(
L
, 2);

42 
	`lua_pushboﬁón
(
L
, 
	`lua_£tmë©abÀ
(L, 1));

44 
	}
}

47 
	$db_gë„nv
 (
lua_Sèã
 *
L
) {

48 
	`lua_gë„nv
(
L
, 1);

50 
	}
}

53 
	$db_£t„nv
 (
lua_Sèã
 *
L
) {

54 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

55 
	`lua_£â›
(
L
, 2);

56 i‡(
	`lua_£t„nv
(
L
, 1) == 0)

57 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("setfenv")

60 
	}
}

63 
	$£âabss
 (
lua_Sèã
 *
L
, c⁄° *
i
, c⁄° *
v
) {

64 
	`lua_push°rög
(
L
, 
v
);

65 
	`lua_£tfõld
(
L
, -2, 
i
);

66 
	}
}

69 
	$£âabsi
 (
lua_Sèã
 *
L
, c⁄° *
i
, 
v
) {

70 
	`lua_pushöãgî
(
L
, 
v
);

71 
	`lua_£tfõld
(
L
, -2, 
i
);

72 
	}
}

75 
lua_Sèã
 *
	$gëthªad
 (
lua_Sèã
 *
L
, *
¨g
) {

76 i‡(
	`lua_i°hªad
(
L
, 1)) {

77 *
¨g
 = 1;

78  
	`lua_tŸhªad
(
L
, 1);

81 *
¨g
 = 0;

82  
L
;

84 
	}
}

87 
	$åót°ack›ti⁄
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
, c⁄° *
‚ame
) {

88 i‡(
L
 =
L1
) {

89 
	`lua_pushvÆue
(
L
, -2);

90 
	`lua_ªmove
(
L
, -3);

93 
	`lua_xmove
(
L1
, 
L
, 1);

94 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

95 
	}
}

98 
	$db_gëöfo
 (
lua_Sèã
 *
L
) {

99 
lua_Debug
 
¨
;

100 
¨g
;

101 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

102 c⁄° *
›ti⁄s
 = 
	`luaL_›t°rög
(
L
, 
¨g
+2, "flnSu");

103 i‡(
	`lua_i¢umbî
(
L
, 
¨g
+1)) {

104 i‡(!
	`lua_gë°ack
(
L1
, ()
	`lua_toöãgî
(
L
, 
¨g
+1), &
¨
)) {

105 
	`lua_pushnû
(
L
);

109 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
+1)) {

110 
	`lua_pushf°rög
(
L
, ">%s", 
›ti⁄s
);

111 
›ti⁄s
 = 
	`lua_to°rög
(
L
, -1);

112 
	`lua_pushvÆue
(
L
, 
¨g
+1);

113 
	`lua_xmove
(
L
, 
L1
, 1);

116  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "function orÜevelÉxpected");

117 i‡(!
	`lua_gëöfo
(
L1
, 
›ti⁄s
, &
¨
))

118  
	`luaL_¨gîr‹
(
L
, 
¨g
+2, "invalid option");

119 
	`lua_¸óãèbÀ
(
L
, 0, 2);

120 i‡(
	`°rchr
(
›ti⁄s
, 'S')) {

121 
	`£âabss
(
L
, "sour˚", 
¨
.
sour˚
);

122 
	`£âabss
(
L
, "sh‹t_§c", 
¨
.
sh‹t_§c
);

123 
	`£âabsi
(
L
, "löedeföed", 
¨
.
löedeföed
);

124 
	`£âabsi
(
L
, "œ°löedeföed", 
¨
.
œ°löedeföed
);

125 
	`£âabss
(
L
, "wh©", 
¨
.
wh©
);

127 i‡(
	`°rchr
(
›ti⁄s
, 'l'))

128 
	`£âabsi
(
L
, "cuºíéöe", 
¨
.
cuºíéöe
);

129 i‡(
	`°rchr
(
›ti⁄s
, 'u'))

130 
	`£âabsi
(
L
, "nups", 
¨
.
nups
);

131 i‡(
	`°rchr
(
›ti⁄s
, 'n')) {

132 
	`£âabss
(
L
, "«me", 
¨
.
«me
);

133 
	`£âabss
(
L
, "«mewh©", 
¨
.
«mewh©
);

135 i‡(
	`°rchr
(
›ti⁄s
, 'L'))

136 
	`åót°ack›ti⁄
(
L
, 
L1
, "activelines");

137 i‡(
	`°rchr
(
›ti⁄s
, 'f'))

138 
	`åót°ack›ti⁄
(
L
, 
L1
, "func");

140 
	}
}

143 
	$db_gëloˇl
 (
lua_Sèã
 *
L
) {

144 
¨g
;

145 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

146 
lua_Debug
 
¨
;

147 c⁄° *
«me
;

148 i‡(!
	`lua_gë°ack
(
L1
, 
	`luaL_checköt
(
L
, 
¨g
+1), &
¨
))

149  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

150 
«me
 = 
	`lua_gëloˇl
(
L1
, &
¨
, 
	`luaL_checköt
(
L
, 
¨g
+2));

151 i‡(
«me
) {

152 
	`lua_xmove
(
L1
, 
L
, 1);

153 
	`lua_push°rög
(
L
, 
«me
);

154 
	`lua_pushvÆue
(
L
, -2);

158 
	`lua_pushnû
(
L
);

161 
	}
}

164 
	$db_£éoˇl
 (
lua_Sèã
 *
L
) {

165 
¨g
;

166 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

167 
lua_Debug
 
¨
;

168 i‡(!
	`lua_gë°ack
(
L1
, 
	`luaL_checköt
(
L
, 
¨g
+1), &
¨
))

169  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

170 
	`luaL_check™y
(
L
, 
¨g
+3);

171 
	`lua_£â›
(
L
, 
¨g
+3);

172 
	`lua_xmove
(
L
, 
L1
, 1);

173 
	`lua_push°rög
(
L
, 
	`lua_£éoˇl
(
L1
, &
¨
, 
	`luaL_checköt
(L, 
¨g
+2)));

175 
	}
}

178 
	$auxupvÆue
 (
lua_Sèã
 *
L
, 
gë
) {

179 c⁄° *
«me
;

180 
n
 = 
	`luaL_checköt
(
L
, 2);

181 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

182 i‡(
	`lua_iscfun˘i⁄
(
L
, 1))  0;

183 
«me
 = 
gë
 ? 
	`lua_gëupvÆue
(
L
, 1, 
n
Ë: 
	`lua_£tupvÆue
(L, 1,Ç);

184 i‡(
«me
 =
NULL
)  0;

185 
	`lua_push°rög
(
L
, 
«me
);

186 
	`lua_ö£π
(
L
, -(
gë
+1));

187  
gë
 + 1;

188 
	}
}

191 
	$db_gëupvÆue
 (
lua_Sèã
 *
L
) {

192  
	`auxupvÆue
(
L
, 1);

193 
	}
}

196 
	$db_£tupvÆue
 (
lua_Sèã
 *
L
) {

197 
	`luaL_check™y
(
L
, 3);

198  
	`auxupvÆue
(
L
, 0);

199 
	}
}

203 c⁄° 
	gKEY_HOOK
 = 'h';

206 
	$hookf
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

207 c⁄° *c⁄° 
hook«mes
[] =

209 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

210 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

211 
	`lua_pushlightu£rd©a
(
L
, L);

212 
	`lua_øwgë
(
L
, -2);

213 i‡(
	`lua_isfun˘i⁄
(
L
, -1)) {

214 
	`lua_push°rög
(
L
, 
hook«mes
[()
¨
->
evít
]);

215 i‡(
¨
->
cuºíéöe
 >= 0)

216 
	`lua_pushöãgî
(
L
, 
¨
->
cuºíéöe
);

217 
	`lua_pushnû
(
L
);

218 
	`lua_as£π
(
	`lua_gëöfo
(
L
, "lS", 
¨
));

219 
	`lua_ˇŒ
(
L
, 2, 0);

221 
	}
}

224 
	$makemask
 (c⁄° *
smask
, 
cou¡
) {

225 
mask
 = 0;

226 i‡(
	`°rchr
(
smask
, 'c')Ë
mask
 |
LUA_MASKCALL
;

227 i‡(
	`°rchr
(
smask
, 'r')Ë
mask
 |
LUA_MASKRET
;

228 i‡(
	`°rchr
(
smask
, 'l')Ë
mask
 |
LUA_MASKLINE
;

229 i‡(
cou¡
 > 0Ë
mask
 |
LUA_MASKCOUNT
;

230  
mask
;

231 
	}
}

234 *
	$unmakemask
 (
mask
, *
smask
) {

235 
i
 = 0;

236 i‡(
mask
 & 
LUA_MASKCALL
Ë
smask
[
i
++] = 'c';

237 i‡(
mask
 & 
LUA_MASKRET
Ë
smask
[
i
++] = 'r';

238 i‡(
mask
 & 
LUA_MASKLINE
Ë
smask
[
i
++] = 'l';

239 
smask
[
i
] = '\0';

240  
smask
;

241 
	}
}

244 
	$gëhookèbÀ
 (
lua_Sèã
 *
L
) {

245 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

246 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

247 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

248 
	`lua_p›
(
L
, 1);

249 
	`lua_¸óãèbÀ
(
L
, 0, 1);

250 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

251 
	`lua_pushvÆue
(
L
, -2);

252 
	`lua_øw£t
(
L
, 
LUA_REGISTRYINDEX
);

254 
	}
}

257 
	$db_£thook
 (
lua_Sèã
 *
L
) {

258 
¨g
;

259 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

260 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
+1)) {

261 
	`lua_£â›
(
L
, 
¨g
+1);

262 
	`lua_£thook
(
L1
, 
NULL
, 0, 0);

265 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 
¨g
+2);

266 
cou¡
 = 
	`luaL_›töt
(
L
, 
¨g
+3, 0);

267 
	`luaL_checkty≥
(
L
, 
¨g
+1, 
LUA_TFUNCTION
);

268 
	`lua_£thook
(
L1
, 
hookf
, 
	`makemask
(
smask
, 
cou¡
), count);

270 
	`gëhookèbÀ
(
L1
);

271 
	`lua_pushlightu£rd©a
(
L1
, L1);

272 
	`lua_pushvÆue
(
L
, 
¨g
+1);

273 
	`lua_xmove
(
L
, 
L1
, 1);

274 
	`lua_øw£t
(
L1
, -3);

275 
	`lua_p›
(
L1
, 1);

277 
	}
}

280 
	$db_gëhook
 (
lua_Sèã
 *
L
) {

281 
¨g
;

282 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

283 
buff
[5];

284 
mask
 = 
	`lua_gëhookmask
(
L1
);

285 
lua_Hook
 
hook
 = 
	`lua_gëhook
(
L1
);

286 i‡(
hook
 !
NULL
 && hook !
hookf
)

287 
	`lua_pushlôîÆ
(
L
, "external hook");

289 
	`gëhookèbÀ
(
L1
);

290 
	`lua_pushlightu£rd©a
(
L1
, L1);

291 
	`lua_øwgë
(
L1
, -2);

292 
	`lua_ªmove
(
L1
, -2);

293 
	`lua_xmove
(
L1
, 
L
, 1);

295 
	`lua_push°rög
(
L
, 
	`unmakemask
(
mask
, 
buff
));

296 
	`lua_pushöãgî
(
L
, 
	`lua_gëhookcou¡
(
L1
));

298 
	}
}

301 
	$db_debug
 (
lua_Sèã
 *
L
) {

303 
buf„r
[250];

304 
	`Âuts
("lua_debug> ", 
°dîr
);

305 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
) == 0 ||

306 
	`°rcmp
(
buf„r
, "cont\n") == 0)

308 i‡(
	`luaL_lﬂdbuf„r
(
L
, 
buf„r
, 
	`°æí
(buffer), "=(debug command)") ||

309 
	`lua_pˇŒ
(
L
, 0, 0, 0)) {

310 
	`Âuts
(
	`lua_to°rög
(
L
, -1), 
°dîr
);

311 
	`Âuts
("\n", 
°dîr
);

313 
	`lua_£â›
(
L
, 0);

315 
	}
}

318 
	#LEVELS1
 12

	)

319 
	#LEVELS2
 10

	)

321 
	$db_îr‹fb
 (
lua_Sèã
 *
L
) {

322 
Àvñ
;

323 
fú°∑π
 = 1;

324 
¨g
;

325 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

326 
lua_Debug
 
¨
;

327 i‡(
	`lua_i¢umbî
(
L
, 
¨g
+2)) {

328 
Àvñ
 = ()
	`lua_toöãgî
(
L
, 
¨g
+2);

329 
	`lua_p›
(
L
, 1);

332 
Àvñ
 = (
L
 =
L1
) ? 1 : 0;

333 i‡(
	`lua_gët›
(
L
Ë=
¨g
)

334 
	`lua_pushlôîÆ
(
L
, "");

335 i‡(!
	`lua_is°rög
(
L
, 
¨g
+1))  1;

336 
	`lua_pushlôîÆ
(
L
, "\n");

337 
	`lua_pushlôîÆ
(
L
, "stackÅraceback:");

338 
	`lua_gë°ack
(
L1
, 
Àvñ
++, &
¨
)) {

339 i‡(
Àvñ
 > 
LEVELS1
 && 
fú°∑π
) {

341 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
+
LEVELS2
, &
¨
))

342 
Àvñ
--;

344 
	`lua_pushlôîÆ
(
L
, "\n\t...");

345 
	`lua_gë°ack
(
L1
, 
Àvñ
+
LEVELS2
, &
¨
))

346 
Àvñ
++;

348 
fú°∑π
 = 0;

351 
	`lua_pushlôîÆ
(
L
, "\n\t");

352 
	`lua_gëöfo
(
L1
, "S∆", &
¨
);

353 
	`lua_pushf°rög
(
L
, "%s:", 
¨
.
sh‹t_§c
);

354 i‡(
¨
.
cuºíéöe
 > 0)

355 
	`lua_pushf°rög
(
L
, "%d:", 
¨
.
cuºíéöe
);

356 i‡(*
¨
.
«mewh©
 != '\0')

357 
	`lua_pushf°rög
(
L
, " i¿fun˘i⁄ " 
LUA_QS
, 
¨
.
«me
);

359 i‡(*
¨
.
wh©
 == 'm')

360 
	`lua_pushf°rög
(
L
, " in main chunk");

361 i‡(*
¨
.
wh©
 == 'C' || *ar.what == 't')

362 
	`lua_pushlôîÆ
(
L
, " ?");

364 
	`lua_pushf°rög
(
L
, " in function <%s:%d>",

365 
¨
.
sh‹t_§c
,ár.
löedeföed
);

367 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
¨g
);

369 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
¨g
);

371 
	}
}

374 c⁄° 
luaL_Reg
 
	gdblib
[] = {

375 {"debug", 
db_debug
},

376 {"gë„nv", 
db_gë„nv
},

377 {"gëhook", 
db_gëhook
},

378 {"gëöfo", 
db_gëöfo
},

379 {"gëloˇl", 
db_gëloˇl
},

380 {"gëªgi°ry", 
db_gëªgi°ry
},

381 {"gëmë©abÀ", 
db_gëmë©abÀ
},

382 {"gëupvÆue", 
db_gëupvÆue
},

383 {"£t„nv", 
db_£t„nv
},

384 {"£thook", 
db_£thook
},

385 {"£éoˇl", 
db_£éoˇl
},

386 {"£tmë©abÀ", 
db_£tmë©abÀ
},

387 {"£tupvÆue", 
db_£tupvÆue
},

388 {"åa˚back", 
db_îr‹fb
},

389 {
NULL
, NULL}

393 
LUALIB_API
 
	$lua›í_debug
 (
lua_Sèã
 *
L
) {

394 
	`luaL_ªgi°î
(
L
, 
LUA_DBLIBNAME
, 
dblib
);

396 
	}
}

	@ldebug.c

8 
	~<°d¨g.h
>

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

13 
	#ldebug_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"lcode.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lobje˘.h
"

24 
	~"l›codes.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lvm.h
"

33 c⁄° *
gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
);

36 
	$cuºíçc
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

37 i‡(!
	`isLua
(
ci
))  -1;

38 i‡(
ci
 =
L
->ci)

39 
ci
->
ßvedpc
 = 
L
->savedpc;

40  
	`pcRñ
(
ci
->
ßvedpc
, 
	`ci_func
(ci)->
l
.
p
);

41 
	}
}

44 
	$cuºíéöe
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

45 
pc
 = 
	`cuºíçc
(
L
, 
ci
);

46 i‡(
pc
 < 0)

49  
	`gëlöe
(
	`ci_func
(
ci
)->
l
.
p
, 
pc
);

50 
	}
}

56 
LUA_API
 
	$lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
) {

57 i‡(
func
 =
NULL
 || 
mask
 == 0) {

58 
mask
 = 0;

59 
func
 = 
NULL
;

61 
L
->
hook
 = 
func
;

62 
L
->
ba£hookcou¡
 = 
cou¡
;

63 
	`ª£thookcou¡
(
L
);

64 
L
->
hookmask
 = 
	`ˇ°_byã
(
mask
);

66 
	}
}

69 
LUA_API
 
lua_Hook
 
	$lua_gëhook
 (
lua_Sèã
 *
L
) {

70  
L
->
hook
;

71 
	}
}

74 
LUA_API
 
	$lua_gëhookmask
 (
lua_Sèã
 *
L
) {

75  
L
->
hookmask
;

76 
	}
}

79 
LUA_API
 
	$lua_gëhookcou¡
 (
lua_Sèã
 *
L
) {

80  
L
->
ba£hookcou¡
;

81 
	}
}

84 
LUA_API
 
	$lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
) {

85 
°©us
;

86 
CÆlInfo
 *
ci
;

87 
	`lua_lock
(
L
);

88 
ci
 = 
L
->ci; 
Àvñ
 > 0 && cò> L->
ba£_ci
; ci--) {

89 
Àvñ
--;

90 i‡(
	`f_isLua
(
ci
))

91 
Àvñ
 -
ci
->
èûˇŒs
;

93 i‡(
Àvñ
 =0 && 
ci
 > 
L
->
ba£_ci
) {

94 
°©us
 = 1;

95 
¨
->
i_ci
 = 
	`ˇ°_öt
(
ci
 - 
L
->
ba£_ci
);

97 i‡(
Àvñ
 < 0) {

98 
°©us
 = 1;

99 
¨
->
i_ci
 = 0;

101 
°©us
 = 0;

102 
	`lua_u∆ock
(
L
);

103  
°©us
;

104 
	}
}

107 
PrŸo
 *
	$gëlu≠rŸo
 (
CÆlInfo
 *
ci
) {

108  (
	`isLua
(
ci
Ë? 
	`ci_func
(ci)->
l
.
p
 : 
NULL
);

109 
	}
}

112 c⁄° *
	$födloˇl
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
n
) {

113 c⁄° *
«me
;

114 
PrŸo
 *
Â
 = 
	`gëlu≠rŸo
(
ci
);

115 i‡(
Â
 && (
«me
 = 
	`luaF_gëloˇ ame
(Â, 
n
, 
	`cuºíçc
(
L
, 
ci
))Ë!
NULL
)

116  
«me
;

118 
StkId
 
limô
 = (
ci
 =
L
->ciË? L->
t›
 : (ci+1)->
func
;

119 i‡(
limô
 - 
ci
->
ba£
 >
n
 &&Ç > 0)

122  
NULL
;

124 
	}
}

127 
LUA_API
 c⁄° *
	$lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

128 
CÆlInfo
 *
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

129 c⁄° *
«me
 = 
	`födloˇl
(
L
, 
ci
, 
n
);

130 
	`lua_lock
(
L
);

131 i‡(
«me
)

132 
	`luaA_pushobje˘
(
L
, 
ci
->
ba£
 + (
n
 - 1));

133 
	`lua_u∆ock
(
L
);

134  
«me
;

135 
	}
}

138 
LUA_API
 c⁄° *
	$lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

139 
CÆlInfo
 *
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

140 c⁄° *
«me
 = 
	`födloˇl
(
L
, 
ci
, 
n
);

141 
	`lua_lock
(
L
);

142 i‡(
«me
)

143 
	`£tobjs2s
(
L
, 
ci
->
ba£
 + (
n
 - 1), L->
t›
 - 1);

144 
L
->
t›
--;

145 
	`lua_u∆ock
(
L
);

146  
«me
;

147 
	}
}

150 
	$funcöfo
 (
lua_Debug
 *
¨
, 
Closuª
 *
˛
) {

151 i‡(
˛
->
c
.
isC
) {

152 
¨
->
sour˚
 = "=[C]";

153 
¨
->
löedeföed
 = -1;

154 
¨
->
œ°löedeföed
 = -1;

155 
¨
->
wh©
 = "C";

158 
¨
->
sour˚
 = 
	`gë°r
(
˛
->
l
.
p
->source);

159 
¨
->
löedeföed
 = 
˛
->
l
.
p
->linedefined;

160 
¨
->
œ°löedeföed
 = 
˛
->
l
.
p
->lastlinedefined;

161 
¨
->
wh©
 = (¨->
löedeföed
 == 0) ? "main" : "Lua";

163 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

164 
	}
}

167 
	$öfo_èûˇŒ
 (
lua_Debug
 *
¨
) {

168 
¨
->
«me
 =ár->
«mewh©
 = "";

169 
¨
->
wh©
 = "tail";

170 
¨
->
œ°löedeföed
 =ár->
löedeföed
 =ár->
cuºíéöe
 = -1;

171 
¨
->
sour˚
 = "=(tail call)";

172 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

173 
¨
->
nups
 = 0;

174 
	}
}

177 
	$cﬁÀ˘vÆidlöes
 (
lua_Sèã
 *
L
, 
Closuª
 *
f
) {

178 i‡(
f
 =
NULL
 || f->
c
.
isC
) {

179 
	`£äûvÆue
(
L
->
t›
);

182 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
, 0, 0);

183 *
löeöfo
 = 
f
->
l
.
p
->lineinfo;

184 
i
;

185 
i
=0; i<
f
->
l
.
p
->
sizñöeöfo
; i++)

186 
	`£tbvÆue
(
	`luaH_£äum
(
L
, 
t
, 
löeöfo
[
i
]), 1);

187 
	`£thvÆue
(
L
, L->
t›
, 
t
);

189 
	`ö¸_t›
(
L
);

190 
	}
}

193 
	$auxgëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
,

194 
Closuª
 *
f
, 
CÆlInfo
 *
ci
) {

195 
°©us
 = 1;

196 i‡(
f
 =
NULL
) {

197 
	`öfo_èûˇŒ
(
¨
);

198  
°©us
;

200 ; *
wh©
; what++) {

201 *
wh©
) {

203 
	`funcöfo
(
¨
, 
f
);

207 
¨
->
cuºíéöe
 = (
ci
Ë? 
	`cuºíéöe
(
L
, ci) : -1;

211 
¨
->
nups
 = 
f
->
c
.
nupvÆues
;

215 
¨
->
«mewh©
 = (
ci
Ë? 
	`gëfun˙ame
(
L
, ci, &¨->
«me
Ë: 
NULL
;

216 i‡(
¨
->
«mewh©
 =
NULL
) {

217 
¨
->
«mewh©
 = "";

218 
¨
->
«me
 = 
NULL
;

225 : 
°©us
 = 0;

228  
°©us
;

229 
	}
}

232 
LUA_API
 
	$lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
) {

233 
°©us
;

234 
Closuª
 *
f
 = 
NULL
;

235 
CÆlInfo
 *
ci
 = 
NULL
;

236 
	`lua_lock
(
L
);

237 i‡(*
wh©
 == '>') {

238 
StkId
 
func
 = 
L
->
t›
 - 1;

239 
	`luai_≠icheck
(
L
, 
	`âisfun˘i⁄
(
func
));

240 
wh©
++;

241 
f
 = 
	`˛vÆue
(
func
);

242 
L
->
t›
--;

244 i‡(
¨
->
i_ci
 != 0) {

245 
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

246 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
func
));

247 
f
 = 
	`˛vÆue
(
ci
->
func
);

249 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
, 
¨
, 
f
, 
ci
);

250 i‡(
	`°rchr
(
wh©
, 'f')) {

251 i‡(
f
 =
NULL
Ë
	`£äûvÆue
(
L
->
t›
);

252 
	`£t˛vÆue
(
L
, L->
t›
, 
f
);

253 
	`ö¸_t›
(
L
);

255 i‡(
	`°rchr
(
wh©
, 'L'))

256 
	`cﬁÀ˘vÆidlöes
(
L
, 
f
);

257 
	`lua_u∆ock
(
L
);

258  
°©us
;

259 
	}
}

268 
	#check
(
x
Ëi‡(!(x)Ë 0;

	)

270 
	#checkjump
(
±
,
pc
Ë
	`check
(0 <p¯&&Ö¯<Öt->
sizecode
)

	)

272 
	#checkªg
(
±
,
ªg
Ë
	`check
(‘egË< (±)->
max°acksize
)

	)

276 
	$¥echeck
 (c⁄° 
PrŸo
 *
±
) {

277 
	`check
(
±
->
max°acksize
 <
MAXSTACK
);

278 
	`lua_as£π
(
±
->
num∑øms
+’t->
is_v¨¨g
 & 
VARARG_HASARG
Ë<±->
max°acksize
);

279 
	`lua_as£π
(!(
±
->
is_v¨¨g
 & 
VARARG_NEEDSARG
) ||

280 (
±
->
is_v¨¨g
 & 
VARARG_HASARG
));

281 
	`check
(
±
->
sizeupvÆues
 <±->
nups
);

282 
	`check
(
±
->
sizñöeöfo
 =±->
sizecode
 ||Öt->sizelineinfo == 0);

283 
	`check
(
	`GET_OPCODE
(
±
->
code
[±->
sizecode
-1]Ë=
OP_RETURN
);

285 
	}
}

288 
	#check›í›
(
±
,
pc
Ë
	`luaG_check›í›
(’t)->
code
[’c)+1])

	)

290 
	$luaG_check›í›
 (
In°ru˘i⁄
 
i
) {

291 
	`GET_OPCODE
(
i
)) {

292 
OP_CALL
:

293 
OP_TAILCALL
:

294 
OP_RETURN
:

295 
OP_SETLIST
: {

296 
	`check
(
	`GETARG_B
(
i
) == 0);

301 
	}
}

304 
	$checkArgMode
 (c⁄° 
PrŸo
 *
±
, 
r
, 
OpArgMask
 
mode
) {

305 
mode
) {

306 
OpArgN
: 
	`check
(
r
 == 0); ;

307 
OpArgU
: ;

308 
OpArgR
: 
	`checkªg
(
±
, 
r
); ;

309 
OpArgK
:

310 
	`check
(
	`ISK
(
r
Ë? 
	`INDEXK
‘Ë< 
±
->
sizek
 :Ñ <Öt->
max°acksize
);

314 
	}
}

317 
In°ru˘i⁄
 
	$symbexec
 (c⁄° 
PrŸo
 *
±
, 
œ°pc
, 
ªg
) {

318 
pc
;

319 
œ°
;

320 
œ°
 = 
±
->
sizecode
-1;

321 
	`check
(
	`¥echeck
(
±
));

322 
pc
 = 0;Ö¯< 
œ°pc
;Öc++) {

323 
In°ru˘i⁄
 
i
 = 
±
->
code
[
pc
];

324 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

325 
a
 = 
	`GETARG_A
(
i
);

326 
b
 = 0;

327 
c
 = 0;

328 
	`check
(
›
 < 
NUM_OPCODES
);

329 
	`checkªg
(
±
, 
a
);

330 
	`gëOpMode
(
›
)) {

331 
iABC
: {

332 
b
 = 
	`GETARG_B
(
i
);

333 
c
 = 
	`GETARG_C
(
i
);

334 
	`check
(
	`checkArgMode
(
±
, 
b
, 
	`gëBMode
(
›
)));

335 
	`check
(
	`checkArgMode
(
±
, 
c
, 
	`gëCMode
(
›
)));

338 
iABx
: {

339 
b
 = 
	`GETARG_Bx
(
i
);

340 i‡(
	`gëBMode
(
›
Ë=
OpArgK
Ë
	`check
(
b
 < 
±
->
sizek
);

343 
iAsBx
: {

344 
b
 = 
	`GETARG_sBx
(
i
);

345 i‡(
	`gëBMode
(
›
Ë=
OpArgR
) {

346 
de°
 = 
pc
+1+
b
;

347 
	`check
(0 <
de°
 && de° < 
±
->
sizecode
);

348 i‡(
de°
 > 0) {

350 
In°ru˘i⁄
 
d
 = 
±
->
code
[
de°
-1];

351 
	`check
(!(
	`GET_OPCODE
(
d
Ë=
OP_SETLIST
 && 
	`GETARG_C
(d) == 0));

357 i‡(
	`ã°AMode
(
›
)) {

358 i‡(
a
 =
ªg
Ë
œ°
 = 
pc
;

360 i‡(
	`ã°TMode
(
›
)) {

361 
	`check
(
pc
+2 < 
±
->
sizecode
);

362 
	`check
(
	`GET_OPCODE
(
±
->
code
[
pc
+1]Ë=
OP_JMP
);

364 
›
) {

365 
OP_LOADBOOL
: {

366 
	`check
(
c
 =0 || 
pc
+2 < 
±
->
sizecode
);

369 
OP_LOADNIL
: {

370 i‡(
a
 <
ªg
 &&Ñeg <
b
)

371 
œ°
 = 
pc
;

374 
OP_GETUPVAL
:

375 
OP_SETUPVAL
: {

376 
	`check
(
b
 < 
±
->
nups
);

379 
OP_GETGLOBAL
:

380 
OP_SETGLOBAL
: {

381 
	`check
(
	`âis°rög
(&
±
->
k
[
b
]));

384 
OP_SELF
: {

385 
	`checkªg
(
±
, 
a
+1);

386 i‡(
ªg
 =
a
+1Ë
œ°
 = 
pc
;

389 
OP_CONCAT
: {

390 
	`check
(
b
 < 
c
);

393 
OP_TFORLOOP
: {

394 
	`check
(
c
 >= 1);

395 
	`checkªg
(
±
, 
a
+2+
c
);

396 i‡(
ªg
 >
a
+2Ë
œ°
 = 
pc
;

399 
OP_FORLOOP
:

400 
OP_FORPREP
:

401 
	`checkªg
(
±
, 
a
+3);

403 
OP_JMP
: {

404 
de°
 = 
pc
+1+
b
;

406 i‡(
ªg
 !
NO_REG
 && 
pc
 < 
de°
 && de° <
œ°pc
)

407 
pc
 +
b
;

410 
OP_CALL
:

411 
OP_TAILCALL
: {

412 i‡(
b
 != 0) {

413 
	`checkªg
(
±
, 
a
+
b
-1);

415 
c
--;

416 i‡(
c
 =
LUA_MULTRET
) {

417 
	`check
(
	`check›í›
(
±
, 
pc
));

419 i‡(
c
 != 0)

420 
	`checkªg
(
±
, 
a
+
c
-1);

421 i‡(
ªg
 >
a
Ë
œ°
 = 
pc
;

424 
OP_RETURN
: {

425 
b
--;

426 i‡(
b
 > 0Ë
	`checkªg
(
±
, 
a
+b-1);

429 
OP_SETLIST
: {

430 i‡(
b
 > 0Ë
	`checkªg
(
±
, 
a
 + b);

431 i‡(
c
 =0Ë
pc
++;

434 
OP_CLOSURE
: {

435 
nup
;

436 
	`check
(
b
 < 
±
->
sizï
);

437 
nup
 = 
±
->
p
[
b
]->
nups
;

438 
	`check
(
pc
 + 
nup
 < 
±
->
sizecode
);

439 ; 
nup
>0;Çup--) {

440 
OpCode
 
›1
 = 
	`GET_OPCODE
(
±
->
code
[
pc
+
nup
]);

441 
	`check
(
›1
 =
OP_GETUPVAL
 || op1 =
OP_MOVE
);

445 
OP_VARARG
: {

446 
	`check
((
±
->
is_v¨¨g
 & 
VARARG_ISVARARG
) &&

447 !(
±
->
is_v¨¨g
 & 
VARARG_NEEDSARG
));

448 
b
--;

449 i‡(
b
 =
LUA_MULTRET
Ë
	`check
(
	`check›í›
(
±
, 
pc
));

450 
	`checkªg
(
±
, 
a
+
b
-1);

456  
±
->
code
[
œ°
];

457 
	}
}

459 #unde‡
check


460 #unde‡
checkjump


461 #unde‡
checkªg


466 
	$luaG_checkcode
 (c⁄° 
PrŸo
 *
±
) {

467  (
	`symbexec
(
±
,Öt->
sizecode
, 
NO_REG
) != 0);

468 
	}
}

471 c⁄° *
	$k«me
 (
PrŸo
 *
p
, 
c
) {

472 i‡(
	`ISK
(
c
Ë&& 
	`âis°rög
(&
p
->
k
[
	`INDEXK
(c)]))

473  
	`svÆue
(&
p
->
k
[
	`INDEXK
(
c
)]);

476 
	}
}

479 c⁄° *
	$gëobj«me
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
°ackpos
,

480 c⁄° **
«me
) {

481 i‡(
	`isLua
(
ci
)) {

482 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->
l
.p;

483 
pc
 = 
	`cuºíçc
(
L
, 
ci
);

484 
In°ru˘i⁄
 
i
;

485 *
«me
 = 
	`luaF_gëloˇ ame
(
p
, 
°ackpos
+1, 
pc
);

486 i‡(*
«me
)

488 
i
 = 
	`symbexec
(
p
, 
pc
, 
°ackpos
);

489 
	`lua_as£π
(
pc
 != -1);

490 
	`GET_OPCODE
(
i
)) {

491 
OP_GETGLOBAL
: {

492 
g
 = 
	`GETARG_Bx
(
i
);

493 
	`lua_as£π
(
	`âis°rög
(&
p
->
k
[
g
]));

494 *
«me
 = 
	`svÆue
(&
p
->
k
[
g
]);

497 
OP_MOVE
: {

498 
a
 = 
	`GETARG_A
(
i
);

499 
b
 = 
	`GETARG_B
(
i
);

500 i‡(
b
 < 
a
)

501  
	`gëobj«me
(
L
, 
ci
, 
b
, 
«me
);

504 
OP_GETTABLE
: {

505 
k
 = 
	`GETARG_C
(
i
);

506 *
«me
 = 
	`k«me
(
p
, 
k
);

509 
OP_GETUPVAL
: {

510 
u
 = 
	`GETARG_B
(
i
);

511 *
«me
 = 
p
->
upvÆues
 ? 
	`gë°r
’->upvÆues[
u
]) : "?";

514 
OP_SELF
: {

515 
k
 = 
	`GETARG_C
(
i
);

516 *
«me
 = 
	`k«me
(
p
, 
k
);

522  
NULL
;

523 
	}
}

526 c⁄° *
	$gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
) {

527 
In°ru˘i⁄
 
i
;

528 i‡((
	`isLua
(
ci
Ë&& ci->
èûˇŒs
 > 0) || !isLua(ci - 1))

529  
NULL
;

530 
ci
--;

531 
i
 = 
	`ci_func
(
ci
)->
l
.
p
->
code
[
	`cuºíçc
(
L
, ci)];

532 i‡(
	`GET_OPCODE
(
i
Ë=
OP_CALL
 || GET_OPCODE(iË=
OP_TAILCALL
 ||

533 
	`GET_OPCODE
(
i
Ë=
OP_TFORLOOP
)

534  
	`gëobj«me
(
L
, 
ci
, 
	`GETARG_A
(
i
), 
«me
);

536  
NULL
;

537 
	}
}

541 
	$isö°ack
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
) {

542 
StkId
 
p
;

543 
p
 = 
ci
->
ba£
;Ö < ci->
t›
;Ö++)

544 i‡(
o
 =
p
)  1;

546 
	}
}

549 
	$luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, c⁄° *
›
) {

550 c⁄° *
«me
 = 
NULL
;

551 c⁄° *
t
 = 
luaT_ty≥«mes
[
	`ây≥
(
o
)];

552 c⁄° *
köd
 = (
	`isö°ack
(
L
->
ci
, 
o
)) ?

553 
	`gëobj«me
(
L
, L->
ci
, 
	`ˇ°_öt
(
o
 - L->
ba£
), &
«me
) :

554 
NULL
;

555 i‡(
köd
)

556 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†%†" 
LUA_QS
 " (a %s value)",

557 
›
, 
köd
, 
«me
, 
t
);

559 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†®%†vÆue", 
›
, 
t
);

560 
	}
}

563 
	$luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, 
StkId
 
p1
, StkId 
p2
) {

564 i‡(
	`âis°rög
(
p1
)Ëp1 = 
p2
;

565 
	`lua_as£π
(!
	`âis°rög
(
p1
));

566 
	`luaG_ty≥îr‹
(
L
, 
p1
, "concatenate");

567 
	}
}

570 
	$luaG_¨ôhîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

571 
TVÆue
 
ãmp
;

572 i‡(
	`luaV_t⁄umbî
(
p1
, &
ãmp
Ë=
NULL
)

573 
p2
 = 
p1
;

574 
	`luaG_ty≥îr‹
(
L
, 
p2
, "performárithmetic on");

575 
	}
}

578 
	$luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

579 c⁄° *
t1
 = 
luaT_ty≥«mes
[
	`ây≥
(
p1
)];

580 c⁄° *
t2
 = 
luaT_ty≥«mes
[
	`ây≥
(
p2
)];

581 i‡(
t1
[2] =
t2
[2])

582 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ªÅwÿ%†vÆues", 
t1
);

584 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ª %†wôh %s", 
t1
, 
t2
);

586 
	}
}

589 
	$addöfo
 (
lua_Sèã
 *
L
, c⁄° *
msg
) {

590 
CÆlInfo
 *
ci
 = 
L
->ci;

591 i‡(
	`isLua
(
ci
)) {

592 
buff
[
LUA_IDSIZE
];

593 
löe
 = 
	`cuºíéöe
(
L
, 
ci
);

594 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
	`gëlu≠rŸo
(
ci
)->
sour˚
), 
LUA_IDSIZE
);

595 
	`luaO_pushf°rög
(
L
, "%s:%d: %s", 
buff
, 
löe
, 
msg
);

597 
	}
}

600 
	$luaG_îr‹msg
 (
lua_Sèã
 *
L
) {

601 i‡(
L
->
îrfunc
 != 0) {

602 
StkId
 
îrfunc
 = 
	`ª°‹e°ack
(
L
, L->errfunc);

603 i‡(!
	`âisfun˘i⁄
(
îrfunc
)Ë
	`luaD_throw
(
L
, 
LUA_ERRERR
);

604 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

605 
	`£tobjs2s
(
L
, L->
t›
 - 1, 
îrfunc
);

606 
	`ö¸_t›
(
L
);

607 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 1);

609 
	`luaD_throw
(
L
, 
LUA_ERRRUN
);

610 
	}
}

613 
	$luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

614 
va_li°
 
¨gp
;

615 
	`va_°¨t
(
¨gp
, 
fmt
);

616 
	`addöfo
(
L
, 
	`luaO_pushvf°rög
(L, 
fmt
, 
¨gp
));

617 
	`va_íd
(
¨gp
);

618 
	`luaG_îr‹msg
(
L
);

619 
	}
}

	@ldebug.h

7 #i‚de‡
ldebug_h


8 
	#ldebug_h


	)

11 
	~"l°©e.h
"

14 
	#pcRñ
(
pc
, 
p
Ë(
	`ˇ°
(, (pcË- (p)->
code
Ë- 1)

	)

16 
	#gëlöe
(
f
,
pc
Ë(((f)->
löeöfo
Ë? (f)->löeöfo[pc] : 0)

	)

18 
	#ª£thookcou¡
(
L
Ë(L->
hookcou¡
 = L->
ba£hookcou¡
)

	)

21 
LUAI_FUNC
 
luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
,

22 c⁄° *
›«me
);

23 
LUAI_FUNC
 
luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, 
StkId
 
p1
, StkId 
p2
);

24 
LUAI_FUNC
 
luaG_¨ôhîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

25 c⁄° 
TVÆue
 *
p2
);

26 
LUAI_FUNC
 
luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

27 c⁄° 
TVÆue
 *
p2
);

28 
LUAI_FUNC
 
luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

29 
LUAI_FUNC
 
luaG_îr‹msg
 (
lua_Sèã
 *
L
);

30 
LUAI_FUNC
 
luaG_checkcode
 (c⁄° 
PrŸo
 *
±
);

31 
LUAI_FUNC
 
luaG_check›í›
 (
In°ru˘i⁄
 
i
);

	@ldo.c

8 
	~<£tjmp.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#ldo_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lmem.h
"

22 
	~"lobje˘.h
"

23 
	~"l›codes.h
"

24 
	~"Õ¨£r.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

31 
	~"lzio.h
"

44 
	slua_l⁄gjmp
 {

45 
lua_l⁄gjmp
 *
	m¥evious
;

46 
luai_jmpbuf
 
	mb
;

47 vﬁ©ûê
	m°©us
;

51 
	$luaD_£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
) {

52 
îrcode
) {

53 
LUA_ERRMEM
: {

54 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, 
MEMERRMSG
));

57 
LUA_ERRERR
: {

58 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, "error inÉrror handling"));

61 
LUA_ERRSYNTAX
:

62 
LUA_ERRRUN
: {

63 
	`£tobjs2s
(
L
, 
ﬁdt›
, L->
t›
 - 1);

67 
L
->
t›
 = 
ﬁdt›
 + 1;

68 
	}
}

71 
	$ª°‹e_°ack_limô
 (
lua_Sèã
 *
L
) {

72 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
 - 1);

73 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
) {

74 
öu£
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

75 i‡(
öu£
 + 1 < 
LUAI_MAXCALLS
)

76 
	`luaD_ªÆlocCI
(
L
, 
LUAI_MAXCALLS
);

78 
	}
}

81 
	$ª£t°ack
 (
lua_Sèã
 *
L
, 
°©us
) {

82 
L
->
ci
 = L->
ba£_ci
;

83 
L
->
ba£
 = L->
ci
->base;

84 
	`luaF_˛o£
(
L
, L->
ba£
);

85 
	`luaD_£ãº‹obj
(
L
, 
°©us
, L->
ba£
);

86 
L
->
nCˇŒs
 = 0;

87 
L
->
Ælowhook
 = 1;

88 
	`ª°‹e_°ack_limô
(
L
);

89 
L
->
îrfunc
 = 0;

90 
L
->
îr‹Jmp
 = 
NULL
;

91 
	}
}

94 
	$luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
) {

95 i‡(
L
->
îr‹Jmp
) {

96 
L
->
îr‹Jmp
->
°©us
 = 
îrcode
;

97 
	`LUAI_THROW
(
L
, L->
îr‹Jmp
);

100 
L
->
°©us
 = 
	`ˇ°_byã
(
îrcode
);

101 i‡(
	`G
(
L
)->
∑nic
) {

102 
	`ª£t°ack
(
L
, 
îrcode
);

103 
	`lua_u∆ock
(
L
);

104 
	`G
(
L
)->
	`∑nic
(L);

106 
	`exô
(
EXIT_FAILURE
);

108 
	}
}

111 
	$luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
) {

112 
lua_l⁄gjmp
 
lj
;

113 
lj
.
°©us
 = 0;

114 
lj
.
¥evious
 = 
L
->
îr‹Jmp
;

115 
L
->
îr‹Jmp
 = &
lj
;

116 
	`LUAI_TRY
(
L
, &
lj
,

117 (*
f
)(
L
, 
ud
);

119 
L
->
îr‹Jmp
 = 
lj
.
¥evious
;

120  
lj
.
°©us
;

121 
	}
}

126 
	$c‹ª˘°ack
 (
lua_Sèã
 *
L
, 
TVÆue
 *
ﬁd°ack
) {

127 
CÆlInfo
 *
ci
;

128 
GCObje˘
 *
up
;

129 
L
->
t›
 = (L->t› - 
ﬁd°ack
Ë+ L->
°ack
;

130 
up
 = 
L
->
›íupvÆ
; u∞!
NULL
; u∞up->
gch
.
√xt
)

131 
	`gco2uv
(
up
)->
v
 = (gco2uv(up)->v - 
ﬁd°ack
Ë+ 
L
->
°ack
;

132 
ci
 = 
L
->
ba£_ci
; ci <= L->ci; ci++) {

133 
ci
->
t›
 = (ci->t› - 
ﬁd°ack
Ë+ 
L
->
°ack
;

134 
ci
->
ba£
 = (ci->ba£ - 
ﬁd°ack
Ë+ 
L
->
°ack
;

135 
ci
->
func
 = (ci->fun¯- 
ﬁd°ack
Ë+ 
L
->
°ack
;

137 
L
->
ba£
 = (L->ba£ - 
ﬁd°ack
Ë+ L->
°ack
;

138 
	}
}

141 
	$luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
) {

142 
TVÆue
 *
ﬁd°ack
 = 
L
->
°ack
;

143 
ªÆsize
 = 
√wsize
 + 1 + 
EXTRA_STACK
;

144 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
 - 1);

145 
	`luaM_ªÆlocve˘‹
(
L
, L->
°ack
, L->
°acksize
, 
ªÆsize
, 
TVÆue
);

146 
L
->
°acksize
 = 
ªÆsize
;

147 
L
->
°ack_œ°
 = L->
°ack
+
√wsize
;

148 
	`c‹ª˘°ack
(
L
, 
ﬁd°ack
);

149 
	}
}

152 
	$luaD_ªÆlocCI
 (
lua_Sèã
 *
L
, 
√wsize
) {

153 
CÆlInfo
 *
ﬁdci
 = 
L
->
ba£_ci
;

154 
	`luaM_ªÆlocve˘‹
(
L
, L->
ba£_ci
, L->
size_ci
, 
√wsize
, 
CÆlInfo
);

155 
L
->
size_ci
 = 
√wsize
;

156 
L
->
ci
 = (L->cò- 
ﬁdci
Ë+ L->
ba£_ci
;

157 
L
->
íd_ci
 = L->
ba£_ci
 + L->
size_ci
 - 1;

158 
	}
}

161 
	$luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
) {

162 i‡(
n
 <
L
->
°acksize
)

163 
	`luaD_ªÆloc°ack
(
L
, 2*L->
°acksize
);

165 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 + 
n
);

166 
	}
}

169 
CÆlInfo
 *
	$growCI
 (
lua_Sèã
 *
L
) {

170 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

171 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

173 
	`luaD_ªÆlocCI
(
L
, 2*L->
size_ci
);

174 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

175 
	`luaG_ru√º‹
(
L
, "stack overflow");

177  ++
L
->
ci
;

178 
	}
}

181 
	$luaD_ˇŒhook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
) {

182 
lua_Hook
 
hook
 = 
L
->hook;

183 i‡(
hook
 && 
L
->
Ælowhook
) {

184 
±rdiff_t
 
t›
 = 
	`ßve°ack
(
L
, L->top);

185 
±rdiff_t
 
ci_t›
 = 
	`ßve°ack
(
L
, L->
ci
->
t›
);

186 
lua_Debug
 
¨
;

187 
¨
.
evít
 =Évent;

188 
¨
.
cuºíéöe
 = 
löe
;

189 i‡(
evít
 =
LUA_HOOKTAILRET
)

190 
¨
.
i_ci
 = 0;

192 
¨
.
i_ci
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

193 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

194 
L
->
ci
->
t›
 = L->t› + 
LUA_MINSTACK
;

195 
	`lua_as£π
(
L
->
ci
->
t›
 <L->
°ack_œ°
);

196 
L
->
Ælowhook
 = 0;

197 
	`lua_u∆ock
(
L
);

198 (*
hook
)(
L
, &
¨
);

199 
	`lua_lock
(
L
);

200 
	`lua_as£π
(!
L
->
Ælowhook
);

201 
L
->
Ælowhook
 = 1;

202 
L
->
ci
->
t›
 = 
	`ª°‹e°ack
(L, 
ci_t›
);

203 
L
->
t›
 = 
	`ª°‹e°ack
(L,Åop);

205 
	}
}

208 
StkId
 
	$adju°_v¨¨gs
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
a˘uÆ
) {

209 
i
;

210 
nfix¨gs
 = 
p
->
num∑øms
;

211 
TabÀ
 *
hèb
 = 
NULL
;

212 
StkId
 
ba£
, 
fixed
;

213 ; 
a˘uÆ
 < 
nfix¨gs
; ++actual)

214 
	`£äûvÆue
(
L
->
t›
++);

215 #i‡
	`deföed
(
LUA_COMPAT_VARARG
)

216 i‡(
p
->
is_v¨¨g
 & 
VARARG_NEEDSARG
) {

217 
nv¨
 = 
a˘uÆ
 - 
nfix¨gs
;

218 
	`lua_as£π
(
p
->
is_v¨¨g
 & 
VARARG_HASARG
);

219 
	`luaC_checkGC
(
L
);

220 
hèb
 = 
	`luaH_√w
(
L
, 
nv¨
, 1);

221 
i
=0; i<
nv¨
; i++)

222 
	`£tobj2n
(
L
, 
	`luaH_£äum
(L, 
hèb
, 
i
+1), L->
t›
 - 
nv¨
 + i);

224 
	`£ävÆue
(
	`luaH_£t°r
(
L
, 
hèb
, 
	`luaS_√wlôîÆ
(L, "n")), 
	`ˇ°_num
(
nv¨
));

228 
fixed
 = 
L
->
t›
 - 
a˘uÆ
;

229 
ba£
 = 
L
->
t›
;

230 
i
=0; i<
nfix¨gs
; i++) {

231 
	`£tobjs2s
(
L
, L->
t›
++, 
fixed
+
i
);

232 
	`£äûvÆue
(
fixed
+
i
);

235 i‡(
hèb
) {

236 
	`£thvÆue
(
L
, L->
t›
++, 
hèb
);

237 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
hèb
)));

239  
ba£
;

240 
	}
}

243 
StkId
 
	$åyfuncTM
 (
lua_Sèã
 *
L
, 
StkId
 
func
) {

244 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
func
, 
TM_CALL
);

245 
StkId
 
p
;

246 
±rdiff_t
 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

247 i‡(!
	`âisfun˘i⁄
(
tm
))

248 
	`luaG_ty≥îr‹
(
L
, 
func
, "call");

250 
p
 = 
L
->
t›
;Ö > 
func
;Ö--Ë
	`£tobjs2s
(L,Ö,Ö-1);

251 
	`ö¸_t›
(
L
);

252 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

253 
	`£tobj2s
(
L
, 
func
, 
tm
);

254  
func
;

255 
	}
}

259 
	#öc_ci
(
L
) \

260 ((
L
->
ci
 =L->
íd_ci
Ë? 
	`growCI
(L) : \

261 (
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, L->
size_ci
)), ++L->
ci
))

	)

264 
	$luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
) {

265 
LClosuª
 *
˛
;

266 
±rdiff_t
 
fun¸
;

267 i‡(!
	`âisfun˘i⁄
(
func
))

268 
func
 = 
	`åyfuncTM
(
L
, func);

269 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

270 
˛
 = &
	`˛vÆue
(
func
)->
l
;

271 
L
->
ci
->
ßvedpc
 = L->savedpc;

272 i‡(!
˛
->
isC
) {

273 
CÆlInfo
 *
ci
;

274 
StkId
 
°
, 
ba£
;

275 
PrŸo
 *
p
 = 
˛
->p;

276 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

277 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

278 i‡(!
p
->
is_v¨¨g
) {

279 
ba£
 = 
func
 + 1;

280 i‡(
L
->
t›
 > 
ba£
 + 
p
->
num∑øms
)

281 
L
->
t›
 = 
ba£
 + 
p
->
num∑øms
;

284 
«rgs
 = 
	`ˇ°_öt
(
L
->
t›
 - 
func
) - 1;

285 
ba£
 = 
	`adju°_v¨¨gs
(
L
, 
p
, 
«rgs
);

286 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

288 
ci
 = 
	`öc_ci
(
L
);

289 
ci
->
func
 = func;

290 
L
->
ba£
 = 
ci
->base = base;

291 
ci
->
t›
 = 
L
->
ba£
 + 
p
->
max°acksize
;

292 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

293 
L
->
ßvedpc
 = 
p
->
code
;

294 
ci
->
èûˇŒs
 = 0;

295 
ci
->
ƒesu…s
 =Çresults;

296 
°
 = 
L
->
t›
; sà< 
ci
->top; st++)

297 
	`£äûvÆue
(
°
);

298 
L
->
t›
 = 
ci
->top;

299 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
) {

300 
L
->
ßvedpc
++;

301 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

302 
L
->
ßvedpc
--;

304  
PCRLUA
;

307 
CÆlInfo
 *
ci
;

308 
n
;

309 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

310 
ci
 = 
	`öc_ci
(
L
);

311 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

312 
L
->
ba£
 = 
ci
->ba£ = ci->
func
 + 1;

313 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

314 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

315 
ci
->
ƒesu…s
 =Çresults;

316 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

317 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

318 
	`lua_u∆ock
(
L
);

319 
n
 = (*
	`cuº_func
(
L
)->
c
.
f
)(L);

320 
	`lua_lock
(
L
);

321 i‡(
n
 < 0)

322  
PCRYIELD
;

324 
	`luaD_posˇŒ
(
L
, L->
t›
 - 
n
);

325  
PCRC
;

328 
	}
}

331 
StkId
 
	$ˇŒªthooks
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
) {

332 
±rdiff_t
 
‰
 = 
	`ßve°ack
(
L
, 
fú°Resu…
);

333 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKRET
, -1);

334 i‡(
	`f_isLua
(
L
->
ci
)) {

335 
L
->
ci
->
èûˇŒs
--)

336 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKTAILRET
, -1);

338  
	`ª°‹e°ack
(
L
, 
‰
);

339 
	}
}

342 
	$luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
) {

343 
StkId
 
ªs
;

344 
w™ãd
, 
i
;

345 
CÆlInfo
 *
ci
;

346 i‡(
L
->
hookmask
 & 
LUA_MASKRET
)

347 
fú°Resu…
 = 
	`ˇŒªthooks
(
L
, firstResult);

348 
ci
 = 
L
->ci--;

349 
ªs
 = 
ci
->
func
;

350 
w™ãd
 = 
ci
->
ƒesu…s
;

351 
L
->
ba£
 = (
ci
 - 1)->base;

352 
L
->
ßvedpc
 = (
ci
 - 1)->savedpc;

354 
i
 = 
w™ãd
; i !0 && 
fú°Resu…
 < 
L
->
t›
; i--)

355 
	`£tobjs2s
(
L
, 
ªs
++, 
fú°Resu…
++);

356 
i
-- > 0)

357 
	`£äûvÆue
(
ªs
++);

358 
L
->
t›
 = 
ªs
;

359  (
w™ãd
 - 
LUA_MULTRET
);

360 
	}
}

369 
	$luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
) {

370 i‡(++
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
) {

371 i‡(
L
->
nCˇŒs
 =
LUAI_MAXCCALLS
)

372 
	`luaG_ru√º‹
(
L
, "C stack overflow");

373 i‡(
L
->
nCˇŒs
 >(
LUAI_MAXCCALLS
 + (LUAI_MAXCCALLS>>3)))

374 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

376 i‡(
	`luaD_¥eˇŒ
(
L
, 
func
, 
nResu…s
Ë=
PCRLUA
)

377 
	`luaV_execuã
(
L
, 1);

378 
L
->
nCˇŒs
--;

379 
	`luaC_checkGC
(
L
);

380 
	}
}

383 
	$ªsume
 (
lua_Sèã
 *
L
, *
ud
) {

384 
StkId
 
fú°Arg
 = 
	`ˇ°
(StkId, 
ud
);

385 
CÆlInfo
 *
ci
 = 
L
->ci;

386 i‡(
L
->
°©us
 !
LUA_YIELD
) {

387 
	`lua_as£π
(
ci
 =
L
->
ba£_ci
 && 
fú°Arg
 > L->
ba£
);

388 i‡(
	`luaD_¥eˇŒ
(
L
, 
fú°Arg
 - 1, 
LUA_MULTRET
Ë!
PCRLUA
)

392 i‡(!
	`f_isLua
(
ci
)) {

394 
	`lua_as£π
(
	`GET_OPCODE
(*((
ci
-1)->
ßvedpc
 - 1)Ë=
OP_CALL
 ||

395 
	`GET_OPCODE
(*((
ci
-1)->
ßvedpc
 - 1)Ë=
OP_TAILCALL
);

396 i‡(
	`luaD_posˇŒ
(
L
, 
fú°Arg
))

397 
L
->
t›
 = L->
ci
->top;

400 
L
->
ba£
 = L->
ci
->base;

402 
L
->
°©us
 = 0;

403 
	`luaV_execuã
(
L
, 
	`ˇ°_öt
(L->
ci
 - L->
ba£_ci
));

404 
	}
}

407 
	$ªsume_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
msg
) {

408 
L
->
t›
 = L->
ci
->
ba£
;

409 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
msg
));

410 
	`ö¸_t›
(
L
);

411 
	`lua_u∆ock
(
L
);

412  
LUA_ERRRUN
;

413 
	}
}

416 
LUA_API
 
	$lua_ªsume
 (
lua_Sèã
 *
L
, 
«rgs
) {

417 
°©us
;

418 
	`lua_lock
(
L
);

419 i‡(
L
->
°©us
 !
LUA_YIELD
) {

420 i‡(
L
->
°©us
 != 0)

421  
	`ªsume_îr‹
(
L
, "cannotÑesume dead coroutine");

422 i‡(
L
->
ci
 !L->
ba£_ci
)

423  
	`ªsume_îr‹
(
L
, "cannotÑesumeÇon-suspended coroutine");

425 
	`luai_u£r°©îesume
(
L
, 
«rgs
);

426 
	`lua_as£π
(
L
->
îrfunc
 =0 && L->
nCˇŒs
 == 0);

427 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ªsume
, L->
t›
 - 
«rgs
);

428 i‡(
°©us
 != 0) {

429 
L
->
°©us
 = 
	`ˇ°_byã
(status);

430 
	`luaD_£ãº‹obj
(
L
, 
°©us
, L->
t›
);

431 
L
->
ci
->
t›
 = L->top;

434 
°©us
 = 
L
->status;

435 
	`lua_u∆ock
(
L
);

436  
°©us
;

437 
	}
}

440 
LUA_API
 
	$lua_yõld
 (
lua_Sèã
 *
L
, 
ƒesu…s
) {

441 
	`luai_u£r°©eyõld
(
L
, 
ƒesu…s
);

442 
	`lua_lock
(
L
);

443 i‡(
L
->
nCˇŒs
 > 0)

444 
	`luaG_ru√º‹
(
L
, "attemptÅo yieldácross metamethod/C-call boundary");

445 
L
->
ba£
 = L->
t›
 - 
ƒesu…s
;

446 
L
->
°©us
 = 
LUA_YIELD
;

447 
	`lua_u∆ock
(
L
);

449 
	}
}

452 
	$luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

453 
±rdiff_t
 
ﬁd_t›
,Öådiff_à
ef
) {

454 
°©us
;

455 
ﬁdnCˇŒs
 = 
L
->
nCˇŒs
;

456 
±rdiff_t
 
ﬁd_ci
 = 
	`ßveci
(
L
, L->
ci
);

457 
lu_byã
 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

458 
±rdiff_t
 
ﬁd_îrfunc
 = 
L
->
îrfunc
;

459 
L
->
îrfunc
 = 
ef
;

460 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
func
, 
u
);

461 i‡(
°©us
 != 0) {

462 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁd_t›
);

463 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

464 
	`luaD_£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

465 
L
->
nCˇŒs
 = 
ﬁdnCˇŒs
;

466 
L
->
ci
 = 
	`ª°‹eci
(L, 
ﬁd_ci
);

467 
L
->
ba£
 = L->
ci
->base;

468 
L
->
ßvedpc
 = L->
ci
->savedpc;

469 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

470 
	`ª°‹e_°ack_limô
(
L
);

472 
L
->
îrfunc
 = 
ﬁd_îrfunc
;

473  
°©us
;

474 
	}
}

481 
	sSP¨£r
 {

482 
ZIO
 *
	mz
;

483 
Mbuf„r
 
	mbuff
;

484 c⁄° *
	m«me
;

487 
	$f_∑r£r
 (
lua_Sèã
 *
L
, *
ud
) {

488 
i
;

489 
PrŸo
 *
tf
;

490 
Closuª
 *
˛
;

491 
SP¨£r
 *
p
 = 
	`ˇ°
(SP¨£∏*, 
ud
);

492 
c
 = 
	`luaZ_lookahód
(
p
->
z
);

493 
	`luaC_checkGC
(
L
);

494 
tf
 = ((
c
 =
LUA_SIGNATURE
[0]Ë? 
luaU_undump
 : 
luaY_∑r£r
)(
L
, 
p
->
z
,

495 &
p
->
buff
,Ö->
«me
);

496 
˛
 = 
	`luaF_√wL˛osuª
(
L
, 
tf
->
nups
, 
	`hvÆue
(
	`gt
(L)));

497 
˛
->
l
.
p
 = 
tf
;

498 
i
 = 0; i < 
tf
->
nups
; i++)

499 
˛
->
l
.
upvÆs
[
i
] = 
	`luaF_√wupvÆ
(
L
);

500 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

501 
	`ö¸_t›
(
L
);

502 
	}
}

505 
	$luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
) {

506 
SP¨£r
 
p
;

507 
°©us
;

508 
p
.
z
 = z;Ö.
«me
 =Çame;

509 
	`luaZ_öôbuf„r
(
L
, &
p
.
buff
);

510 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_∑r£r
, &
p
, 
	`ßve°ack
(L, L->
t›
), L->
îrfunc
);

511 
	`luaZ_‰ìbuf„r
(
L
, &
p
.
buff
);

512  
°©us
;

513 
	}
}

	@ldo.h

7 #i‚de‡
ldo_h


8 
	#ldo_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

13 
	~"lzio.h
"

16 
	#luaD_check°ack
(
L
,
n
) \

17 i‡((*)
L
->
°ack_œ°
 - (*)L->
t›
 <(
n
)*()(
TVÆue
)) \

18 
	`luaD_grow°ack
(
L
, 
n
); \

19 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 - 
EXTRA_STACK
 - 1));

	)

22 
	#ö¸_t›
(
L
Ë{
	`luaD_check°ack
(L,1); L->
t›
++;}

	)

24 
	#ßve°ack
(
L
,
p
Ë((*)’Ë- (*)L->
°ack
)

	)

25 
	#ª°‹e°ack
(
L
,
n
Ë((
TVÆue
 *)((*)L->
°ack
 + (n)))

	)

27 
	#ßveci
(
L
,
p
Ë((*)’Ë- (*)L->
ba£_ci
)

	)

28 
	#ª°‹eci
(
L
,
n
Ë((
CÆlInfo
 *)((*)L->
ba£_ci
 + (n)))

	)

32 
	#PCRLUA
 0

	)

33 
	#PCRC
 1

	)

34 
	#PCRYIELD
 2

	)

38 (*
	tPfunc
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
);

40 
LUAI_FUNC
 
	`luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
);

41 
LUAI_FUNC
 
	`luaD_ˇŒhook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
);

42 
LUAI_FUNC
 
	`luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
);

43 
LUAI_FUNC
 
	`luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
);

44 
LUAI_FUNC
 
	`luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

45 
±rdiff_t
 
ﬁdt›
,Öådiff_à
ef
);

46 
LUAI_FUNC
 
	`luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
);

47 
LUAI_FUNC
 
	`luaD_ªÆlocCI
 (
lua_Sèã
 *
L
, 
√wsize
);

48 
LUAI_FUNC
 
	`luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
);

49 
LUAI_FUNC
 
	`luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
);

51 
LUAI_FUNC
 
	`luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
);

52 
LUAI_FUNC
 
	`luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
);

54 
LUAI_FUNC
 
	`luaD_£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
);

	@ldump.c

7 
	~<°ddef.h
>

9 
	#ldump_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"lobje˘.h
"

15 
	~"l°©e.h
"

16 
	~"lundump.h
"

19 
lua_Sèã
* 
	mL
;

20 
lua_Wrôî
 
	mwrôî
;

21 * 
	md©a
;

22 
	m°rù
;

23 
	m°©us
;

24 } 
	tDumpSèã
;

26 
	#DumpMem
(
b
,
n
,
size
,
D
Ë
	`DumpBlock
(b,“)*(size),D)

	)

27 
	#DumpV¨
(
x
,
D
Ë
	`DumpMem
(&x,1,(x),D)

	)

29 
	$DumpBlock
(c⁄° * 
b
, 
size_t
 
size
, 
DumpSèã
* 
D
)

31 i‡(
D
->
°©us
==0)

33 
	`lua_u∆ock
(
D
->
L
);

34 
D
->
°©us
=(*D->
wrôî
)(D->
L
,
b
,
size
,D->
d©a
);

35 
	`lua_lock
(
D
->
L
);

37 
	}
}

39 
	$DumpCh¨
(
y
, 
DumpSèã
* 
D
)

41 
x
=()
y
;

42 
	`DumpV¨
(
x
,
D
);

43 
	}
}

45 
	$DumpI¡
(
x
, 
DumpSèã
* 
D
)

47 
	`DumpV¨
(
x
,
D
);

48 
	}
}

50 
	$DumpNumbî
(
lua_Numbî
 
x
, 
DumpSèã
* 
D
)

52 
	`DumpV¨
(
x
,
D
);

53 
	}
}

55 
	$DumpVe˘‹
(c⁄° * 
b
, 
n
, 
size_t
 
size
, 
DumpSèã
* 
D
)

57 
	`DumpI¡
(
n
,
D
);

58 
	`DumpMem
(
b
,
n
,
size
,
D
);

59 
	}
}

61 
	$DumpSåög
(c⁄° 
TSåög
* 
s
, 
DumpSèã
* 
D
)

63 i‡(
s
==
NULL
 || 
	`gë°r
(s)==NULL)

65 
size_t
 
size
=0;

66 
	`DumpV¨
(
size
,
D
);

70 
size_t
 
size
=
s
->
tsv
.
Àn
+1;

71 
	`DumpV¨
(
size
,
D
);

72 
	`DumpBlock
(
	`gë°r
(
s
),
size
,
D
);

74 
	}
}

76 
	#DumpCode
(
f
,
D
Ë
	`DumpVe˘‹
(f->
code
,f->
sizecode
,(
In°ru˘i⁄
),D)

	)

78 
DumpFun˘i⁄
(c⁄° 
PrŸo
* 
f
, c⁄° 
TSåög
* 
p
, 
DumpSèã
* 
D
);

80 
	$DumpC⁄°™ts
(c⁄° 
PrŸo
* 
f
, 
DumpSèã
* 
D
)

82 
i
,
n
=
f
->
sizek
;

83 
	`DumpI¡
(
n
,
D
);

84 
i
=0; i<
n
; i++)

86 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

87 
	`DumpCh¨
(
	`ây≥
(
o
),
D
);

88 
	`ây≥
(
o
))

90 
LUA_TNIL
:

92 
LUA_TBOOLEAN
:

93 
	`DumpCh¨
(
	`bvÆue
(
o
),
D
);

95 
LUA_TNUMBER
:

96 
	`DumpNumbî
(
	`nvÆue
(
o
),
D
);

98 
LUA_TSTRING
:

99 
	`DumpSåög
(
	`øwtsvÆue
(
o
),
D
);

102 
	`lua_as£π
(0);

106 
n
=
f
->
sizï
;

107 
	`DumpI¡
(
n
,
D
);

108 
i
=0; i<
n
; i++Ë
	`DumpFun˘i⁄
(
f
->
p
[i],f->
sour˚
,
D
);

109 
	}
}

111 
	$DumpDebug
(c⁄° 
PrŸo
* 
f
, 
DumpSèã
* 
D
)

113 
i
,
n
;

114 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizñöeöfo
;

115 
	`DumpVe˘‹
(
f
->
löeöfo
,
n
,(),
D
);

116 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizñocv¨s
;

117 
	`DumpI¡
(
n
,
D
);

118 
i
=0; i<
n
; i++)

120 
	`DumpSåög
(
f
->
locv¨s
[
i
].
v¨«me
,
D
);

121 
	`DumpI¡
(
f
->
locv¨s
[
i
].
°¨çc
,
D
);

122 
	`DumpI¡
(
f
->
locv¨s
[
i
].
ídpc
,
D
);

124 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizeupvÆues
;

125 
	`DumpI¡
(
n
,
D
);

126 
i
=0; i<
n
; i++Ë
	`DumpSåög
(
f
->
upvÆues
[i],
D
);

127 
	}
}

129 
	$DumpFun˘i⁄
(c⁄° 
PrŸo
* 
f
, c⁄° 
TSåög
* 
p
, 
DumpSèã
* 
D
)

131 
	`DumpSåög
((
f
->
sour˚
==
p
 || 
D
->
°rù
Ë? 
NULL
 : f->source,D);

132 
	`DumpI¡
(
f
->
löedeföed
,
D
);

133 
	`DumpI¡
(
f
->
œ°löedeföed
,
D
);

134 
	`DumpCh¨
(
f
->
nups
,
D
);

135 
	`DumpCh¨
(
f
->
num∑øms
,
D
);

136 
	`DumpCh¨
(
f
->
is_v¨¨g
,
D
);

137 
	`DumpCh¨
(
f
->
max°acksize
,
D
);

138 
	`DumpCode
(
f
,
D
);

139 
	`DumpC⁄°™ts
(
f
,
D
);

140 
	`DumpDebug
(
f
,
D
);

141 
	}
}

143 
	$DumpHódî
(
DumpSèã
* 
D
)

145 
h
[
LUAC_HEADERSIZE
];

146 
	`luaU_hódî
(
h
);

147 
	`DumpBlock
(
h
,
LUAC_HEADERSIZE
,
D
);

148 
	}
}

153 
	$luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
, * 
d©a
, 
°rù
)

155 
DumpSèã
 
D
;

156 
D
.
L
=L;

157 
D
.
wrôî
=
w
;

158 
D
.
d©a
=data;

159 
D
.
°rù
=strip;

160 
D
.
°©us
=0;

161 
	`DumpHódî
(&
D
);

162 
	`DumpFun˘i⁄
(
f
,
NULL
,&
D
);

163  
D
.
°©us
;

164 
	}
}

	@lfunc.c

8 
	~<°ddef.h
>

10 
	#lfunc_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lfunc.h
"

16 
	~"lgc.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

23 
Closuª
 *
	$luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
) {

24 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeC˛osuª
(
√Àms
)));

25 
	`luaC_lök
(
L
, 
	`obj2gco
(
c
), 
LUA_TFUNCTION
);

26 
c
->c.
isC
 = 1;

27 
c
->c.
ív
 = 
e
;

28 
c
->c.
nupvÆues
 = 
	`ˇ°_byã
(
√Àms
);

29  
c
;

30 
	}
}

33 
Closuª
 *
	$luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
) {

34 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeL˛osuª
(
√Àms
)));

35 
	`luaC_lök
(
L
, 
	`obj2gco
(
c
), 
LUA_TFUNCTION
);

36 
c
->
l
.
isC
 = 0;

37 
c
->
l
.
ív
 = 
e
;

38 
c
->
l
.
nupvÆues
 = 
	`ˇ°_byã
(
√Àms
);

39 
√Àms
--Ë
c
->
l
.
upvÆs
[√Àms] = 
NULL
;

40  
c
;

41 
	}
}

44 
UpVÆ
 *
	$luaF_√wupvÆ
 (
lua_Sèã
 *
L
) {

45 
UpVÆ
 *
uv
 = 
	`luaM_√w
(
L
, UpVal);

46 
	`luaC_lök
(
L
, 
	`obj2gco
(
uv
), 
LUA_TUPVAL
);

47 
uv
->
v
 = &uv->
u
.
vÆue
;

48 
	`£äûvÆue
(
uv
->
v
);

49  
uv
;

50 
	}
}

53 
UpVÆ
 *
	$luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

54 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

55 
GCObje˘
 **
µ
 = &
L
->
›íupvÆ
;

56 
UpVÆ
 *
p
;

57 
UpVÆ
 *
uv
;

58 (
p
 = 
	`ngcŸouv
(*
µ
)Ë!
NULL
 &&Ö->
v
 >
Àvñ
) {

59 
	`lua_as£π
(
p
->
v
 !&p->
u
.
vÆue
);

60 i‡(
p
->
v
 =
Àvñ
) {

61 i‡(
	`isdód
(
g
, 
	`obj2gco
(
p
)))

62 
	`ch™gewhôe
(
	`obj2gco
(
p
));

63  
p
;

65 
µ
 = &
p
->
√xt
;

67 
uv
 = 
	`luaM_√w
(
L
, 
UpVÆ
);

68 
uv
->
â
 = 
LUA_TUPVAL
;

69 
uv
->
m¨ked
 = 
	`luaC_whôe
(
g
);

70 
uv
->
v
 = 
Àvñ
;

71 
uv
->
√xt
 = *
µ
;

72 *
µ
 = 
	`obj2gco
(
uv
);

73 
uv
->
u
.
l
.
¥ev
 = &
g
->
uvhód
;

74 
uv
->
u
.
l
.
√xt
 = 
g
->
uvhód
.u.l.next;

75 
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 = uv;

76 
g
->
uvhód
.
u
.
l
.
√xt
 = 
uv
;

77 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

78  
uv
;

79 
	}
}

82 
	$u∆ökupvÆ
 (
UpVÆ
 *
uv
) {

83 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

84 
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 = uv->u.l.prev;

85 
uv
->
u
.
l
.
¥ev
->u.l.
√xt
 = uv->u.l.next;

86 
	}
}

89 
	$luaF_‰ìupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

90 i‡(
uv
->
v
 !&uv->
u
.
vÆue
)

91 
	`u∆ökupvÆ
(
uv
);

92 
	`luaM_‰ì
(
L
, 
uv
);

93 
	}
}

96 
	$luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

97 
UpVÆ
 *
uv
;

98 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

99 (
uv
 = 
	`ngcŸouv
(
L
->
›íupvÆ
)Ë!
NULL
 && uv->
v
 >
Àvñ
) {

100 
GCObje˘
 *
o
 = 
	`obj2gco
(
uv
);

101 
	`lua_as£π
(!
	`isbœck
(
o
Ë&& 
uv
->
v
 !&uv->
u
.
vÆue
);

102 
L
->
›íupvÆ
 = 
uv
->
√xt
;

103 i‡(
	`isdód
(
g
, 
o
))

104 
	`luaF_‰ìupvÆ
(
L
, 
uv
);

106 
	`u∆ökupvÆ
(
uv
);

107 
	`£tobj
(
L
, &
uv
->
u
.
vÆue
, uv->
v
);

108 
uv
->
v
 = &uv->
u
.
vÆue
;

109 
	`luaC_lökupvÆ
(
L
, 
uv
);

112 
	}
}

115 
PrŸo
 *
	$luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
) {

116 
PrŸo
 *
f
 = 
	`luaM_√w
(
L
, Proto);

117 
	`luaC_lök
(
L
, 
	`obj2gco
(
f
), 
LUA_TPROTO
);

118 
f
->
k
 = 
NULL
;

119 
f
->
sizek
 = 0;

120 
f
->
p
 = 
NULL
;

121 
f
->
sizï
 = 0;

122 
f
->
code
 = 
NULL
;

123 
f
->
sizecode
 = 0;

124 
f
->
sizñöeöfo
 = 0;

125 
f
->
sizeupvÆues
 = 0;

126 
f
->
nups
 = 0;

127 
f
->
upvÆues
 = 
NULL
;

128 
f
->
num∑øms
 = 0;

129 
f
->
is_v¨¨g
 = 0;

130 
f
->
max°acksize
 = 0;

131 
f
->
löeöfo
 = 
NULL
;

132 
f
->
sizñocv¨s
 = 0;

133 
f
->
locv¨s
 = 
NULL
;

134 
f
->
löedeföed
 = 0;

135 
f
->
œ°löedeföed
 = 0;

136 
f
->
sour˚
 = 
NULL
;

137  
f
;

138 
	}
}

141 
	$luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
) {

142 
	`luaM_‰ì¨øy
(
L
, 
f
->
code
, f->
sizecode
, 
In°ru˘i⁄
);

143 
	`luaM_‰ì¨øy
(
L
, 
f
->
p
, f->
sizï
, 
PrŸo
 *);

144 
	`luaM_‰ì¨øy
(
L
, 
f
->
k
, f->
sizek
, 
TVÆue
);

145 
	`luaM_‰ì¨øy
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, );

146 
	`luaM_‰ì¨øy
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
LocV¨
);

147 
	`luaM_‰ì¨øy
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, 
TSåög
 *);

148 
	`luaM_‰ì
(
L
, 
f
);

149 
	}
}

152 
	$luaF_‰ì˛osuª
 (
lua_Sèã
 *
L
, 
Closuª
 *
c
) {

153 
size
 = (
c
->c.
isC
Ë? 
	`sizeC˛osuª
(c->c.
nupvÆues
) :

154 
	`sizeL˛osuª
(
c
->
l
.
nupvÆues
);

155 
	`luaM_‰ìmem
(
L
, 
c
, 
size
);

156 
	}
}

163 c⁄° *
	$luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
f
, 
loˇl_numbî
, 
pc
) {

164 
i
;

165 
i
 = 0; i<
f
->
sizñocv¨s
 && f->
locv¨s
[i].
°¨çc
 <
pc
; i++) {

166 i‡(
pc
 < 
f
->
locv¨s
[
i
].
ídpc
) {

167 
loˇl_numbî
--;

168 i‡(
loˇl_numbî
 == 0)

169  
	`gë°r
(
f
->
locv¨s
[
i
].
v¨«me
);

172  
NULL
;

173 
	}
}

	@lfunc.h

7 #i‚de‡
lfunc_h


8 
	#lfunc_h


	)

11 
	~"lobje˘.h
"

14 
	#sizeC˛osuª
(
n
Ë(
	`ˇ°
(, (
CClosuª
)) + \

15 
	`ˇ°
(, (
TVÆue
)*((
n
)-1)))

	)

17 
	#sizeL˛osuª
(
n
Ë(
	`ˇ°
(, (
LClosuª
)) + \

18 
	`ˇ°
(, (
TVÆue
 *)*((
n
)-1)))

	)

21 
LUAI_FUNC
 
PrŸo
 *
luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
);

22 
LUAI_FUNC
 
Closuª
 *
luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
);

23 
LUAI_FUNC
 
Closuª
 *
luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
);

24 
LUAI_FUNC
 
UpVÆ
 *
luaF_√wupvÆ
 (
lua_Sèã
 *
L
);

25 
LUAI_FUNC
 
UpVÆ
 *
luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

26 
LUAI_FUNC
 
luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

27 
LUAI_FUNC
 
luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
);

28 
LUAI_FUNC
 
luaF_‰ì˛osuª
 (
lua_Sèã
 *
L
, 
Closuª
 *
c
);

29 
LUAI_FUNC
 
luaF_‰ìupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

30 
LUAI_FUNC
 c⁄° *
luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
func
, 
loˇl_numbî
,

31 
pc
);

	@lgc.c

7 
	~<°rög.h
>

9 
	#lgc_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"ldebug.h
"

15 
	~"ldo.h
"

16 
	~"lfunc.h
"

17 
	~"lgc.h
"

18 
	~"lmem.h
"

19 
	~"lobje˘.h
"

20 
	~"l°©e.h
"

21 
	~"l°rög.h
"

22 
	~"…abÀ.h
"

23 
	~"…m.h
"

26 
	#GCSTEPSIZE
 1024u

	)

27 
	#GCSWEEPMAX
 40

	)

28 
	#GCSWEEPCOST
 10

	)

29 
	#GCFINALIZECOST
 100

	)

32 
	#maskm¨ks
 
	`ˇ°_byã
(~(
	`bômask
(
BLACKBIT
)|
WHITEBITS
))

	)

34 
	#makewhôe
(
g
,
x
) \

35 ((
x
)->
gch
.
m¨ked
 = 
	`ˇ°_byã
(((x)->gch.m¨ked & 
maskm¨ks
Ë| 
	`luaC_whôe
(
g
)))

	)

37 
	#whôe2gøy
(
x
Ë
	`ª£t2bôs
((x)->
gch
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

38 
	#bœck2gøy
(
x
Ë
	`ª£tbô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

40 
	#°rögm¨k
(
s
Ë
	`ª£t2bôs
((s)->
tsv
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

43 
	#isföÆized
(
u
Ë
	`ã°bô
((u)->
m¨ked
, 
FINALIZEDBIT
)

	)

44 
	#m¨kföÆized
(
u
Ë
	`l_£tbô
((u)->
m¨ked
, 
FINALIZEDBIT
)

	)

47 
	#KEYWEAK
 
	`bômask
(
KEYWEAKBIT
)

	)

48 
	#VALUEWEAK
 
	`bômask
(
VALUEWEAKBIT
)

	)

52 
	#m¨kvÆue
(
g
,
o
Ë{ 
	`checkc⁄si°ícy
(o); \

53 i‡(
	`iscﬁÀ˘abÀ
(
o
Ë&& 
	`iswhôe
(
	`gcvÆue
(o))Ë
	`ªÆlym¨kobje˘
(
g
,gcvÆue(o)); }

	)

55 
	#m¨kobje˘
(
g
,
t
Ë{ i‡(
	`iswhôe
(
	`obj2gco
(t))) \

56 
	`ªÆlym¨kobje˘
(
g
, 
	`obj2gco
(
t
)); }

	)

59 
	#£âhªshﬁd
(
g
Ë(g->
GCthªshﬁd
 = (g->
e°im©e
/100Ë* g->
g˝au£
)

	)

62 
	$ªmovì¡ry
 (
Node
 *
n
) {

63 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
n
)));

64 i‡(
	`iscﬁÀ˘abÀ
(
	`gkey
(
n
)))

65 
	`£âty≥
(
	`gkey
(
n
), 
LUA_TDEADKEY
);

66 
	}
}

69 
	$ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
) {

70 
	`lua_as£π
(
	`iswhôe
(
o
Ë&& !
	`isdód
(
g
, o));

71 
	`whôe2gøy
(
o
);

72 
o
->
gch
.
â
) {

73 
LUA_TSTRING
: {

76 
LUA_TUSERDATA
: {

77 
TabÀ
 *
mt
 = 
	`gco2u
(
o
)->
më©abÀ
;

78 
	`gøy2bœck
(
o
);

79 i‡(
mt
Ë
	`m¨kobje˘
(
g
, mt);

80 
	`m¨kobje˘
(
g
, 
	`gco2u
(
o
)->
ív
);

83 
LUA_TUPVAL
: {

84 
UpVÆ
 *
uv
 = 
	`gco2uv
(
o
);

85 
	`m¨kvÆue
(
g
, 
uv
->
v
);

86 i‡(
uv
->
v
 =&uv->
u
.
vÆue
)

87 
	`gøy2bœck
(
o
);

90 
LUA_TFUNCTION
: {

91 
	`gco2˛
(
o
)->
c
.
g˛i°
 = 
g
->
gøy
;

92 
g
->
gøy
 = 
o
;

95 
LUA_TTABLE
: {

96 
	`gco2h
(
o
)->
g˛i°
 = 
g
->
gøy
;

97 
g
->
gøy
 = 
o
;

100 
LUA_TTHREAD
: {

101 
	`gco2th
(
o
)->
g˛i°
 = 
g
->
gøy
;

102 
g
->
gøy
 = 
o
;

105 
LUA_TPROTO
: {

106 
	`gco2p
(
o
)->
g˛i°
 = 
g
->
gøy
;

107 
g
->
gøy
 = 
o
;

110 : 
	`lua_as£π
(0);

112 
	}
}

115 
	$m¨ktmu
 (
globÆ_Sèã
 *
g
) {

116 
GCObje˘
 *
u
 = 
g
->
tmud©a
;

117 i‡(
u
) {

119 
u
 = u->
gch
.
√xt
;

120 
	`makewhôe
(
g
, 
u
);

121 
	`ªÆlym¨kobje˘
(
g
, 
u
);

122 } 
u
 !
g
->
tmud©a
);

124 
	}
}

128 
size_t
 
	$luaC_£∑øãud©a
 (
lua_Sèã
 *
L
, 
Æl
) {

129 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

130 
size_t
 
dódmem
 = 0;

131 
GCObje˘
 **
p
 = &
g
->
maöthªad
->
√xt
;

132 
GCObje˘
 *
cuº
;

133 (
cuº
 = *
p
Ë!
NULL
) {

134 i‡(!(
	`iswhôe
(
cuº
Ë|| 
Æl
Ë|| 
	`isföÆized
(
	`gco2u
(curr)))

135 
p
 = &
cuº
->
gch
.
√xt
;

136 i‡(
	`Á°tm
(
L
, 
	`gco2u
(
cuº
)->
më©abÀ
, 
TM_GC
Ë=
NULL
) {

137 
	`m¨kföÆized
(
	`gco2u
(
cuº
));

138 
p
 = &
cuº
->
gch
.
√xt
;

141 
dódmem
 +
	`sizeud©a
(
	`gco2u
(
cuº
));

142 
	`m¨kföÆized
(
	`gco2u
(
cuº
));

143 *
p
 = 
cuº
->
gch
.
√xt
;

145 i‡(
g
->
tmud©a
 =
NULL
)

146 
g
->
tmud©a
 = 
cuº
->
gch
.
√xt
 = curr;

148 
cuº
->
gch
.
√xt
 = 
g
->
tmud©a
->gch.next;

149 
g
->
tmud©a
->
gch
.
√xt
 = 
cuº
;

150 
g
->
tmud©a
 = 
cuº
;

154  
dódmem
;

155 
	}
}

158 
	$åavî£èbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

159 
i
;

160 
wókkey
 = 0;

161 
wókvÆue
 = 0;

162 c⁄° 
TVÆue
 *
mode
;

163 i‡(
h
->
më©abÀ
)

164 
	`m¨kobje˘
(
g
, 
h
->
më©abÀ
);

165 
mode
 = 
	`gÁ°tm
(
g
, 
h
->
më©abÀ
, 
TM_MODE
);

166 i‡(
mode
 && 
	`âis°rög
(mode)) {

167 
wókkey
 = (
	`°rchr
(
	`svÆue
(
mode
), 'k'Ë!
NULL
);

168 
wókvÆue
 = (
	`°rchr
(
	`svÆue
(
mode
), 'v'Ë!
NULL
);

169 i‡(
wókkey
 || 
wókvÆue
) {

170 
h
->
m¨ked
 &~(
KEYWEAK
 | 
VALUEWEAK
);

171 
h
->
m¨ked
 |
	`ˇ°_byã
((
wókkey
 << 
KEYWEAKBIT
) |

172 (
wókvÆue
 << 
VALUEWEAKBIT
));

173 
h
->
g˛i°
 = 
g
->
wók
;

174 
g
->
wók
 = 
	`obj2gco
(
h
);

177 i‡(
wókkey
 && 
wókvÆue
)  1;

178 i‡(!
wókvÆue
) {

179 
i
 = 
h
->
sizóºay
;

180 
i
--)

181 
	`m¨kvÆue
(
g
, &
h
->
¨øy
[
i
]);

183 
i
 = 
	`sizíode
(
h
);

184 
i
--) {

185 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

186 
	`lua_as£π
(
	`ây≥
(
	`gkey
(
n
)Ë!
LUA_TDEADKEY
 || 
	`âi¢û
(
	`gvÆ
(n)));

187 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

188 
	`ªmovì¡ry
(
n
);

190 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

191 i‡(!
wókkey
Ë
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

192 i‡(!
wókvÆue
Ë
	`m¨kvÆue
(
g
, 
	`gvÆ
(
n
));

195  
wókkey
 || 
wókvÆue
;

196 
	}
}

203 
	$åavî£¥Ÿo
 (
globÆ_Sèã
 *
g
, 
PrŸo
 *
f
) {

204 
i
;

205 i‡(
f
->
sour˚
Ë
	`°rögm¨k
(f->source);

206 
i
=0; i<
f
->
sizek
; i++)

207 
	`m¨kvÆue
(
g
, &
f
->
k
[
i
]);

208 
i
=0; i<
f
->
sizeupvÆues
; i++) {

209 i‡(
f
->
upvÆues
[
i
])

210 
	`°rögm¨k
(
f
->
upvÆues
[
i
]);

212 
i
=0; i<
f
->
sizï
; i++) {

213 i‡(
f
->
p
[
i
])

214 
	`m¨kobje˘
(
g
, 
f
->
p
[
i
]);

216 
i
=0; i<
f
->
sizñocv¨s
; i++) {

217 i‡(
f
->
locv¨s
[
i
].
v¨«me
)

218 
	`°rögm¨k
(
f
->
locv¨s
[
i
].
v¨«me
);

220 
	}
}

224 
	$åavî£˛osuª
 (
globÆ_Sèã
 *
g
, 
Closuª
 *
˛
) {

225 
	`m¨kobje˘
(
g
, 
˛
->
c
.
ív
);

226 i‡(
˛
->
c
.
isC
) {

227 
i
;

228 
i
=0; i<
˛
->
c
.
nupvÆues
; i++)

229 
	`m¨kvÆue
(
g
, &
˛
->
c
.
upvÆue
[
i
]);

232 
i
;

233 
	`lua_as£π
(
˛
->
l
.
nupvÆues
 =˛->l.
p
->
nups
);

234 
	`m¨kobje˘
(
g
, 
˛
->
l
.
p
);

235 
i
=0; i<
˛
->
l
.
nupvÆues
; i++)

236 
	`m¨kobje˘
(
g
, 
˛
->
l
.
upvÆs
[
i
]);

238 
	}
}

241 
	$check°acksizes
 (
lua_Sèã
 *
L
, 
StkId
 
max
) {

242 
ci_u£d
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

243 
s_u£d
 = 
	`ˇ°_öt
(
max
 - 
L
->
°ack
);

244 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

246 i‡(4*
ci_u£d
 < 
L
->
size_ci
 && 2*
BASIC_CI_SIZE
 < L->size_ci)

247 
	`luaD_ªÆlocCI
(
L
, L->
size_ci
/2);

248 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, 
ci_u£d
 + 1));

249 i‡(4*
s_u£d
 < 
L
->
°acksize
 &&

250 2*(
BASIC_STACK_SIZE
+
EXTRA_STACK
Ë< 
L
->
°acksize
)

251 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
/2);

252 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, 
s_u£d
));

253 
	}
}

256 
	$åavî£°ack
 (
globÆ_Sèã
 *
g
, 
lua_Sèã
 *
l
) {

257 
StkId
 
o
, 
lim
;

258 
CÆlInfo
 *
ci
;

259 
	`m¨kvÆue
(
g
, 
	`gt
(
l
));

260 
lim
 = 
l
->
t›
;

261 
ci
 = 
l
->
ba£_ci
; ci <=Ü->ci; ci++) {

262 
	`lua_as£π
(
ci
->
t›
 <
l
->
°ack_œ°
);

263 i‡(
lim
 < 
ci
->
t›
)Üim = ci->top;

265 
o
 = 
l
->
°ack
; o <Ü->
t›
; o++)

266 
	`m¨kvÆue
(
g
, 
o
);

267 ; 
o
 <
lim
; o++)

268 
	`£äûvÆue
(
o
);

269 
	`check°acksizes
(
l
, 
lim
);

270 
	}
}

277 
l_mem
 
	$¥›ag©em¨k
 (
globÆ_Sèã
 *
g
) {

278 
GCObje˘
 *
o
 = 
g
->
gøy
;

279 
	`lua_as£π
(
	`isgøy
(
o
));

280 
	`gøy2bœck
(
o
);

281 
o
->
gch
.
â
) {

282 
LUA_TTABLE
: {

283 
TabÀ
 *
h
 = 
	`gco2h
(
o
);

284 
g
->
gøy
 = 
h
->
g˛i°
;

285 i‡(
	`åavî£èbÀ
(
g
, 
h
))

286 
	`bœck2gøy
(
o
);

287  (
TabÀ
Ë+ (
TVÆue
Ë* 
h
->
sizóºay
 +

288 (
Node
Ë* 
	`sizíode
(
h
);

290 
LUA_TFUNCTION
: {

291 
Closuª
 *
˛
 = 
	`gco2˛
(
o
);

292 
g
->
gøy
 = 
˛
->
c
.
g˛i°
;

293 
	`åavî£˛osuª
(
g
, 
˛
);

294  (
˛
->
c
.
isC
Ë? 
	`sizeC˛osuª
(˛->c.
nupvÆues
) :

295 
	`sizeL˛osuª
(
˛
->
l
.
nupvÆues
);

297 
LUA_TTHREAD
: {

298 
lua_Sèã
 *
th
 = 
	`gco2th
(
o
);

299 
g
->
gøy
 = 
th
->
g˛i°
;

300 
th
->
g˛i°
 = 
g
->
gøyagaö
;

301 
g
->
gøyagaö
 = 
o
;

302 
	`bœck2gøy
(
o
);

303 
	`åavî£°ack
(
g
, 
th
);

304  (
lua_Sèã
Ë+ (
TVÆue
Ë* 
th
->
°acksize
 +

305 (
CÆlInfo
Ë* 
th
->
size_ci
;

307 
LUA_TPROTO
: {

308 
PrŸo
 *
p
 = 
	`gco2p
(
o
);

309 
g
->
gøy
 = 
p
->
g˛i°
;

310 
	`åavî£¥Ÿo
(
g
, 
p
);

311  (
PrŸo
Ë+ (
In°ru˘i⁄
Ë* 
p
->
sizecode
 +

312 (
PrŸo
 *Ë* 
p
->
sizï
 +

313 (
TVÆue
Ë* 
p
->
sizek
 +

314 (Ë* 
p
->
sizñöeöfo
 +

315 (
LocV¨
Ë* 
p
->
sizñocv¨s
 +

316 (
TSåög
 *Ë* 
p
->
sizeupvÆues
;

318 : 
	`lua_as£π
(0);  0;

320 
	}
}

323 
	$¥›ag©óŒ
 (
globÆ_Sèã
 *
g
) {

324 
g
->
gøy
Ë
	`¥›ag©em¨k
(g);

325 
	}
}

335 
	$is˛óªd
 (c⁄° 
TVÆue
 *
o
, 
iskey
) {

336 i‡(!
	`iscﬁÀ˘abÀ
(
o
))  0;

337 i‡(
	`âis°rög
(
o
)) {

338 
	`°rögm¨k
(
	`øwtsvÆue
(
o
));

341  
	`iswhôe
(
	`gcvÆue
(
o
)) ||

342 (
	`âisu£rd©a
(
o
Ë&& (!
iskey
 && 
	`isföÆized
(
	`uvÆue
(o))));

343 
	}
}

349 
	$˛óπabÀ
 (
GCObje˘
 *
l
) {

350 
l
) {

351 
TabÀ
 *
h
 = 
	`gco2h
(
l
);

352 
i
 = 
h
->
sizóºay
;

353 
	`lua_as£π
(
	`ã°bô
(
h
->
m¨ked
, 
VALUEWEAKBIT
) ||

354 
	`ã°bô
(
h
->
m¨ked
, 
KEYWEAKBIT
));

355 i‡(
	`ã°bô
(
h
->
m¨ked
, 
VALUEWEAKBIT
)) {

356 
i
--) {

357 
TVÆue
 *
o
 = &
h
->
¨øy
[
i
];

358 i‡(
	`is˛óªd
(
o
, 0))

359 
	`£äûvÆue
(
o
);

362 
i
 = 
	`sizíode
(
h
);

363 
i
--) {

364 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

365 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)) &&

366 (
	`is˛óªd
(
	`key2tvÆ
(
n
), 1Ë|| is˛óªd(
	`gvÆ
(n), 0))) {

367 
	`£äûvÆue
(
	`gvÆ
(
n
));

368 
	`ªmovì¡ry
(
n
);

371 
l
 = 
h
->
g˛i°
;

373 
	}
}

376 
	$‰ìobj
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

377 
o
->
gch
.
â
) {

378 
LUA_TPROTO
: 
	`luaF_‰ì¥Ÿo
(
L
, 
	`gco2p
(
o
)); ;

379 
LUA_TFUNCTION
: 
	`luaF_‰ì˛osuª
(
L
, 
	`gco2˛
(
o
)); ;

380 
LUA_TUPVAL
: 
	`luaF_‰ìupvÆ
(
L
, 
	`gco2uv
(
o
)); ;

381 
LUA_TTABLE
: 
	`luaH_‰ì
(
L
, 
	`gco2h
(
o
)); ;

382 
LUA_TTHREAD
: {

383 
	`lua_as£π
(
	`gco2th
(
o
Ë!
L
 && gco2th(oË!
	`G
(L)->
maöthªad
);

384 
	`luaE_‰ìthªad
(
L
, 
	`gco2th
(
o
));

387 
LUA_TSTRING
: {

388 
	`G
(
L
)->
°π
.
nu£
--;

389 
	`luaM_‰ìmem
(
L
, 
o
, 
	`size°rög
(
	`gco2ts
(o)));

392 
LUA_TUSERDATA
: {

393 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeud©a
(
	`gco2u
(o)));

396 : 
	`lua_as£π
(0);

398 
	}
}

402 
	#swìpwhﬁñi°
(
L
,
p
Ë
	`swì∂i°
(L,p,
MAX_LUMEM
)

	)

405 
GCObje˘
 **
	$swì∂i°
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
, 
lu_mem
 
cou¡
) {

406 
GCObje˘
 *
cuº
;

407 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

408 
dódmask
 = 
	`Ÿhîwhôe
(
g
);

409 (
cuº
 = *
p
Ë!
NULL
 && 
cou¡
-- > 0) {

410 i‡(
cuº
->
gch
.
â
 =
LUA_TTHREAD
)

411 
	`swìpwhﬁñi°
(
L
, &
	`gco2th
(
cuº
)->
›íupvÆ
);

412 i‡((
cuº
->
gch
.
m¨ked
 ^ 
WHITEBITS
Ë& 
dódmask
) {

413 
	`lua_as£π
(!
	`isdód
(
g
, 
cuº
Ë|| 
	`ã°bô
(cuº->
gch
.
m¨ked
, 
FIXEDBIT
));

414 
	`makewhôe
(
g
, 
cuº
);

415 
p
 = &
cuº
->
gch
.
√xt
;

418 
	`lua_as£π
(
	`isdód
(
g
, 
cuº
Ë|| 
dódmask
 =
	`bômask
(
SFIXEDBIT
));

419 *
p
 = 
cuº
->
gch
.
√xt
;

420 i‡(
cuº
 =
g
->
roŸgc
)

421 
g
->
roŸgc
 = 
cuº
->
gch
.
√xt
;

422 
	`‰ìobj
(
L
, 
cuº
);

425  
p
;

426 
	}
}

429 
	$checkSizes
 (
lua_Sèã
 *
L
) {

430 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

432 i‡(
g
->
°π
.
nu£
 < 
	`ˇ°
(
lu_öt32
, g->°π.
size
/4) &&

433 
g
->
°π
.
size
 > 
MINSTRTABSIZE
*2)

434 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
/2);

436 i‡(
	`luaZ_sizebuf„r
(&
g
->
buff
Ë> 
LUA_MINBUFFER
*2) {

437 
size_t
 
√wsize
 = 
	`luaZ_sizebuf„r
(&
g
->
buff
) / 2;

438 
	`luaZ_ªsizebuf„r
(
L
, &
g
->
buff
, 
√wsize
);

440 
	}
}

443 
	$GCTM
 (
lua_Sèã
 *
L
) {

444 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

445 
GCObje˘
 *
o
 = 
g
->
tmud©a
->
gch
.
√xt
;

446 
Ud©a
 *
ud©a
 = 
	`øwgco2u
(
o
);

447 c⁄° 
TVÆue
 *
tm
;

449 i‡(
o
 =
g
->
tmud©a
)

450 
g
->
tmud©a
 = 
NULL
;

452 
g
->
tmud©a
->
gch
.
√xt
 = 
ud©a
->
uv
.next;

453 
ud©a
->
uv
.
√xt
 = 
g
->
maöthªad
->next;

454 
g
->
maöthªad
->
√xt
 = 
o
;

455 
	`makewhôe
(
g
, 
o
);

456 
tm
 = 
	`Á°tm
(
L
, 
ud©a
->
uv
.
më©abÀ
, 
TM_GC
);

457 i‡(
tm
 !
NULL
) {

458 
lu_byã
 
ﬁdah
 = 
L
->
Ælowhook
;

459 
lu_mem
 
ﬁdt
 = 
g
->
GCthªshﬁd
;

460 
L
->
Ælowhook
 = 0;

461 
g
->
GCthªshﬁd
 = 2*g->
tŸÆbyãs
;

462 
	`£tobj2s
(
L
, L->
t›
, 
tm
);

463 
	`£tuvÆue
(
L
, L->
t›
+1, 
ud©a
);

464 
L
->
t›
 += 2;

465 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

466 
L
->
Ælowhook
 = 
ﬁdah
;

467 
g
->
GCthªshﬁd
 = 
ﬁdt
;

469 
	}
}

475 
	$luaC_ˇŒGCTM
 (
lua_Sèã
 *
L
) {

476 
	`G
(
L
)->
tmud©a
)

477 
	`GCTM
(
L
);

478 
	}
}

481 
	$luaC_‰ìÆl
 (
lua_Sèã
 *
L
) {

482 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

483 
i
;

484 
g
->
cuºítwhôe
 = 
WHITEBITS
 | 
	`bômask
(
SFIXEDBIT
);

485 
	`swìpwhﬁñi°
(
L
, &
g
->
roŸgc
);

486 
i
 = 0; i < 
g
->
°π
.
size
; i++)

487 
	`swìpwhﬁñi°
(
L
, &
g
->
°π
.
hash
[
i
]);

488 
	}
}

491 
	$m¨kmt
 (
globÆ_Sèã
 *
g
) {

492 
i
;

493 
i
=0; i<
NUM_TAGS
; i++)

494 i‡(
g
->
mt
[
i
]Ë
	`m¨kobje˘
(g, g->mt[i]);

495 
	}
}

499 
	$m¨kroŸ
 (
lua_Sèã
 *
L
) {

500 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

501 
g
->
gøy
 = 
NULL
;

502 
g
->
gøyagaö
 = 
NULL
;

503 
g
->
wók
 = 
NULL
;

504 
	`m¨kobje˘
(
g
, g->
maöthªad
);

506 
	`m¨kvÆue
(
g
, 
	`gt
(g->
maöthªad
));

507 
	`m¨kvÆue
(
g
, 
	`ªgi°ry
(
L
));

508 
	`m¨kmt
(
g
);

509 
g
->
gc°©e
 = 
GCS¥›ag©e
;

510 
	}
}

513 
	$ªm¨kupvÆs
 (
globÆ_Sèã
 *
g
) {

514 
UpVÆ
 *
uv
;

515 
uv
 = 
g
->
uvhód
.
u
.
l
.
√xt
; uv != &g->uvhead; uv = uv->u.l.next) {

516 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

517 i‡(
	`isgøy
(
	`obj2gco
(
uv
)))

518 
	`m¨kvÆue
(
g
, 
uv
->
v
);

520 
	}
}

523 
	$©omic
 (
lua_Sèã
 *
L
) {

524 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

525 
size_t
 
udsize
;

527 
	`ªm¨kupvÆs
(
g
);

529 
	`¥›ag©óŒ
(
g
);

531 
g
->
gøy
 = g->
wók
;

532 
g
->
wók
 = 
NULL
;

533 
	`lua_as£π
(!
	`iswhôe
(
	`obj2gco
(
g
->
maöthªad
)));

534 
	`m¨kobje˘
(
g
, 
L
);

535 
	`m¨kmt
(
g
);

536 
	`¥›ag©óŒ
(
g
);

538 
g
->
gøy
 = g->
gøyagaö
;

539 
g
->
gøyagaö
 = 
NULL
;

540 
	`¥›ag©óŒ
(
g
);

541 
udsize
 = 
	`luaC_£∑øãud©a
(
L
, 0);

542 
	`m¨ktmu
(
g
);

543 
	`¥›ag©óŒ
(
g
);

544 
	`˛óπabÀ
(
g
->
wók
);

546 
g
->
cuºítwhôe
 = 
	`ˇ°_byã
(
	`Ÿhîwhôe
(g));

547 
g
->
swìp°rgc
 = 0;

548 
g
->
swìpgc
 = &g->
roŸgc
;

549 
g
->
gc°©e
 = 
GCSswìp°rög
;

550 
g
->
e°im©e
 = g->
tŸÆbyãs
 - 
udsize
;

551 
	}
}

554 
l_mem
 
	$sögÀ°ï
 (
lua_Sèã
 *
L
) {

555 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

557 
g
->
gc°©e
) {

558 
GCS∑u£
: {

559 
	`m¨kroŸ
(
L
);

562 
GCS¥›ag©e
: {

563 i‡(
g
->
gøy
)

564  
	`¥›ag©em¨k
(
g
);

566 
	`©omic
(
L
);

570 
GCSswìp°rög
: {

571 
lu_mem
 
ﬁd
 = 
g
->
tŸÆbyãs
;

572 
	`swìpwhﬁñi°
(
L
, &
g
->
°π
.
hash
[g->
swìp°rgc
++]);

573 i‡(
g
->
swìp°rgc
 >g->
°π
.
size
)

574 
g
->
gc°©e
 = 
GCSswìp
;

575 
	`lua_as£π
(
ﬁd
 >
g
->
tŸÆbyãs
);

576 
g
->
e°im©e
 -
ﬁd
 - g->
tŸÆbyãs
;

577  
GCSWEEPCOST
;

579 
GCSswìp
: {

580 
lu_mem
 
ﬁd
 = 
g
->
tŸÆbyãs
;

581 
g
->
swìpgc
 = 
	`swì∂i°
(
L
, g->swìpgc, 
GCSWEEPMAX
);

582 i‡(*
g
->
swìpgc
 =
NULL
) {

583 
	`checkSizes
(
L
);

584 
g
->
gc°©e
 = 
GCSföÆize
;

586 
	`lua_as£π
(
ﬁd
 >
g
->
tŸÆbyãs
);

587 
g
->
e°im©e
 -
ﬁd
 - g->
tŸÆbyãs
;

588  
GCSWEEPMAX
*
GCSWEEPCOST
;

590 
GCSföÆize
: {

591 i‡(
g
->
tmud©a
) {

592 
	`GCTM
(
L
);

593  
GCFINALIZECOST
;

596 
g
->
gc°©e
 = 
GCS∑u£
;

597 
g
->
gcdït
 = 0;

601 : 
	`lua_as£π
(0);  0;

603 
	}
}

606 
	$luaC_°ï
 (
lua_Sèã
 *
L
) {

607 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

608 
l_mem
 
lim
 = (
GCSTEPSIZE
/100Ë* 
g
->
gc°ïmul
;

609 i‡(
lim
 == 0)

610 
lim
 = (
MAX_LUMEM
-1)/2;

611 
g
->
gcdït
 +g->
tŸÆbyãs
 - g->
GCthªshﬁd
;

613 
lim
 -
	`sögÀ°ï
(
L
);

614 i‡(
g
->
gc°©e
 =
GCS∑u£
)

616 } 
lim
 > 0);

617 i‡(
g
->
gc°©e
 !
GCS∑u£
) {

618 i‡(
g
->
gcdït
 < 
GCSTEPSIZE
)

619 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
 + 
GCSTEPSIZE
;

621 
g
->
gcdït
 -
GCSTEPSIZE
;

622 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
;

626 
	`lua_as£π
(
g
->
tŸÆbyãs
 >g->
e°im©e
);

627 
	`£âhªshﬁd
(
g
);

629 
	}
}

632 
	$luaC_fuŒgc
 (
lua_Sèã
 *
L
) {

633 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

634 i‡(
g
->
gc°©e
 <
GCS¥›ag©e
) {

636 
g
->
swìp°rgc
 = 0;

637 
g
->
swìpgc
 = &g->
roŸgc
;

639 
g
->
gøy
 = 
NULL
;

640 
g
->
gøyagaö
 = 
NULL
;

641 
g
->
wók
 = 
NULL
;

642 
g
->
gc°©e
 = 
GCSswìp°rög
;

644 
	`lua_as£π
(
g
->
gc°©e
 !
GCS∑u£
 && g->gc°©ê!
GCS¥›ag©e
);

646 
g
->
gc°©e
 !
GCSföÆize
) {

647 
	`lua_as£π
(
g
->
gc°©e
 =
GCSswìp°rög
 || g->gc°©ê=
GCSswìp
);

648 
	`sögÀ°ï
(
L
);

650 
	`m¨kroŸ
(
L
);

651 
g
->
gc°©e
 !
GCS∑u£
) {

652 
	`sögÀ°ï
(
L
);

654 
	`£âhªshﬁd
(
g
);

655 
	}
}

658 
	$luaC_b¨rõrf
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
) {

659 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

660 
	`lua_as£π
(
	`isbœck
(
o
Ë&& 
	`iswhôe
(
v
Ë&& !
	`isdód
(
g
, v) && !isdead(g, o));

661 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

662 
	`lua_as£π
(
	`ây≥
(&
o
->
gch
Ë!
LUA_TTABLE
);

664 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

665 
	`ªÆlym¨kobje˘
(
g
, 
v
);

667 
	`makewhôe
(
g
, 
o
);

668 
	}
}

671 
	$luaC_b¨rõrback
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

672 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

673 
GCObje˘
 *
o
 = 
	`obj2gco
(
t
);

674 
	`lua_as£π
(
	`isbœck
(
o
Ë&& !
	`isdód
(
g
, o));

675 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

676 
	`bœck2gøy
(
o
);

677 
t
->
g˛i°
 = 
g
->
gøyagaö
;

678 
g
->
gøyagaö
 = 
o
;

679 
	}
}

682 
	$luaC_lök
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
lu_byã
 
â
) {

683 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

684 
o
->
gch
.
√xt
 = 
g
->
roŸgc
;

685 
g
->
roŸgc
 = 
o
;

686 
o
->
gch
.
m¨ked
 = 
	`luaC_whôe
(
g
);

687 
o
->
gch
.
â
 =Åt;

688 
	}
}

691 
	$luaC_lökupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

692 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

693 
GCObje˘
 *
o
 = 
	`obj2gco
(
uv
);

694 
o
->
gch
.
√xt
 = 
g
->
roŸgc
;

695 
g
->
roŸgc
 = 
o
;

696 i‡(
	`isgøy
(
o
)) {

697 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
) {

698 
	`gøy2bœck
(
o
);

699 
	`luaC_b¨rõr
(
L
, 
uv
, uv->
v
);

702 
	`makewhôe
(
g
, 
o
);

703 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

706 
	}
}

	@lgc.h

7 #i‚de‡
lgc_h


8 
	#lgc_h


	)

11 
	~"lobje˘.h
"

17 
	#GCS∑u£
 0

	)

18 
	#GCS¥›ag©e
 1

	)

19 
	#GCSswìp°rög
 2

	)

20 
	#GCSswìp
 3

	)

21 
	#GCSföÆize
 4

	)

27 
	#ª£tbôs
(
x
,
m
Ë((xË&
	`ˇ°
(
lu_byã
, ~(m)))

	)

28 
	#£tbôs
(
x
,
m
Ë((xË|(m))

	)

29 
	#ã°bôs
(
x
,
m
Ë((xË& (m))

	)

30 
	#bômask
(
b
Ë(1<<(b))

	)

31 
	#bô2mask
(
b1
,
b2
Ë(
	`bômask
(b1Ë| bômask(b2))

	)

32 
	#l_£tbô
(
x
,
b
Ë
	`£tbôs
(x, 
	`bômask
(b))

	)

33 
	#ª£tbô
(
x
,
b
Ë
	`ª£tbôs
(x, 
	`bômask
(b))

	)

34 
	#ã°bô
(
x
,
b
Ë
	`ã°bôs
(x, 
	`bômask
(b))

	)

35 
	#£t2bôs
(
x
,
b1
,
b2
Ë
	`£tbôs
(x, (
	`bô2mask
(b1, b2)))

	)

36 
	#ª£t2bôs
(
x
,
b1
,
b2
Ë
	`ª£tbôs
(x, (
	`bô2mask
(b1, b2)))

	)

37 
	#ã°2bôs
(
x
,
b1
,
b2
Ë
	`ã°bôs
(x, (
	`bô2mask
(b1, b2)))

	)

54 
	#WHITE0BIT
 0

	)

55 
	#WHITE1BIT
 1

	)

56 
	#BLACKBIT
 2

	)

57 
	#FINALIZEDBIT
 3

	)

58 
	#KEYWEAKBIT
 3

	)

59 
	#VALUEWEAKBIT
 4

	)

60 
	#FIXEDBIT
 5

	)

61 
	#SFIXEDBIT
 6

	)

62 
	#WHITEBITS
 
	`bô2mask
(
WHITE0BIT
, 
WHITE1BIT
)

	)

65 
	#iswhôe
(
x
Ë
	`ã°2bôs
((x)->
gch
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

66 
	#isbœck
(
x
Ë
	`ã°bô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

67 
	#isgøy
(
x
Ë(!
	`isbœck
(xË&& !
	`iswhôe
(x))

	)

69 
	#Ÿhîwhôe
(
g
Ë(g->
cuºítwhôe
 ^ 
WHITEBITS
)

	)

70 
	#isdód
(
g
,
v
Ë((v)->
gch
.
m¨ked
 & 
	`Ÿhîwhôe
(gË& 
WHITEBITS
)

	)

72 
	#ch™gewhôe
(
x
Ë((x)->
gch
.
m¨ked
 ^
WHITEBITS
)

	)

73 
	#gøy2bœck
(
x
Ë
	`l_£tbô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

75 
	#vÆiswhôe
(
x
Ë(
	`iscﬁÀ˘abÀ
(xË&& 
	`iswhôe
(
	`gcvÆue
(x)))

	)

77 
	#luaC_whôe
(
g
Ë
	`ˇ°
(
lu_byã
, (g)->
cuºítwhôe
 & 
WHITEBITS
)

	)

80 
	#luaC_checkGC
(
L
) { \

81 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 - 
EXTRA_STACK
 - 1)); \

82 i‡(
	`G
(
L
)->
tŸÆbyãs
 >G(L)->
GCthªshﬁd
) \

83 
	`luaC_°ï
(
L
); }

	)

86 
	#luaC_b¨rõr
(
L
,
p
,
v
Ë{ i‡(
	`vÆiswhôe
(vË&& 
	`isbœck
(
	`obj2gco
(p))) \

87 
	`luaC_b¨rõrf
(
L
,
	`obj2gco
(
p
),
	`gcvÆue
(
v
)); }

	)

89 
	#luaC_b¨rõπ
(
L
,
t
,
v
Ë{ i‡(
	`vÆiswhôe
(vË&& 
	`isbœck
(
	`obj2gco
(t))) \

90 
	`luaC_b¨rõrback
(
L
,
t
); }

	)

92 
	#luaC_objb¨rõr
(
L
,
p
,
o
) \

93 { i‡(
	`iswhôe
(
	`obj2gco
(
o
)Ë&& 
	`isbœck
(obj2gco(
p
))) \

94 
	`luaC_b¨rõrf
(
L
,
	`obj2gco
(
p
),obj2gco(
o
)); }

	)

96 
	#luaC_objb¨rõπ
(
L
,
t
,
o
) \

97 { i‡(
	`iswhôe
(
	`obj2gco
(
o
)Ë&& 
	`isbœck
(obj2gco(
t
))Ë
	`luaC_b¨rõrback
(
L
,t); }

	)

99 
LUAI_FUNC
 
size_t
 
luaC_£∑øãud©a
 (
lua_Sèã
 *
L
, 
Æl
);

100 
LUAI_FUNC
 
luaC_ˇŒGCTM
 (
lua_Sèã
 *
L
);

101 
LUAI_FUNC
 
luaC_‰ìÆl
 (
lua_Sèã
 *
L
);

102 
LUAI_FUNC
 
luaC_°ï
 (
lua_Sèã
 *
L
);

103 
LUAI_FUNC
 
luaC_fuŒgc
 (
lua_Sèã
 *
L
);

104 
LUAI_FUNC
 
luaC_lök
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
lu_byã
 
â
);

105 
LUAI_FUNC
 
luaC_lökupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

106 
LUAI_FUNC
 
luaC_b¨rõrf
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
);

107 
LUAI_FUNC
 
luaC_b¨rõrback
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

	@linit.c

8 
	#löô_c


	)

9 
	#LUA_LIB


	)

11 
	~"lua.h
"

13 
	~"luÆib.h
"

14 
	~"œuxlib.h
"

17 c⁄° 
luaL_Reg
 
	gluÆibs
[] = {

18 {"", 
lua›í_ba£
},

19 {
LUA_LOADLIBNAME
, 
lua›í_∑ckage
},

20 {
LUA_TABLIBNAME
, 
lua›í_èbÀ
},

21 {
LUA_IOLIBNAME
, 
lua›í_io
},

22 {
LUA_OSLIBNAME
, 
lua›í_os
},

23 {
LUA_STRLIBNAME
, 
lua›í_°rög
},

24 {
LUA_MATHLIBNAME
, 
lua›í_m©h
},

25 {
LUA_DBLIBNAME
, 
lua›í_debug
},

26 {
NULL
, NULL}

30 
LUALIB_API
 
	$luaL_›ílibs
 (
lua_Sèã
 *
L
) {

31 c⁄° 
luaL_Reg
 *
lib
 = 
luÆibs
;

32 ; 
lib
->
func
;Üib++) {

33 
	`lua_pushcfun˘i⁄
(
L
, 
lib
->
func
);

34 
	`lua_push°rög
(
L
, 
lib
->
«me
);

35 
	`lua_ˇŒ
(
L
, 1, 0);

37 
	}
}

	@liolib.c

8 
	~<î∫o.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#liﬁib_c


	)

14 
	#LUA_LIB


	)

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

23 
	#IO_INPUT
 1

	)

24 
	#IO_OUTPUT
 2

	)

27 c⁄° *c⁄° 
	g‚ames
[] = {"input", "output"};

30 
	$pushªsu…
 (
lua_Sèã
 *
L
, 
i
, c⁄° *
fûíame
) {

31 
í
 = 
î∫o
;

32 i‡(
i
) {

33 
	`lua_pushboﬁón
(
L
, 1);

37 
	`lua_pushnû
(
L
);

38 i‡(
fûíame
)

39 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
í
));

41 
	`lua_pushf°rög
(
L
, "%s", 
	`°ªº‹
(
í
));

42 
	`lua_pushöãgî
(
L
, 
í
);

45 
	}
}

48 
	$fûìº‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
fûíame
) {

49 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

50 
	`luaL_¨gîr‹
(
L
, 
¨g
, 
	`lua_to°rög
(L, -1));

51 
	}
}

54 
	#t›fûe
(
L
Ë((
FILE
 **)
	`luaL_checkud©a
(L, 1, 
LUA_FILEHANDLE
))

	)

57 
	$io_ty≥
 (
lua_Sèã
 *
L
) {

58 *
ud
;

59 
	`luaL_check™y
(
L
, 1);

60 
ud
 = 
	`lua_tou£rd©a
(
L
, 1);

61 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_FILEHANDLE
);

62 i‡(
ud
 =
NULL
 || !
	`lua_gëmë©abÀ
(
L
, 1Ë|| !
	`lua_øwequÆ
(L, -2, -1))

63 
	`lua_pushnû
(
L
);

64 i‡(*((
FILE
 **)
ud
Ë=
NULL
)

65 
	`lua_pushlôîÆ
(
L
, "closed file");

67 
	`lua_pushlôîÆ
(
L
, "file");

69 
	}
}

72 
FILE
 *
	$tofûe
 (
lua_Sèã
 *
L
) {

73 
FILE
 **
f
 = 
	`t›fûe
(
L
);

74 i‡(*
f
 =
NULL
)

75 
	`luaL_îr‹
(
L
, "attemptÅo useá closed file");

76  *
f
;

77 
	}
}

86 
FILE
 **
	$√wfûe
 (
lua_Sèã
 *
L
) {

87 
FILE
 **
pf
 = (FILE **)
	`lua_√wu£rd©a
(
L
, (FILE *));

88 *
pf
 = 
NULL
;

89 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

90 
	`lua_£tmë©abÀ
(
L
, -2);

91  
pf
;

92 
	}
}

99 
	$io_p˛o£
 (
lua_Sèã
 *
L
) {

100 
FILE
 **
p
 = 
	`t›fûe
(
L
);

101 
ok
 = 
	`lua_p˛o£
(
L
, *
p
);

102 i‡(
ok
Ë*
p
 = 
NULL
;

103  
	`pushªsu…
(
L
, 
ok
, 
NULL
);

104 
	}
}

107 
	$io_f˛o£
 (
lua_Sèã
 *
L
) {

108 
FILE
 **
p
 = 
	`t›fûe
(
L
);

109 
ok
 = (
	`f˛o£
(*
p
) == 0);

110 i‡(
ok
Ë*
p
 = 
NULL
;

111  
	`pushªsu…
(
L
, 
ok
, 
NULL
);

112 
	}
}

115 
	$aux_˛o£
 (
lua_Sèã
 *
L
) {

116 
	`lua_gë„nv
(
L
, 1);

117 
	`lua_gëfõld
(
L
, -1, "__close");

118  (
	`lua_tocfun˘i⁄
(
L
, -1))(L);

119 
	}
}

122 
	$io_˛o£
 (
lua_Sèã
 *
L
) {

123 i‡(
	`lua_i¢⁄e
(
L
, 1))

124 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
IO_OUTPUT
);

125 
	`tofûe
(
L
);

126  
	`aux_˛o£
(
L
);

127 
	}
}

130 
	$io_gc
 (
lua_Sèã
 *
L
) {

131 
FILE
 *
f
 = *
	`t›fûe
(
L
);

133 i‡(
f
 !
NULL
 && f !
°dö
 && f !
°dout
 && f !
°dîr
)

134 
	`aux_˛o£
(
L
);

136 
	}
}

139 
	$io_to°rög
 (
lua_Sèã
 *
L
) {

140 
FILE
 *
f
 = *
	`t›fûe
(
L
);

141 i‡(
f
 =
NULL
)

142 
	`lua_push°rög
(
L
, "file (closed)");

144 
	`lua_pushf°rög
(
L
, "fûê(%p)", 
f
);

146 
	}
}

149 
	$io_›í
 (
lua_Sèã
 *
L
) {

150 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

151 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

152 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

153 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

154  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

155 
	}
}

158 
	$io_p›í
 (
lua_Sèã
 *
L
) {

159 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

160 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

161 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

162 *
pf
 = 
	`lua_p›í
(
L
, 
fûíame
, 
mode
);

163  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

164 
	}
}

167 
	$io_tmpfûe
 (
lua_Sèã
 *
L
) {

168 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

169 *
pf
 = 
	`tmpfûe
();

170  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, NULL) : 1;

171 
	}
}

174 
FILE
 *
	$gëiofûe
 (
lua_Sèã
 *
L
, 
födex
) {

175 
FILE
 *
f
;

176 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
födex
);

177 
f
 = *(
FILE
 **)
	`lua_tou£rd©a
(
L
, -1);

178 i‡(
f
 =
NULL
)

179 
	`luaL_îr‹
(
L
, "°™d¨d %†fûêi†˛o£d", 
‚ames
[
födex
 - 1]);

180  
f
;

181 
	}
}

184 
	$g_iofûe
 (
lua_Sèã
 *
L
, 
f
, c⁄° *
mode
) {

185 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

186 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 1);

187 i‡(
fûíame
) {

188 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

189 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

190 i‡(*
pf
 =
NULL
)

191 
	`fûìº‹
(
L
, 1, 
fûíame
);

194 
	`tofûe
(
L
);

195 
	`lua_pushvÆue
(
L
, 1);

197 
	`lua_øw£ti
(
L
, 
LUA_ENVIRONINDEX
, 
f
);

200 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
f
);

202 
	}
}

205 
	$io_öput
 (
lua_Sèã
 *
L
) {

206  
	`g_iofûe
(
L
, 
IO_INPUT
, "r");

207 
	}
}

210 
	$io_ouçut
 (
lua_Sèã
 *
L
) {

211  
	`g_iofûe
(
L
, 
IO_OUTPUT
, "w");

212 
	}
}

215 
io_ªadlöe
 (
lua_Sèã
 *
L
);

218 
	$aux_löes
 (
lua_Sèã
 *
L
, 
idx
, 
to˛o£
) {

219 
	`lua_pushvÆue
(
L
, 
idx
);

220 
	`lua_pushboﬁón
(
L
, 
to˛o£
);

221 
	`lua_pushc˛osuª
(
L
, 
io_ªadlöe
, 2);

222 
	}
}

225 
	$f_löes
 (
lua_Sèã
 *
L
) {

226 
	`tofûe
(
L
);

227 
	`aux_löes
(
L
, 1, 0);

229 
	}
}

232 
	$io_löes
 (
lua_Sèã
 *
L
) {

233 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1)) {

235 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
IO_INPUT
);

236  
	`f_löes
(
L
);

239 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

240 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

241 *
pf
 = 
	`f›í
(
fûíame
, "r");

242 i‡(*
pf
 =
NULL
)

243 
	`fûìº‹
(
L
, 1, 
fûíame
);

244 
	`aux_löes
(
L
, 
	`lua_gët›
(L), 1);

247 
	}
}

257 
	$ªad_numbî
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

258 
lua_Numbî
 
d
;

259 i‡(
	`fsˇnf
(
f
, 
LUA_NUMBER_SCAN
, &
d
) == 1) {

260 
	`lua_pushnumbî
(
L
, 
d
);

264 
	}
}

267 
	$ã°_eof
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

268 
c
 = 
	`gëc
(
f
);

269 
	`ungëc
(
c
, 
f
);

270 
	`lua_pushl°rög
(
L
, 
NULL
, 0);

271  (
c
 !
EOF
);

272 
	}
}

275 
	$ªad_löe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

276 
luaL_Buf„r
 
b
;

277 
	`luaL_bufföô
(
L
, &
b
);

279 
size_t
 
l
;

280 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

281 i‡(
	`fgës
(
p
, 
LUAL_BUFFERSIZE
, 
f
Ë=
NULL
) {

282 
	`luaL_pushªsu…
(&
b
);

283  (
	`lua_°æí
(
L
, -1) > 0);

285 
l
 = 
	`°æí
(
p
);

286 i‡(
l
 =0 || 
p
[l-1] != '\n')

287 
	`luaL_addsize
(&
b
, 
l
);

289 
	`luaL_addsize
(&
b
, 
l
 - 1);

290 
	`luaL_pushªsu…
(&
b
);

294 
	}
}

297 
	$ªad_ch¨s
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
size_t
 
n
) {

298 
size_t
 
æí
;

299 
size_t
 
ƒ
;

300 
luaL_Buf„r
 
b
;

301 
	`luaL_bufföô
(
L
, &
b
);

302 
æí
 = 
LUAL_BUFFERSIZE
;

304 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

305 i‡(
æí
 > 
n
)Ñlen =Ç;

306 
ƒ
 = 
	`‰ód
(
p
, (), 
æí
, 
f
);

307 
	`luaL_addsize
(&
b
, 
ƒ
);

308 
n
 -
ƒ
;

309 } 
n
 > 0 && 
ƒ
 =
æí
);

310 
	`luaL_pushªsu…
(&
b
);

311  (
n
 =0 || 
	`lua_°æí
(
L
, -1) > 0);

312 
	}
}

315 
	$g_ªad
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
fú°
) {

316 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

317 
suc˚ss
;

318 
n
;

319 
	`˛óªº
(
f
);

320 i‡(
«rgs
 == 0) {

321 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

322 
n
 = 
fú°
+1;

325 
	`luaL_check°ack
(
L
, 
«rgs
+
LUA_MINSTACK
, "too manyárguments");

326 
suc˚ss
 = 1;

327 
n
 = 
fú°
; 
«rgs
-- && 
suc˚ss
;Ç++) {

328 i‡(
	`lua_ty≥
(
L
, 
n
Ë=
LUA_TNUMBER
) {

329 
size_t
 
l
 = (size_t)
	`lua_toöãgî
(
L
, 
n
);

330 
suc˚ss
 = (
l
 =0Ë? 
	`ã°_eof
(
L
, 
f
Ë: 
	`ªad_ch¨s
(L, f,Ü);

333 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
n
);

334 
	`luaL_¨gcheck
(
L
, 
p
 &&Ö[0] ='*', 
n
, "invalid option");

335 
p
[1]) {

337 
suc˚ss
 = 
	`ªad_numbî
(
L
, 
f
);

340 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

343 
	`ªad_ch¨s
(
L
, 
f
, ~((
size_t
)0));

344 
suc˚ss
 = 1;

347  
	`luaL_¨gîr‹
(
L
, 
n
, "invalid format");

352 i‡(
	`„º‹
(
f
))

353  
	`pushªsu…
(
L
, 0, 
NULL
);

354 i‡(!
suc˚ss
) {

355 
	`lua_p›
(
L
, 1);

356 
	`lua_pushnû
(
L
);

358  
n
 - 
fú°
;

359 
	}
}

362 
	$io_ªad
 (
lua_Sèã
 *
L
) {

363  
	`g_ªad
(
L
, 
	`gëiofûe
(L, 
IO_INPUT
), 1);

364 
	}
}

367 
	$f_ªad
 (
lua_Sèã
 *
L
) {

368  
	`g_ªad
(
L
, 
	`tofûe
(L), 2);

369 
	}
}

372 
	$io_ªadlöe
 (
lua_Sèã
 *
L
) {

373 
FILE
 *
f
 = *(FILE **)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(1));

374 
su˚ss
;

375 i‡(
f
 =
NULL
)

376 
	`luaL_îr‹
(
L
, "file isálready closed");

377 
su˚ss
 = 
	`ªad_löe
(
L
, 
f
);

378 i‡(
	`„º‹
(
f
))

379  
	`luaL_îr‹
(
L
, "%s", 
	`°ªº‹
(
î∫o
));

380 i‡(
su˚ss
)  1;

382 i‡(
	`lua_toboﬁón
(
L
, 
	`lua_upvÆueödex
(2))) {

383 
	`lua_£â›
(
L
, 0);

384 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

385 
	`aux_˛o£
(
L
);

389 
	}
}

394 
	$g_wrôe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
¨g
) {

395 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

396 
°©us
 = 1;

397 ; 
«rgs
--; 
¨g
++) {

398 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNUMBER
) {

400 
°©us
 = status &&

401 
	`Ârötf
(
f
, 
LUA_NUMBER_FMT
, 
	`lua_t⁄umbî
(
L
, 
¨g
)) > 0;

404 
size_t
 
l
;

405 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

406 
°©us
 = sètu†&& (
	`fwrôe
(
s
, (), 
l
, 
f
) ==Ü);

409  
	`pushªsu…
(
L
, 
°©us
, 
NULL
);

410 
	}
}

413 
	$io_wrôe
 (
lua_Sèã
 *
L
) {

414  
	`g_wrôe
(
L
, 
	`gëiofûe
(L, 
IO_OUTPUT
), 1);

415 
	}
}

418 
	$f_wrôe
 (
lua_Sèã
 *
L
) {

419  
	`g_wrôe
(
L
, 
	`tofûe
(L), 2);

420 
	}
}

423 
	$f_£ek
 (
lua_Sèã
 *
L
) {

424 c⁄° 
mode
[] = {
SEEK_SET
, 
SEEK_CUR
, 
SEEK_END
};

425 c⁄° *c⁄° 
modíames
[] = {"£t", "cur", "íd", 
NULL
};

426 
FILE
 *
f
 = 
	`tofûe
(
L
);

427 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "cur", 
modíames
);

428 
off£t
 = 
	`luaL_›é⁄g
(
L
, 3, 0);

429 
›
 = 
	`f£ek
(
f
, 
off£t
, 
mode
[op]);

430 i‡(
›
)

431  
	`pushªsu…
(
L
, 0, 
NULL
);

433 
	`lua_pushöãgî
(
L
, 
	`·ñl
(
f
));

436 
	}
}

439 
	$f_£tvbuf
 (
lua_Sèã
 *
L
) {

440 c⁄° 
mode
[] = {
_IONBF
, 
_IOFBF
, 
_IOLBF
};

441 c⁄° *c⁄° 
modíames
[] = {"no", "fuŒ", "löe", 
NULL
};

442 
FILE
 *
f
 = 
	`tofûe
(
L
);

443 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, 
NULL
, 
modíames
);

444 
lua_I¡egî
 
sz
 = 
	`luaL_›töãgî
(
L
, 3, 
LUAL_BUFFERSIZE
);

445 
ªs
 = 
	`£tvbuf
(
f
, 
NULL
, 
mode
[
›
], 
sz
);

446  
	`pushªsu…
(
L
, 
ªs
 =0, 
NULL
);

447 
	}
}

451 
	$io_Êush
 (
lua_Sèã
 *
L
) {

452  
	`pushªsu…
(
L
, 
	`fÊush
(
	`gëiofûe
(L, 
IO_OUTPUT
)Ë=0, 
NULL
);

453 
	}
}

456 
	$f_Êush
 (
lua_Sèã
 *
L
) {

457  
	`pushªsu…
(
L
, 
	`fÊush
(
	`tofûe
(L)Ë=0, 
NULL
);

458 
	}
}

461 c⁄° 
luaL_Reg
 
	giﬁib
[] = {

462 {"˛o£", 
io_˛o£
},

463 {"Êush", 
io_Êush
},

464 {"öput", 
io_öput
},

465 {"löes", 
io_löes
},

466 {"›í", 
io_›í
},

467 {"ouçut", 
io_ouçut
},

468 {"p›í", 
io_p›í
},

469 {"ªad", 
io_ªad
},

470 {"tmpfûe", 
io_tmpfûe
},

471 {"ty≥", 
io_ty≥
},

472 {"wrôe", 
io_wrôe
},

473 {
NULL
, NULL}

477 c⁄° 
luaL_Reg
 
	gÊib
[] = {

478 {"˛o£", 
io_˛o£
},

479 {"Êush", 
f_Êush
},

480 {"löes", 
f_löes
},

481 {"ªad", 
f_ªad
},

482 {"£ek", 
f_£ek
},

483 {"£tvbuf", 
f_£tvbuf
},

484 {"wrôe", 
f_wrôe
},

485 {"__gc", 
io_gc
},

486 {"__to°rög", 
io_to°rög
},

487 {
NULL
, NULL}

491 
	$¸óãmëa
 (
lua_Sèã
 *
L
) {

492 
	`luaL_√wmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

493 
	`lua_pushvÆue
(
L
, -1);

494 
	`lua_£tfõld
(
L
, -2, "__index");

495 
	`luaL_ªgi°î
(
L
, 
NULL
, 
Êib
);

496 
	}
}

499 
	$¸óã°dfûe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
k
, c⁄° *
‚ame
) {

500 *
	`√wfûe
(
L
Ë
f
;

501 i‡(
k
 > 0) {

502 
	`lua_pushvÆue
(
L
, -1);

503 
	`lua_øw£ti
(
L
, 
LUA_ENVIRONINDEX
, 
k
);

505 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

506 
	}
}

509 
LUALIB_API
 
	$lua›í_io
 (
lua_Sèã
 *
L
) {

510 
	`¸óãmëa
(
L
);

512 
	`lua_¸óãèbÀ
(
L
, 2, 1);

513 
	`lua_ª∂a˚
(
L
, 
LUA_ENVIRONINDEX
);

515 
	`luaL_ªgi°î
(
L
, 
LUA_IOLIBNAME
, 
iﬁib
);

517 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

518 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

519 
	`¸óã°dfûe
(
L
, 
°dîr
, 0, "stderr");

521 
	`lua_gëfõld
(
L
, -1, "popen");

522 
	`lua_¸óãèbÀ
(
L
, 0, 1);

523 
	`lua_pushcfun˘i⁄
(
L
, 
io_p˛o£
);

524 
	`lua_£tfõld
(
L
, -2, "__close");

525 
	`lua_£t„nv
(
L
, -2);

526 
	`lua_p›
(
L
, 1);

528 
	`lua_pushcfun˘i⁄
(
L
, 
io_f˛o£
);

529 
	`lua_£tfõld
(
L
, 
LUA_ENVIRONINDEX
, "__close");

531 
	}
}

	@llex.c

8 
	~<˘y≥.h
>

9 
	~<loˇÀ.h
>

10 
	~<°rög.h
>

12 
	#Œex_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldo.h
"

18 
	~"Œex.h
"

19 
	~"lobje˘.h
"

20 
	~"Õ¨£r.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"lzio.h
"

27 
	#√xt
(
ls
Ë÷s->
cuºít
 = 
	`zgëc
÷s->
z
))

	)

32 
	#cuºIsNewlöe
(
ls
Ë÷s->
cuºít
 ='\n' ||Üs->cuºíà='\r')

	)

36 c⁄° *c⁄° 
	gluaX_tokís
 [] = {

43 
NULL


47 
	#ßve_™d_√xt
(
ls
Ë(
	`ßve
÷s,Üs->
cuºít
), 
	`√xt
÷s))

	)

50 
	$ßve
 (
LexSèã
 *
ls
, 
c
) {

51 
Mbuf„r
 *
b
 = 
ls
->
buff
;

52 i‡(
b
->
n
 + 1 > b->
buffsize
) {

53 
size_t
 
√wsize
;

54 i‡(
b
->
buffsize
 >
MAX_SIZET
/2)

55 
	`luaX_Àxîr‹
(
ls
, "lexicalÉlementÅooÜong", 0);

56 
√wsize
 = 
b
->
buffsize
 * 2;

57 
	`luaZ_ªsizebuf„r
(
ls
->
L
, 
b
, 
√wsize
);

59 
b
->
buf„r
[b->
n
++] = 
	`ˇ°
(, 
c
);

60 
	}
}

63 
	$luaX_öô
 (
lua_Sèã
 *
L
) {

64 
i
;

65 
i
=0; i<
NUM_RESERVED
; i++) {

66 
TSåög
 *
ts
 = 
	`luaS_√w
(
L
, 
luaX_tokís
[
i
]);

67 
	`luaS_fix
(
ts
);

68 
	`lua_as£π
(
	`°æí
(
luaX_tokís
[
i
])+1 <
TOKEN_LEN
);

69 
ts
->
tsv
.
ª£rved
 = 
	`ˇ°_byã
(
i
+1);

71 
	}
}

74 
	#MAXSRC
 80

	)

77 c⁄° *
	$luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
) {

78 i‡(
tokí
 < 
FIRST_RESERVED
) {

79 
	`lua_as£π
(
tokí
 =
	`ˇ°
(,Åoken));

80  (
	`is˙ål
(
tokí
)Ë? 
	`luaO_pushf°rög
(
ls
->
L
, "char(%d)",Åoken) :

81 
	`luaO_pushf°rög
(
ls
->
L
, "%c", 
tokí
);

84  
luaX_tokís
[
tokí
-
FIRST_RESERVED
];

85 
	}
}

88 c⁄° *
	$txtTokí
 (
LexSèã
 *
ls
, 
tokí
) {

89 
tokí
) {

90 
TK_NAME
:

91 
TK_STRING
:

92 
TK_NUMBER
:

93 
	`ßve
(
ls
, '\0');

94  
	`luaZ_buf„r
(
ls
->
buff
);

96  
	`luaX_tokí2°r
(
ls
, 
tokí
);

98 
	}
}

101 
	$luaX_Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
) {

102 
buff
[
MAXSRC
];

103 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
ls
->
sour˚
), 
MAXSRC
);

104 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, "%s:%d: %s", 
buff
,Üs->
löíumbî
, msg);

105 i‡(
tokí
)

106 
	`luaO_pushf°rög
(
ls
->
L
, "%†√¨ " 
LUA_QS
, 
msg
, 
	`txtTokí
÷s, 
tokí
));

107 
	`luaD_throw
(
ls
->
L
, 
LUA_ERRSYNTAX
);

108 
	}
}

111 
	$luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

112 
	`luaX_Àxîr‹
(
ls
, 
msg
,Üs->
t
.
tokí
);

113 
	}
}

116 
TSåög
 *
	$luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
) {

117 
lua_Sèã
 *
L
 = 
ls
->L;

118 
TSåög
 *
ts
 = 
	`luaS_√wl°r
(
L
, 
°r
, 
l
);

119 
TVÆue
 *
o
 = 
	`luaH_£t°r
(
L
, 
ls
->
fs
->
h
, 
ts
);

120 i‡(
	`âi¢û
(
o
))

121 
	`£tbvÆue
(
o
, 1);

122  
ts
;

123 
	}
}

126 
	$ö˛öíumbî
 (
LexSèã
 *
ls
) {

127 
ﬁd
 = 
ls
->
cuºít
;

128 
	`lua_as£π
(
	`cuºIsNewlöe
(
ls
));

129 
	`√xt
(
ls
);

130 i‡(
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
ﬁd
)

131 
	`√xt
(
ls
);

132 i‡(++
ls
->
löíumbî
 >
MAX_INT
)

133 
	`luaX_sy¡axîr‹
(
ls
, "chunk hasÅoo manyÜines");

134 
	}
}

137 
	$luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
, 
TSåög
 *
sour˚
) {

138 
ls
->
de˝oöt
 = '.';

139 
ls
->
L
 = L;

140 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

141 
ls
->
z
 = z;

142 
ls
->
fs
 = 
NULL
;

143 
ls
->
löíumbî
 = 1;

144 
ls
->
œ°löe
 = 1;

145 
ls
->
sour˚
 = source;

146 
	`luaZ_ªsizebuf„r
(
ls
->
L
,Üs->
buff
, 
LUA_MINBUFFER
);

147 
	`√xt
(
ls
);

148 
	}
}

160 
	$check_√xt
 (
LexSèã
 *
ls
, c⁄° *
£t
) {

161 i‡(!
	`°rchr
(
£t
, 
ls
->
cuºít
))

163 
	`ßve_™d_√xt
(
ls
);

165 
	}
}

168 
	$buf‰ïœ˚
 (
LexSèã
 *
ls
, 
‰om
, 
to
) {

169 
size_t
 
n
 = 
	`luaZ_bufÊí
(
ls
->
buff
);

170 *
p
 = 
	`luaZ_buf„r
(
ls
->
buff
);

171 
n
--)

172 i‡(
p
[
n
] =
‰om
Ëp[n] = 
to
;

173 
	}
}

176 
	$åyde˝oöt
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

178 
lc⁄v
 *
cv
 = 
	`loˇÀc⁄v
();

179 
ﬁd
 = 
ls
->
de˝oöt
;

180 
ls
->
de˝oöt
 = (
cv
 ? cv->
decimÆ_poöt
[0] : '.');

181 
	`buf‰ïœ˚
(
ls
, 
ﬁd
,Üs->
de˝oöt
);

182 i‡(!
	`luaO_°r2d
(
	`luaZ_buf„r
(
ls
->
buff
), &
£möfo
->
r
)) {

184 
	`buf‰ïœ˚
(
ls
,Üs->
de˝oöt
, '.');

185 
	`luaX_Àxîr‹
(
ls
, "mÆf‹medÇumbî", 
TK_NUMBER
);

187 
	}
}

191 
	$ªad_numîÆ
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

192 
	`lua_as£π
(
	`isdigô
(
ls
->
cuºít
));

194 
	`ßve_™d_√xt
(
ls
);

195 } 
	`isdigô
(
ls
->
cuºít
) ||Üs->current == '.');

196 i‡(
	`check_√xt
(
ls
, "Ee"))

197 
	`check_√xt
(
ls
, "+-");

198 
	`iß um
(
ls
->
cuºít
) ||Üs->current == '_')

199 
	`ßve_™d_√xt
(
ls
);

200 
	`ßve
(
ls
, '\0');

201 
	`buf‰ïœ˚
(
ls
, '.',Üs->
de˝oöt
);

202 i‡(!
	`luaO_°r2d
(
	`luaZ_buf„r
(
ls
->
buff
), &
£möfo
->
r
))

203 
	`åyde˝oöt
(
ls
, 
£möfo
);

204 
	}
}

207 
	$skù_£p
 (
LexSèã
 *
ls
) {

208 
cou¡
 = 0;

209 
s
 = 
ls
->
cuºít
;

210 
	`lua_as£π
(
s
 == '[' || s == ']');

211 
	`ßve_™d_√xt
(
ls
);

212 
ls
->
cuºít
 == '=') {

213 
	`ßve_™d_√xt
(
ls
);

214 
cou¡
++;

216  (
ls
->
cuºít
 =
s
Ë? 
cou¡
 : (-count) - 1;

217 
	}
}

220 
	$ªad_l⁄g_°rög
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
, 
£p
) {

221 
c⁄t
 = 0;

222 ()(
c⁄t
);

223 
	`ßve_™d_√xt
(
ls
);

224 i‡(
	`cuºIsNewlöe
(
ls
))

225 
	`ö˛öíumbî
(
ls
);

227 
ls
->
cuºít
) {

228 
EOZ
:

229 
	`luaX_Àxîr‹
(
ls
, (
£möfo
) ? "unfinishedÜong string" :

230 "unföishedÜ⁄g commít", 
TK_EOS
);

232 #i‡
	`deföed
(
LUA_COMPAT_LSTR
)

234 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

235 
	`ßve_™d_√xt
(
ls
);

236 
c⁄t
++;

237 #i‡
LUA_COMPAT_LSTR
 == 1

238 i‡(
£p
 == 0)

239 
	`luaX_Àxîr‹
(
ls
, "nesting of [[...]] is deprecated", '[');

246 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

247 
	`ßve_™d_√xt
(
ls
);

248 #i‡
	`deföed
(
LUA_COMPAT_LSTR
) && LUA_COMPAT_LSTR == 2

249 
c⁄t
--;

250 i‡(
£p
 =0 && 
c⁄t
 >= 0) ;

252 
ídlo›
;

258 
	`ßve
(
ls
, '\n');

259 
	`ö˛öíumbî
(
ls
);

260 i‡(!
£möfo
Ë
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

264 i‡(
£möfo
Ë
	`ßve_™d_√xt
(
ls
);

265 
	`√xt
(
ls
);

268 } 
ídlo›
:

269 i‡(
£möfo
)

270 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
Ë+ (2 + 
£p
),

271 
	`luaZ_bufÊí
(
ls
->
buff
Ë- 2*(2 + 
£p
));

272 
	}
}

275 
	$ªad_°rög
 (
LexSèã
 *
ls
, 
dñ
, 
SemInfo
 *
£möfo
) {

276 
	`ßve_™d_√xt
(
ls
);

277 
ls
->
cuºít
 !
dñ
) {

278 
ls
->
cuºít
) {

279 
EOZ
:

280 
	`luaX_Àxîr‹
(
ls
, "unföished såög", 
TK_EOS
);

284 
	`luaX_Àxîr‹
(
ls
, "unföished såög", 
TK_STRING
);

287 
c
;

288 
	`√xt
(
ls
);

289 
ls
->
cuºít
) {

290 'a': 
c
 = '\a'; ;

291 'b': 
c
 = '\b'; ;

292 'f': 
c
 = '\f'; ;

293 'n': 
c
 = '\n'; ;

294 'r': 
c
 = '\r'; ;

295 't': 
c
 = '\t'; ;

296 'v': 
c
 = '\v'; ;

298 '\r': 
	`ßve
(
ls
, '\n'); 
	`ö˛öíumbî
(ls); ;

299 
EOZ
: ;

301 i‡(!
	`isdigô
(
ls
->
cuºít
))

302 
	`ßve_™d_√xt
(
ls
);

304 
i
 = 0;

305 
c
 = 0;

307 
c
 = 10*¯+ (
ls
->
cuºít
-'0');

308 
	`√xt
(
ls
);

309 } ++
i
<3 && 
	`isdigô
(
ls
->
cuºít
));

310 i‡(
c
 > 
UCHAR_MAX
)

311 
	`luaX_Àxîr‹
(
ls
, "esˇ≥ sequí˚Åoÿœrge", 
TK_STRING
);

312 
	`ßve
(
ls
, 
c
);

317 
	`ßve
(
ls
, 
c
);

318 
	`√xt
(
ls
);

322 
	`ßve_™d_√xt
(
ls
);

325 
	`ßve_™d_√xt
(
ls
);

326 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
) + 1,

327 
	`luaZ_bufÊí
(
ls
->
buff
) - 2);

328 
	}
}

331 
	$Œex
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

332 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

334 
ls
->
cuºít
) {

337 
	`ö˛öíumbî
(
ls
);

341 
	`√xt
(
ls
);

342 i‡(
ls
->
cuºít
 != '-')  '-';

344 
	`√xt
(
ls
);

345 i‡(
ls
->
cuºít
 == '[') {

346 
£p
 = 
	`skù_£p
(
ls
);

347 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

348 i‡(
£p
 >= 0) {

349 
	`ªad_l⁄g_°rög
(
ls
, 
NULL
, 
£p
);

350 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

355 !
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
EOZ
)

356 
	`√xt
(
ls
);

360 
£p
 = 
	`skù_£p
(
ls
);

361 i‡(
£p
 >= 0) {

362 
	`ªad_l⁄g_°rög
(
ls
, 
£möfo
, 
£p
);

363  
TK_STRING
;

365 i‡(
£p
 == -1)  '[';

366 
	`luaX_Àxîr‹
(
ls
, "övÆidÜ⁄g såög dñimôî", 
TK_STRING
);

369 
	`√xt
(
ls
);

370 i‡(
ls
->
cuºít
 != '=')  '=';

371 { 
	`√xt
(
ls
);  
TK_EQ
; }

374 
	`√xt
(
ls
);

375 i‡(
ls
->
cuºít
 != '=')  '<';

376 { 
	`√xt
(
ls
);  
TK_LE
; }

379 
	`√xt
(
ls
);

380 i‡(
ls
->
cuºít
 != '=')  '>';

381 { 
	`√xt
(
ls
);  
TK_GE
; }

384 
	`√xt
(
ls
);

385 i‡(
ls
->
cuºít
 != '=')  '~';

386 { 
	`√xt
(
ls
);  
TK_NE
; }

390 
	`ªad_°rög
(
ls
,Üs->
cuºít
, 
£möfo
);

391  
TK_STRING
;

394 
	`ßve_™d_√xt
(
ls
);

395 i‡(
	`check_√xt
(
ls
, ".")) {

396 i‡(
	`check_√xt
(
ls
, "."))

397  
TK_DOTS
;

398  
TK_CONCAT
;

400 i‡(!
	`isdigô
(
ls
->
cuºít
))  '.';

402 
	`ªad_numîÆ
(
ls
, 
£möfo
);

403  
TK_NUMBER
;

406 
EOZ
: {

407  
TK_EOS
;

410 i‡(
	`is•a˚
(
ls
->
cuºít
)) {

411 
	`lua_as£π
(!
	`cuºIsNewlöe
(
ls
));

412 
	`√xt
(
ls
);

415 i‡(
	`isdigô
(
ls
->
cuºít
)) {

416 
	`ªad_numîÆ
(
ls
, 
£möfo
);

417  
TK_NUMBER
;

419 i‡(
	`ißÕha
(
ls
->
cuºít
) ||Üs->current == '_') {

421 
TSåög
 *
ts
;

423 
	`ßve_™d_√xt
(
ls
);

424 } 
	`iß um
(
ls
->
cuºít
) ||Üs->current == '_');

425 
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
),

426 
	`luaZ_bufÊí
(
ls
->
buff
));

427 i‡(
ts
->
tsv
.
ª£rved
 > 0)

428  
ts
->
tsv
.
ª£rved
 - 1 + 
FIRST_RESERVED
;

430 
£möfo
->
ts
 =Ås;

431  
TK_NAME
;

435 
c
 = 
ls
->
cuºít
;

436 
	`√xt
(
ls
);

437  
c
;

442 
	}
}

445 
	$luaX_√xt
 (
LexSèã
 *
ls
) {

446 
ls
->
œ°löe
 =Üs->
löíumbî
;

447 i‡(
ls
->
lookahód
.
tokí
 !
TK_EOS
) {

448 
ls
->
t
 =Üs->
lookahód
;

449 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

452 
ls
->
t
.
tokí
 = 
	`Œex
÷s, &ls->t.
£möfo
);

453 
	}
}

456 
	$luaX_lookahód
 (
LexSèã
 *
ls
) {

457 
	`lua_as£π
(
ls
->
lookahód
.
tokí
 =
TK_EOS
);

458 
ls
->
lookahód
.
tokí
 = 
	`Œex
÷s, &ls->lookahód.
£möfo
);

459 
	}
}

	@llex.h

7 #i‚de‡
Œex_h


8 
	#Œex_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
	#FIRST_RESERVED
 257

	)

17 
	#TOKEN_LEN
 (("fun˘i⁄")/())

	)

24 
	eRESERVED
 {

26 
	mTK_AND
 = 
FIRST_RESERVED
, 
	mTK_BREAK
,

27 
	mTK_DO
, 
	mTK_ELSE
, 
	mTK_ELSEIF
, 
	mTK_END
, 
	mTK_FALSE
, 
	mTK_FOR
, 
	mTK_FUNCTION
,

28 
	mTK_IF
, 
	mTK_IN
, 
	mTK_LOCAL
, 
	mTK_NIL
, 
	mTK_NOT
, 
	mTK_OR
, 
	mTK_REPEAT
,

29 
	mTK_RETURN
, 
	mTK_THEN
, 
	mTK_TRUE
, 
	mTK_UNTIL
, 
	mTK_WHILE
,

31 
	mTK_CONCAT
, 
	mTK_DOTS
, 
	mTK_EQ
, 
	mTK_GE
, 
	mTK_LE
, 
	mTK_NE
, 
	mTK_NUMBER
,

32 
	mTK_NAME
, 
	mTK_STRING
, 
	mTK_EOS


36 
	#NUM_RESERVED
 (
	`ˇ°
(, 
TK_WHILE
-
FIRST_RESERVED
+1))

	)

40 
LUAI_DATA
 c⁄° *c⁄° 
	gluaX_tokís
 [];

44 
lua_Numbî
 
	mr
;

45 
TSåög
 *
	mts
;

46 } 
	tSemInfo
;

49 
	sTokí
 {

50 
	mtokí
;

51 
SemInfo
 
	m£möfo
;

52 } 
	tTokí
;

55 
	sLexSèã
 {

56 
	mcuºít
;

57 
	mlöíumbî
;

58 
	mœ°löe
;

59 
Tokí
 
	mt
;

60 
Tokí
 
	mlookahód
;

61 
FuncSèã
 *
	mfs
;

62 
lua_Sèã
 *
	mL
;

63 
ZIO
 *
	mz
;

64 
Mbuf„r
 *
	mbuff
;

65 
TSåög
 *
	msour˚
;

66 
	mde˝oöt
;

67 } 
	tLexSèã
;

70 
LUAI_FUNC
 
luaX_öô
 (
lua_Sèã
 *
L
);

71 
LUAI_FUNC
 
luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
LS
, 
ZIO
 *
z
,

72 
TSåög
 *
sour˚
);

73 
LUAI_FUNC
 
TSåög
 *
luaX_√w°rög
 (
LexSèã
 *
LS
, c⁄° *
°r
, 
size_t
 
l
);

74 
LUAI_FUNC
 
luaX_√xt
 (
LexSèã
 *
ls
);

75 
LUAI_FUNC
 
luaX_lookahód
 (
LexSèã
 *
ls
);

76 
LUAI_FUNC
 
luaX_Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
);

77 
LUAI_FUNC
 
luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
s
);

78 
LUAI_FUNC
 c⁄° *
luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
);

	@llimits.h

7 #i‚de‡
Œimôs_h


8 
	#Œimôs_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

15 
	~"lua.h
"

18 
LUAI_UINT32
 
	tlu_öt32
;

20 
LUAI_UMEM
 
	tlu_mem
;

22 
LUAI_MEM
 
	tl_mem
;

27 
	tlu_byã
;

30 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0)-2)

	)

32 
	#MAX_LUMEM
 ((
lu_mem
)(~÷u_mem)0)-2)

	)

35 
	#MAX_INT
 (
INT_MAX
-2Ë

	)

42 
	#I¡Poöt
(
p
Ë(()(
lu_mem
)’))

	)

47 
LUAI_USER_ALIGNMENT_T
 
	tL_UmaxÆign
;

51 
LUAI_UACNUMBER
 
	tl_uacNumbî
;

55 #ifde‡
lua_as£π


57 
	#check_exp
(
c
,
e
Ë(
	`lua_as£π
(c), (e))

	)

58 
	#≠i_check
(
l
,
e
Ë
	`lua_as£π
”)

	)

62 
	#lua_as£π
(
c
Ë(()0)

	)

63 
	#check_exp
(
c
,
e
Ë”)

	)

64 
	#≠i_check
 
luai_≠icheck


	)

69 #i‚de‡
UNUSED


70 
	#UNUSED
(
x
Ë(()(x)Ë

	)

74 #i‚de‡
ˇ°


75 
	#ˇ°
(
t
, 
exp
Ë(—)”xp))

	)

78 
	#ˇ°_byã
(
i
Ë
	`ˇ°
(
lu_byã
, (i))

	)

79 
	#ˇ°_num
(
i
Ë
	`ˇ°
(
lua_Numbî
, (i))

	)

80 
	#ˇ°_öt
(
i
Ë
	`ˇ°
(, (i))

	)

88 
lu_öt32
 
	tIn°ru˘i⁄
;

93 
	#MAXSTACK
 250

	)

98 #i‚de‡
MINSTRTABSIZE


99 
	#MINSTRTABSIZE
 32

	)

104 #i‚de‡
LUA_MINBUFFER


105 
	#LUA_MINBUFFER
 32

	)

109 #i‚de‡
lua_lock


110 
	#lua_lock
(
L
Ë((Ë0)

	)

111 
	#lua_u∆ock
(
L
Ë((Ë0)

	)

114 #i‚de‡
luai_thªadyõld


115 
	#luai_thªadyõld
(
L
Ë{
	`lua_u∆ock
(L); 
	`lua_lock
(L);}

	)

122 #i‚de‡
HARDSTACKTESTS


123 
	#c⁄dh¨d°ackã°s
(
x
Ë(()0)

	)

125 
	#c⁄dh¨d°ackã°s
(
x
Ë
	)
x

	@lmathlib.c

8 
	~<°dlib.h
>

9 
	~<m©h.h
>

11 
	#lm©hlib_c


	)

12 
	#LUA_LIB


	)

14 
	~"lua.h
"

16 
	~"œuxlib.h
"

17 
	~"luÆib.h
"

20 #unde‡
PI


21 
	#PI
 (3.14159265358979323846)

	)

22 
	#RADIANS_PER_DEGREE
 (
PI
/180.0)

	)

26 
	$m©h_abs
 (
lua_Sèã
 *
L
) {

27 
	`lua_pushnumbî
(
L
, 
	`Ábs
(
	`luaL_checknumbî
(L, 1)));

29 
	}
}

31 
	$m©h_sö
 (
lua_Sèã
 *
L
) {

32 
	`lua_pushnumbî
(
L
, 
	`sö
(
	`luaL_checknumbî
(L, 1)));

34 
	}
}

36 
	$m©h_söh
 (
lua_Sèã
 *
L
) {

37 
	`lua_pushnumbî
(
L
, 
	`söh
(
	`luaL_checknumbî
(L, 1)));

39 
	}
}

41 
	$m©h_cos
 (
lua_Sèã
 *
L
) {

42 
	`lua_pushnumbî
(
L
, 
	`cos
(
	`luaL_checknumbî
(L, 1)));

44 
	}
}

46 
	$m©h_cosh
 (
lua_Sèã
 *
L
) {

47 
	`lua_pushnumbî
(
L
, 
	`cosh
(
	`luaL_checknumbî
(L, 1)));

49 
	}
}

51 
	$m©h_èn
 (
lua_Sèã
 *
L
) {

52 
	`lua_pushnumbî
(
L
, 
	`èn
(
	`luaL_checknumbî
(L, 1)));

54 
	}
}

56 
	$m©h_ènh
 (
lua_Sèã
 *
L
) {

57 
	`lua_pushnumbî
(
L
, 
	`ènh
(
	`luaL_checknumbî
(L, 1)));

59 
	}
}

61 
	$m©h_asö
 (
lua_Sèã
 *
L
) {

62 
	`lua_pushnumbî
(
L
, 
	`asö
(
	`luaL_checknumbî
(L, 1)));

64 
	}
}

66 
	$m©h_acos
 (
lua_Sèã
 *
L
) {

67 
	`lua_pushnumbî
(
L
, 
	`acos
(
	`luaL_checknumbî
(L, 1)));

69 
	}
}

71 
	$m©h_©™
 (
lua_Sèã
 *
L
) {

72 
	`lua_pushnumbî
(
L
, 
	`©™
(
	`luaL_checknumbî
(L, 1)));

74 
	}
}

76 
	$m©h_©™2
 (
lua_Sèã
 *
L
) {

77 
	`lua_pushnumbî
(
L
, 
	`©™2
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

79 
	}
}

81 
	$m©h_˚û
 (
lua_Sèã
 *
L
) {

82 
	`lua_pushnumbî
(
L
, 
	`˚û
(
	`luaL_checknumbî
(L, 1)));

84 
	}
}

86 
	$m©h_Êo‹
 (
lua_Sèã
 *
L
) {

87 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
	`luaL_checknumbî
(L, 1)));

89 
	}
}

91 
	$m©h_fmod
 (
lua_Sèã
 *
L
) {

92 
	`lua_pushnumbî
(
L
, 
	`fmod
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

94 
	}
}

96 
	$m©h_modf
 (
lua_Sèã
 *
L
) {

97 
ù
;

98 
Â
 = 
	`modf
(
	`luaL_checknumbî
(
L
, 1), &
ù
);

99 
	`lua_pushnumbî
(
L
, 
ù
);

100 
	`lua_pushnumbî
(
L
, 
Â
);

102 
	}
}

104 
	$m©h_sqπ
 (
lua_Sèã
 *
L
) {

105 
	`lua_pushnumbî
(
L
, 
	`sqπ
(
	`luaL_checknumbî
(L, 1)));

107 
	}
}

109 
	$m©h_pow
 (
lua_Sèã
 *
L
) {

110 
	`lua_pushnumbî
(
L
, 
	`pow
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

112 
	}
}

114 
	$m©h_log
 (
lua_Sèã
 *
L
) {

115 
	`lua_pushnumbî
(
L
, 
	`log
(
	`luaL_checknumbî
(L, 1)));

117 
	}
}

119 
	$m©h_log10
 (
lua_Sèã
 *
L
) {

120 
	`lua_pushnumbî
(
L
, 
	`log10
(
	`luaL_checknumbî
(L, 1)));

122 
	}
}

124 
	$m©h_exp
 (
lua_Sèã
 *
L
) {

125 
	`lua_pushnumbî
(
L
, 
	`exp
(
	`luaL_checknumbî
(L, 1)));

127 
	}
}

129 
	$m©h_deg
 (
lua_Sèã
 *
L
) {

130 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1)/
RADIANS_PER_DEGREE
);

132 
	}
}

134 
	$m©h_ød
 (
lua_Sèã
 *
L
) {

135 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1)*
RADIANS_PER_DEGREE
);

137 
	}
}

139 
	$m©h_‰exp
 (
lua_Sèã
 *
L
) {

140 
e
;

141 
	`lua_pushnumbî
(
L
, 
	`‰exp
(
	`luaL_checknumbî
(L, 1), &
e
));

142 
	`lua_pushöãgî
(
L
, 
e
);

144 
	}
}

146 
	$m©h_ldexp
 (
lua_Sèã
 *
L
) {

147 
	`lua_pushnumbî
(
L
, 
	`ldexp
(
	`luaL_checknumbî
(L, 1), 
	`luaL_checköt
(L, 2)));

149 
	}
}

153 
	$m©h_mö
 (
lua_Sèã
 *
L
) {

154 
n
 = 
	`lua_gët›
(
L
);

155 
lua_Numbî
 
dmö
 = 
	`luaL_checknumbî
(
L
, 1);

156 
i
;

157 
i
=2; i<=
n
; i++) {

158 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

159 i‡(
d
 < 
dmö
)

160 
dmö
 = 
d
;

162 
	`lua_pushnumbî
(
L
, 
dmö
);

164 
	}
}

167 
	$m©h_max
 (
lua_Sèã
 *
L
) {

168 
n
 = 
	`lua_gët›
(
L
);

169 
lua_Numbî
 
dmax
 = 
	`luaL_checknumbî
(
L
, 1);

170 
i
;

171 
i
=2; i<=
n
; i++) {

172 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

173 i‡(
d
 > 
dmax
)

174 
dmax
 = 
d
;

176 
	`lua_pushnumbî
(
L
, 
dmax
);

178 
	}
}

181 
	$m©h_øndom
 (
lua_Sèã
 *
L
) {

184 
lua_Numbî
 
r
 = (lua_Numbî)(
	`ønd
()%
RAND_MAX
) / (lua_Number)RAND_MAX;

185 
	`lua_gët›
(
L
)) {

187 
	`lua_pushnumbî
(
L
, 
r
);

191 
u
 = 
	`luaL_checköt
(
L
, 1);

192 
	`luaL_¨gcheck
(
L
, 1<=
u
, 1, "interval isÉmpty");

193 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
*
u
)+1);

197 
l
 = 
	`luaL_checköt
(
L
, 1);

198 
u
 = 
	`luaL_checköt
(
L
, 2);

199 
	`luaL_¨gcheck
(
L
, 
l
<=
u
, 2, "interval isÉmpty");

200 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
*(
u
-
l
+1))+l);

203 :  
	`luaL_îr‹
(
L
, "wrongÇumber ofárguments");

206 
	}
}

209 
	$m©h_øndom£ed
 (
lua_Sèã
 *
L
) {

210 
	`§™d
(
	`luaL_checköt
(
L
, 1));

212 
	}
}

215 c⁄° 
luaL_Reg
 
	gm©hlib
[] = {

216 {"abs", 
m©h_abs
},

217 {"acos", 
m©h_acos
},

218 {"asö", 
m©h_asö
},

219 {"©™2", 
m©h_©™2
},

220 {"©™", 
m©h_©™
},

221 {"˚û", 
m©h_˚û
},

222 {"cosh", 
m©h_cosh
},

223 {"cos", 
m©h_cos
},

224 {"deg", 
m©h_deg
},

225 {"exp", 
m©h_exp
},

226 {"Êo‹", 
m©h_Êo‹
},

227 {"fmod", 
m©h_fmod
},

228 {"‰exp", 
m©h_‰exp
},

229 {"ldexp", 
m©h_ldexp
},

230 {"log10", 
m©h_log10
},

231 {"log", 
m©h_log
},

232 {"max", 
m©h_max
},

233 {"mö", 
m©h_mö
},

234 {"modf", 
m©h_modf
},

235 {"pow", 
m©h_pow
},

236 {"ød", 
m©h_ød
},

237 {"øndom", 
m©h_øndom
},

238 {"øndom£ed", 
m©h_øndom£ed
},

239 {"söh", 
m©h_söh
},

240 {"sö", 
m©h_sö
},

241 {"sqπ", 
m©h_sqπ
},

242 {"ènh", 
m©h_ènh
},

243 {"èn", 
m©h_èn
},

244 {
NULL
, NULL}

251 
LUALIB_API
 
	$lua›í_m©h
 (
lua_Sèã
 *
L
) {

252 
	`luaL_ªgi°î
(
L
, 
LUA_MATHLIBNAME
, 
m©hlib
);

253 
	`lua_pushnumbî
(
L
, 
PI
);

254 
	`lua_£tfõld
(
L
, -2, "pi");

255 
	`lua_pushnumbî
(
L
, 
HUGE_VAL
);

256 
	`lua_£tfõld
(
L
, -2, "huge");

257 #i‡
	`deföed
(
LUA_COMPAT_MOD
)

258 
	`lua_gëfõld
(
L
, -1, "fmod");

259 
	`lua_£tfõld
(
L
, -2, "mod");

262 
	}
}

	@lmem.c

8 
	~<°ddef.h
>

10 
	#lmem_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

43 
	#MINSIZEARRAY
 4

	)

46 *
	$luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
, 
size_t
 
size_ñems
,

47 
limô
, c⁄° *
îr‹msg
) {

48 *
√wblock
;

49 
√wsize
;

50 i‡(*
size
 >
limô
/2) {

51 i‡(*
size
 >
limô
)

52 
	`luaG_ru√º‹
(
L
, 
îr‹msg
);

53 
√wsize
 = 
limô
;

56 
√wsize
 = (*
size
)*2;

57 i‡(
√wsize
 < 
MINSIZEARRAY
)

58 
√wsize
 = 
MINSIZEARRAY
;

60 
√wblock
 = 
	`luaM_ªÆlocv
(
L
, 
block
, *
size
, 
√wsize
, 
size_ñems
);

61 *
size
 = 
√wsize
;

62  
√wblock
;

63 
	}
}

66 *
	$luaM_toobig
 (
lua_Sèã
 *
L
) {

67 
	`luaG_ru√º‹
(
L
, "memoryállocationÉrror: blockÅoo big");

68  
NULL
;

69 
	}
}

76 *
	$luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
osize
, size_à
nsize
) {

77 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

78 
	`lua_as£π
((
osize
 =0Ë=(
block
 =
NULL
));

79 
block
 = (*
g
->
‰óŒoc
)(g->
ud
, block, 
osize
, 
nsize
);

80 i‡(
block
 =
NULL
 && 
nsize
 > 0)

81 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

82 
	`lua_as£π
((
nsize
 =0Ë=(
block
 =
NULL
));

83 
g
->
tŸÆbyãs
 = (g->tŸÆbyã†- 
osize
Ë+ 
nsize
;

84  
block
;

85 
	}
}

	@lmem.h

7 #i‚de‡
lmem_h


8 
	#lmem_h


	)

11 
	~<°ddef.h
>

13 
	~"Œimôs.h
"

14 
	~"lua.h
"

16 
	#MEMERRMSG
 "nŸÉnough mem‹y"

	)

19 
	#luaM_ªÆlocv
(
L
,
b
,
⁄
,
n
,
e
) \

20 ((
	`ˇ°
(
size_t
, (
n
)+1Ë<
MAX_SIZET
/(
e
)) ? \

21 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(
e
), (
n
)*(e)) : \

22 
	`luaM_toobig
(
L
))

	)

24 
	#luaM_‰ìmem
(
L
, 
b
, 
s
Ë
	`luaM_ªÆloc_
(L, (b), (s), 0)

	)

25 
	#luaM_‰ì
(
L
, 
b
Ë
	`luaM_ªÆloc_
(L, (b), (*(b)), 0)

	)

26 
	#luaM_‰ì¨øy
(
L
, 
b
, 
n
, 
t
Ë
	`luaM_ªÆlocv
(L, (b),Ç, 0, —))

	)

28 
	#luaM_mÆloc
(
L
,
t
Ë
	`luaM_ªÆloc_
(L, 
NULL
, 0, (t))

	)

29 
	#luaM_√w
(
L
,
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, —)))

	)

30 
	#luaM_√wve˘‹
(
L
,
n
,
t
) \

31 
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, 
NULL
, 0, 
n
, —)))

	)

33 
	#luaM_growve˘‹
(
L
,
v
,
√Àms
,
size
,
t
,
limô
,
e
) \

34 i‡((
√Àms
)+1 > (
size
)) \

35 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_growaux_
(
L
,v,&(
size
),—),
limô
,
e
)))

	)

37 
	#luaM_ªÆlocve˘‹
(
L
, 
v
,
ﬁdn
,
n
,
t
) \

38 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, v, 
ﬁdn
, 
n
, —))))

	)

41 
LUAI_FUNC
 *
luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
ﬁdsize
,

42 
size_t
 
size
);

43 
LUAI_FUNC
 *
luaM_toobig
 (
lua_Sèã
 *
L
);

44 
LUAI_FUNC
 *
luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
,

45 
size_t
 
size_ñem
, 
limô
,

46 c⁄° *
îr‹msg
);

	@loadlib.c

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

16 
	#lﬂdlib_c


	)

17 
	#LUA_LIB


	)

19 
	~"œuxlib.h
"

20 
	~"lobje˘.h
"

21 
	~"lua.h
"

22 
	~"luÆib.h
"

26 
	#LUA_PATH
 "LUA_PATH"

	)

27 
	#LUA_CPATH
 "LUA_CPATH"

	)

30 
	#LUA_POF
 "lua›í_"

	)

33 
	#LUA_OFSEP
 "_"

	)

36 
	#LIBPREFIX
 "LOADLIB: "

	)

38 
	#POF
 
LUA_POF


	)

39 
	#LIB_FAIL
 "›í"

	)

43 
	#ERRLIB
 1

	)

44 
	#ERRFUNC
 2

	)

46 
	#£çrogdú
(
L
Ë(()0)

	)

49 
Œ_u∆ﬂdlib
 (*
lib
);

50 *
Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
);

51 
lua_CFun˘i⁄
 
Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
);

55 #i‡
deföed
(
LUA_DL_DLOPEN
)

65 
	~<dlf˙.h
>

67 
	$Œ_u∆ﬂdlib
 (*
lib
) {

68 
	`dl˛o£
(
lib
);

69 
	}
}

72 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

73 *
lib
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
);

74 i‡(
lib
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

75  
lib
;

76 
	}
}

79 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

80 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`dlsym
(
lib
, 
sym
);

81 i‡(
f
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

82  
f
;

83 
	}
}

89 #ñi‡
deföed
(
LUA_DL_DLL
)

96 
	~<wödows.h
>

99 #unde‡
£çrogdú


101 
	$£çrogdú
 (
lua_Sèã
 *
L
) {

102 
buff
[
MAX_PATH
 + 1];

103 *
lb
;

104 
DWORD
 
nsize
 = (
buff
)/();

105 
DWORD
 
n
 = 
	`GëModuÀFûeName
(
NULL
, 
buff
, 
nsize
);

106 i‡(
n
 =0 ||Ç =
nsize
 || (
lb
 = 
	`°ºchr
(
buff
, '\\')Ë=
NULL
)

107 
	`luaL_îr‹
(
L
, "unableÅo get ModuleFileName");

109 *
lb
 = '\0';

110 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_EXECDIR
, 
buff
);

111 
	`lua_ªmove
(
L
, -2);

113 
	}
}

116 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

117 
îr‹
 = 
	`GëLa°Eº‹
();

118 
buf„r
[128];

119 i‡(
	`F‹m©Mesßge
(
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

120 
NULL
, 
îr‹
, 0, 
buf„r
, (buffer), NULL))

121 
	`lua_push°rög
(
L
, 
buf„r
);

123 
	`lua_pushf°rög
(
L
, "sy°emÉº‹ %d\n", 
îr‹
);

124 
	}
}

126 
	$Œ_u∆ﬂdlib
 (*
lib
) {

127 
	`FªeLibøry
((
HINSTANCE
)
lib
);

128 
	}
}

131 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

132 
HINSTANCE
 
lib
 = 
	`LﬂdLibøry
(
∑th
);

133 i‡(
lib
 =
NULL
Ë
	`pushîr‹
(
L
);

134  
lib
;

135 
	}
}

138 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

139 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`GëProcAddªss
((
HINSTANCE
)
lib
, 
sym
);

140 i‡(
f
 =
NULL
Ë
	`pushîr‹
(
L
);

141  
f
;

142 
	}
}

148 #ñi‡
deföed
(
LUA_DL_DYLD
)

155 
	~<mach-o/dyld.h
>

159 #unde‡
POF


160 
	#POF
 "_" 
LUA_POF


	)

163 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

164 c⁄° *
îr_°r
;

165 c⁄° *
îr_fûe
;

166 
NSLökEdôEº‹s
 
îr
;

167 
îr_num
;

168 
	`NSLökEdôEº‹
(&
îr
, &
îr_num
, &
îr_fûe
, &
îr_°r
);

169 
	`lua_push°rög
(
L
, 
îr_°r
);

170 
	}
}

173 c⁄° *
	$îr‹‰omcode
 (
NSObje˘FûeImageRëu∫Code
 
ªt
) {

174 
ªt
) {

175 
NSObje˘FûeImageI«µr›rüãFûe
:

177 
NSObje˘FûeImageArch
:

179 
NSObje˘FûeImageF‹m©
:

181 
NSObje˘FûeImageAc˚ss
:

183 
NSObje˘FûeImageFaûuª
:

187 
	}
}

190 
	$Œ_u∆ﬂdlib
 (*
lib
) {

191 
	`NSUnLökModuÀ
((
NSModuÀ
)
lib
, 
NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES
);

192 
	}
}

195 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

196 
NSObje˘FûeImage
 
img
;

197 
NSObje˘FûeImageRëu∫Code
 
ªt
;

199 if(!
	`_dyld_¥e£¡
()) {

200 
	`lua_pushlôîÆ
(
L
, "dyldÇotÖresent");

201  
NULL
;

203 
ªt
 = 
	`NSCª©eObje˘FûeImageFromFûe
(
∑th
, &
img
);

204 i‡(
ªt
 =
NSObje˘FûeImageSuc˚ss
) {

205 
NSModuÀ
 
mod
 = 
	`NSLökModuÀ
(
img
, 
∑th
, 
NSLINKMODULE_OPTION_PRIVATE
 |

206 
NSLINKMODULE_OPTION_RETURN_ON_ERROR
);

207 
	`NSDe°royObje˘FûeImage
(
img
);

208 i‡(
mod
 =
NULL
Ë
	`pushîr‹
(
L
);

209  
mod
;

211 
	`lua_push°rög
(
L
, 
	`îr‹‰omcode
(
ªt
));

212  
NULL
;

213 
	}
}

216 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

217 
NSSymbﬁ
 
nss
 = 
	`NSLookupSymbﬁInModuÀ
((
NSModuÀ
)
lib
, 
sym
);

218 i‡(
nss
 =
NULL
) {

219 
	`lua_pushf°rög
(
L
, "symbﬁ " 
LUA_QS
 "ÇŸ found", 
sym
);

220  
NULL
;

222  (
lua_CFun˘i⁄
)
	`NSAddªssOfSymbﬁ
(
nss
);

223 
	}
}

236 #unde‡
LIB_FAIL


237 
	#LIB_FAIL
 "ab£¡"

	)

240 
	#DLMSG
 "dy«mi¯libørõ†nŸÉ«bÀd; check you∏Lu®ö°Æœti⁄"

	)

243 
	$Œ_u∆ﬂdlib
 (*
lib
) {

244 ()
lib
;

245 
	}
}

248 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

249 ()
∑th
;

250 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

251  
NULL
;

252 
	}
}

255 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

256 ()
lib
; ()
sym
;

257 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

258  
NULL
;

259 
	}
}

266 **
	$Œ_ªgi°î
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

267 **
∂ib
;

268 
	`lua_pushf°rög
(
L
, "%s%s", 
LIBPREFIX
, 
∑th
);

269 
	`lua_gëèbÀ
(
L
, 
LUA_REGISTRYINDEX
);

270 i‡(!
	`lua_i¢û
(
L
, -1))

271 
∂ib
 = (**)
	`lua_tou£rd©a
(
L
, -1);

273 
	`lua_p›
(
L
, 1);

274 
∂ib
 = (**)
	`lua_√wu£rd©a
(
L
, (const *));

275 *
∂ib
 = 
NULL
;

276 
	`luaL_gëmë©abÀ
(
L
, "_LOADLIB");

277 
	`lua_£tmë©abÀ
(
L
, -2);

278 
	`lua_pushf°rög
(
L
, "%s%s", 
LIBPREFIX
, 
∑th
);

279 
	`lua_pushvÆue
(
L
, -2);

280 
	`lua_£âabÀ
(
L
, 
LUA_REGISTRYINDEX
);

282  
∂ib
;

283 
	}
}

290 
	$g˘m
 (
lua_Sèã
 *
L
) {

291 **
lib
 = (**)
	`luaL_checkud©a
(
L
, 1, "_LOADLIB");

292 i‡(*
lib
Ë
	`Œ_u∆ﬂdlib
(*lib);

293 *
lib
 = 
NULL
;

295 
	}
}

298 
	$Œ_lﬂdfunc
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, c⁄° *
sym
) {

299 **
ªg
 = 
	`Œ_ªgi°î
(
L
, 
∑th
);

300 i‡(*
ªg
 =
NULL
Ë*ªg = 
	`Œ_lﬂd
(
L
, 
∑th
);

301 i‡(*
ªg
 =
NULL
)

302  
ERRLIB
;

304 
lua_CFun˘i⁄
 
f
 = 
	`Œ_sym
(
L
, *
ªg
, 
sym
);

305 i‡(
f
 =
NULL
)

306  
ERRFUNC
;

307 
	`lua_pushcfun˘i⁄
(
L
, 
f
);

310 
	}
}

313 
	$Œ_lﬂdlib
 (
lua_Sèã
 *
L
) {

314 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

315 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

316 
°©
 = 
	`Œ_lﬂdfunc
(
L
, 
∑th
, 
öô
);

317 i‡(
°©
 == 0)

320 
	`lua_pushnû
(
L
);

321 
	`lua_ö£π
(
L
, -2);

322 
	`lua_push°rög
(
L
, (
°©
 =
ERRLIB
Ë? 
LIB_FAIL
 : "init");

325 
	}
}

336 
	$ªadabÀ
 (c⁄° *
fûíame
) {

337 
FILE
 *
f
 = 
	`f›í
(
fûíame
, "r");

338 i‡(
f
 =
NULL
)  0;

339 
	`f˛o£
(
f
);

341 
	}
}

344 c⁄° *
	$push√xâem∂©e
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

345 c⁄° *
l
;

346 *
∑th
 =*
LUA_PATHSEP
)Öath++;

347 i‡(*
∑th
 ='\0'Ë 
NULL
;

348 
l
 = 
	`°rchr
(
∑th
, *
LUA_PATHSEP
);

349 i‡(
l
 =
NULL
Ë»
∑th
 + 
	`°æí
(path);

350 
	`lua_pushl°rög
(
L
, 
∑th
, 
l
 -Öath);

351  
l
;

352 
	}
}

355 c⁄° *
	$födfûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

356 c⁄° *
≤ame
) {

357 c⁄° *
∑th
;

358 
«me
 = 
	`luaL_gsub
(
L
,Çame, ".", 
LUA_DIRSEP
);

359 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, 
≤ame
);

360 
∑th
 = 
	`lua_to°rög
(
L
, -1);

361 i‡(
∑th
 =
NULL
)

362 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("∑ckage.%s"Ë" mu° bê®°rög", 
≤ame
);

363 
	`lua_push°rög
(
L
, "");

364 (
∑th
 = 
	`push√xâem∂©e
(
L
,Ö©h)Ë!
NULL
) {

365 c⁄° *
fûíame
;

366 
fûíame
 = 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_PATH_MARK
, 
«me
);

367 i‡(
	`ªadabÀ
(
fûíame
))

368  
fûíame
;

369 
	`lua_p›
(
L
, 2);

370 
	`luaO_pushf°rög
(
L
, "\n\äÿfûê" 
LUA_QS
, 
fûíame
);

371 
	`lua_c⁄ˇt
(
L
, 2);

373  
NULL
;

374 
	}
}

377 
	$lﬂdîr‹
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
) {

378 
	`luaL_îr‹
(
L
, "îr‹Üﬂdög moduÀ " 
LUA_QS
 " from file " LUA_QS ":\n\t%s",

379 
	`lua_to°rög
(
L
, 1), 
fûíame
,Üua_tostring(L, -1));

380 
	}
}

383 
	$lﬂdî_Lua
 (
lua_Sèã
 *
L
) {

384 c⁄° *
fûíame
;

385 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

386 
fûíame
 = 
	`födfûe
(
L
, 
«me
, "path");

387 i‡(
fûíame
 =
NULL
)  1;

388 i‡(
	`luaL_lﬂdfûe
(
L
, 
fûíame
) != 0)

389 
	`lﬂdîr‹
(
L
, 
fûíame
);

391 
	}
}

394 c⁄° *
	$mkfun˙ame
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

395 c⁄° *
fun˙ame
;

396 c⁄° *
m¨k
 = 
	`°rchr
(
mod«me
, *
LUA_IGMARK
);

397 i‡(
m¨k
Ë
mod«me
 = mark + 1;

398 
fun˙ame
 = 
	`luaL_gsub
(
L
, 
mod«me
, ".", 
LUA_OFSEP
);

399 
fun˙ame
 = 
	`lua_pushf°rög
(
L
, 
POF
"%s", funcname);

400 
	`lua_ªmove
(
L
, -2);

401  
fun˙ame
;

402 
	}
}

405 
	$lﬂdî_C
 (
lua_Sèã
 *
L
) {

406 c⁄° *
fun˙ame
;

407 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

408 c⁄° *
fûíame
 = 
	`födfûe
(
L
, 
«me
, "cpath");

409 i‡(
fûíame
 =
NULL
)  1;

410 
fun˙ame
 = 
	`mkfun˙ame
(
L
, 
«me
);

411 i‡(
	`Œ_lﬂdfunc
(
L
, 
fûíame
, 
fun˙ame
) != 0)

412 
	`lﬂdîr‹
(
L
, 
fûíame
);

414 
	}
}

417 
	$lﬂdî_CroŸ
 (
lua_Sèã
 *
L
) {

418 c⁄° *
fun˙ame
;

419 c⁄° *
fûíame
;

420 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

421 c⁄° *
p
 = 
	`°rchr
(
«me
, '.');

422 
°©
;

423 i‡(
p
 =
NULL
)  0;

424 
	`lua_pushl°rög
(
L
, 
«me
, 
p
 -Çame);

425 
fûíame
 = 
	`födfûe
(
L
, 
	`lua_to°rög
(L, -1), "cpath");

426 i‡(
fûíame
 =
NULL
)  1;

427 
fun˙ame
 = 
	`mkfun˙ame
(
L
, 
«me
);

428 i‡((
°©
 = 
	`Œ_lﬂdfunc
(
L
, 
fûíame
, 
fun˙ame
)) != 0) {

429 i‡(
°©
 !
ERRFUNC
Ë
	`lﬂdîr‹
(
L
, 
fûíame
);

430 
	`luaO_pushf°rög
(
L
, "\n\äÿmoduÀ " 
LUA_QS
 " in file " LUA_QS,

431 
«me
, 
fûíame
);

435 
	}
}

438 
	$lﬂdî_¥ñﬂd
 (
lua_Sèã
 *
L
) {

439 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

440 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, "preload");

441 i‡(!
	`lua_i°abÀ
(
L
, -1))

442 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("package.preload") " must beáÅable");

443 
	`lua_gëfõld
(
L
, -1, 
«me
);

444 i‡(
	`lua_i¢û
(
L
, -1))

445 
	`luaO_pushf°rög
(
L
, "\n\äÿfõldÖackage.¥ñﬂd['%s']", 
«me
);

447 
	}
}

450 c⁄° 
	g£¡öñ_
 = 0;

451 
	#£¡öñ
 ((*)&
£¡öñ_
)

	)

454 
	$Œ_ªquúe
 (
lua_Sèã
 *
L
) {

455 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

456 
i
;

457 
	`lua_£â›
(
L
, 1);

458 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

459 
	`lua_gëfõld
(
L
, 2, 
«me
);

460 i‡(
	`lua_toboﬁón
(
L
, -1)) {

461 i‡(
	`lua_tou£rd©a
(
L
, -1Ë=
£¡öñ
)

462 
	`luaL_îr‹
(
L
, "lo› o∏¥eviou†îr‹Üﬂdög moduÀ " 
LUA_QS
, 
«me
);

466 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, "loaders");

467 i‡(!
	`lua_i°abÀ
(
L
, -1))

468 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("package.loaders") " must beáÅable");

469 
	`lua_push°rög
(
L
, "");

470 
i
=1; ; i++) {

471 
	`lua_øwgëi
(
L
, -2, 
i
);

472 i‡(
	`lua_i¢û
(
L
, -1))

473 
	`luaL_îr‹
(
L
, "moduÀ " 
LUA_QS
 "Çot found:%s",

474 
«me
, 
	`lua_to°rög
(
L
, -2));

475 
	`lua_push°rög
(
L
, 
«me
);

476 
	`lua_ˇŒ
(
L
, 1, 1);

477 i‡(
	`lua_isfun˘i⁄
(
L
, -1))

479 i‡(
	`lua_is°rög
(
L
, -1))

480 
	`lua_c⁄ˇt
(
L
, 2);

482 
	`lua_p›
(
L
, 1);

484 
	`lua_pushlightu£rd©a
(
L
, 
£¡öñ
);

485 
	`lua_£tfõld
(
L
, 2, 
«me
);

486 
	`lua_push°rög
(
L
, 
«me
);

487 
	`lua_ˇŒ
(
L
, 1, 1);

488 i‡(!
	`lua_i¢û
(
L
, -1))

489 
	`lua_£tfõld
(
L
, 2, 
«me
);

490 
	`lua_gëfõld
(
L
, 2, 
«me
);

491 i‡(
	`lua_tou£rd©a
(
L
, -1Ë=
£¡öñ
) {

492 
	`lua_pushboﬁón
(
L
, 1);

493 
	`lua_pushvÆue
(
L
, -1);

494 
	`lua_£tfõld
(
L
, 2, 
«me
);

497 
	}
}

510 
	$£t„nv
 (
lua_Sèã
 *
L
) {

511 
lua_Debug
 
¨
;

512 
	`lua_gë°ack
(
L
, 1, &
¨
);

513 
	`lua_gëöfo
(
L
, "f", &
¨
);

514 
	`lua_pushvÆue
(
L
, -2);

515 
	`lua_£t„nv
(
L
, -2);

516 
	`lua_p›
(
L
, 1);

517 
	}
}

520 
	$do›ti⁄s
 (
lua_Sèã
 *
L
, 
n
) {

521 
i
;

522 
i
 = 2; i <
n
; i++) {

523 
	`lua_pushvÆue
(
L
, 
i
);

524 
	`lua_pushvÆue
(
L
, -2);

525 
	`lua_ˇŒ
(
L
, 1, 0);

527 
	}
}

530 
	$modöô
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

531 c⁄° *
dŸ
;

532 
	`lua_pushvÆue
(
L
, -1);

533 
	`lua_£tfõld
(
L
, -2, "_M");

534 
	`lua_push°rög
(
L
, 
mod«me
);

535 
	`lua_£tfõld
(
L
, -2, "_NAME");

536 
dŸ
 = 
	`°ºchr
(
mod«me
, '.');

537 i‡(
dŸ
 =
NULL
ËdŸ = 
mod«me
;

538 
dŸ
++;

540 
	`lua_pushl°rög
(
L
, 
mod«me
, 
dŸ
 - modname);

541 
	`lua_£tfõld
(
L
, -2, "_PACKAGE");

542 
	}
}

545 
	$Œ_moduÀ
 (
lua_Sèã
 *
L
) {

546 c⁄° *
mod«me
 = 
	`luaL_check°rög
(
L
, 1);

547 
lﬂded
 = 
	`lua_gët›
(
L
) + 1;

548 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

549 
	`lua_gëfõld
(
L
, 
lﬂded
, 
mod«me
);

550 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

551 
	`lua_p›
(
L
, 1);

553 i‡(
	`luaL_födèbÀ
(
L
, 
LUA_GLOBALSINDEX
, 
mod«me
, 1Ë!
NULL
)

554  
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ " 
LUA_QS
, 
mod«me
);

555 
	`lua_pushvÆue
(
L
, -1);

556 
	`lua_£tfõld
(
L
, 
lﬂded
, 
mod«me
);

559 
	`lua_gëfõld
(
L
, -1, "_NAME");

560 i‡(!
	`lua_i¢û
(
L
, -1))

561 
	`lua_p›
(
L
, 1);

563 
	`lua_p›
(
L
, 1);

564 
	`modöô
(
L
, 
mod«me
);

566 
	`lua_pushvÆue
(
L
, -1);

567 
	`£t„nv
(
L
);

568 
	`do›ti⁄s
(
L
, 
lﬂded
 - 1);

570 
	}
}

573 
	$Œ_£óŒ
 (
lua_Sèã
 *
L
) {

574 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

575 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

576 
	`lua_¸óãèbÀ
(
L
, 0, 1);

577 
	`lua_pushvÆue
(
L
, -1);

578 
	`lua_£tmë©abÀ
(
L
, 1);

580 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

581 
	`lua_£tfõld
(
L
, -2, "__index");

583 
	}
}

591 
	#AUXMARK
 "\1"

	)

593 
	$£ç©h
 (
lua_Sèã
 *
L
, c⁄° *
fõld«me
, c⁄° *
ív«me
,

594 c⁄° *
def
) {

595 c⁄° *
∑th
 = 
	`gëív
(
ív«me
);

596 i‡(
∑th
 =
NULL
)

597 
	`lua_push°rög
(
L
, 
def
);

600 
∑th
 = 
	`luaL_gsub
(
L
,Ö©h, 
LUA_PATHSEP
 LUA_PATHSEP,

601 
LUA_PATHSEP
 
AUXMARK
 LUA_PATHSEP);

602 
	`luaL_gsub
(
L
, 
∑th
, 
AUXMARK
, 
def
);

603 
	`lua_ªmove
(
L
, -2);

605 
	`£çrogdú
(
L
);

606 
	`lua_£tfõld
(
L
, -2, 
fõld«me
);

607 
	}
}

610 c⁄° 
luaL_Reg
 
	gpk_funcs
[] = {

611 {"lﬂdlib", 
Œ_lﬂdlib
},

612 {"£óŒ", 
Œ_£óŒ
},

613 {
NULL
, NULL}

617 c⁄° 
luaL_Reg
 
	gŒ_funcs
[] = {

618 {"moduÀ", 
Œ_moduÀ
},

619 {"ªquúe", 
Œ_ªquúe
},

620 {
NULL
, NULL}

624 c⁄° 
lua_CFun˘i⁄
 
	glﬂdîs
[] =

625 {
lﬂdî_¥ñﬂd
, 
lﬂdî_Lua
, 
lﬂdî_C
, 
lﬂdî_CroŸ
, 
NULL
};

628 
LUALIB_API
 
	$lua›í_∑ckage
 (
lua_Sèã
 *
L
) {

629 
i
;

631 
	`luaL_√wmë©abÀ
(
L
, "_LOADLIB");

632 
	`lua_pushcfun˘i⁄
(
L
, 
g˘m
);

633 
	`lua_£tfõld
(
L
, -2, "__gc");

635 
	`luaL_ªgi°î
(
L
, 
LUA_LOADLIBNAME
, 
pk_funcs
);

636 #i‡
	`deföed
(
LUA_COMPAT_LOADLIB
)

637 
	`lua_gëfõld
(
L
, -1, "loadlib");

638 
	`lua_£tfõld
(
L
, 
LUA_GLOBALSINDEX
, "loadlib");

640 
	`lua_pushvÆue
(
L
, -1);

641 
	`lua_ª∂a˚
(
L
, 
LUA_ENVIRONINDEX
);

643 
	`lua_¸óãèbÀ
(
L
, 0, (
lﬂdîs
)/(loaders[0]) - 1);

645 
i
=0; 
lﬂdîs
[i] !
NULL
; i++) {

646 
	`lua_pushcfun˘i⁄
(
L
, 
lﬂdîs
[
i
]);

647 
	`lua_øw£ti
(
L
, -2, 
i
+1);

649 
	`lua_£tfõld
(
L
, -2, "loaders");

650 
	`£ç©h
(
L
, "∑th", 
LUA_PATH
, 
LUA_PATH_DEFAULT
);

651 
	`£ç©h
(
L
, "˝©h", 
LUA_CPATH
, 
LUA_CPATH_DEFAULT
);

653 
	`lua_push°rög
(
L
, 
LUA_DIRSEP
 "\n" 
LUA_PATHSEP
 "\n" 
LUA_PATH_MARK
 "\n"

654 
LUA_EXECDIR
 "\n" 
LUA_IGMARK
);

655 
	`lua_£tfõld
(
L
, -2, "config");

657 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED", 2);

658 
	`lua_£tfõld
(
L
, -2, "loaded");

660 
	`lua_√wèbÀ
(
L
);

661 
	`lua_£tfõld
(
L
, -2, "preload");

662 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

663 
	`luaL_ªgi°î
(
L
, 
NULL
, 
Œ_funcs
);

664 
	`lua_p›
(
L
, 1);

666 
	}
}

	@lobject.c

7 
	~<˘y≥.h
>

8 
	~<°d¨g.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#lobje˘_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"ldo.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"lvm.h
"

27 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
 = {{
NULL
}, 
LUA_TNIL
};

35 
	$luaO_öt2fb
 (
x
) {

36 
e
 = 0;

37 
x
 >= 16) {

38 
x
 = (x+1) >> 1;

39 
e
++;

41 i‡(
x
 < 8)  x;

42  ((
e
+1Ë<< 3Ë| (
	`ˇ°_öt
(
x
) - 8);

43 
	}
}

47 
	$luaO_fb2öt
 (
x
) {

48 
e
 = (
x
 >> 3) & 31;

49 i‡(
e
 =0Ë 
x
;

50  ((
x
 & 7)+8Ë<< (
e
 - 1);

51 
	}
}

54 
	$luaO_log2
 (
x
) {

55 c⁄° 
lu_byã
 
log_2
[256] = {

65 
l
 = -1;

66 
x
 >256Ë{ 
l
 += 8; x >>= 8; }

67  
l
 + 
log_2
[
x
];

69 
	}
}

72 
	$luaO_øwequÆObj
 (c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

73 i‡(
	`ây≥
(
t1
Ë!ây≥(
t2
))  0;

74 
	`ây≥
(
t1
)) {

75 
LUA_TNIL
:

77 
LUA_TNUMBER
:

78  
	`luai_numeq
(
	`nvÆue
(
t1
),ÇvÆue(
t2
));

79 
LUA_TBOOLEAN
:

80  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

81 
LUA_TLIGHTUSERDATA
:

82  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

84 
	`lua_as£π
(
	`iscﬁÀ˘abÀ
(
t1
));

85  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

87 
	}
}

90 
	$luaO_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
) {

91 *
íd±r
;

92 *
ªsu…
 = 
	`lua_°r2numbî
(
s
, &
íd±r
);

93 i‡(
íd±r
 =
s
)  0;

94 i‡(*
íd±r
 == 'x' || *endptr == 'X')

95 *
ªsu…
 = 
	`ˇ°_num
(
	`°πoul
(
s
, &
íd±r
, 16));

96 i‡(*
íd±r
 == '\0')  1;

97 
	`is•a˚
(
	`ˇ°
(, *
íd±r
)))Éndptr++;

98 i‡(*
íd±r
 != '\0')  0;

100 
	}
}

104 
	$push°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
) {

105 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
°r
));

106 
	`ö¸_t›
(
L
);

107 
	}
}

111 c⁄° *
	$luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
) {

112 
n
 = 1;

113 
	`push°r
(
L
, "");

115 c⁄° *
e
 = 
	`°rchr
(
fmt
, '%');

116 i‡(
e
 =
NULL
) ;

117 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, 
fmt
, 
e
-fmt));

118 
	`ö¸_t›
(
L
);

119 *(
e
+1)) {

121 c⁄° *
s
 = 
	`va_¨g
(
¨gp
, *);

122 i‡(
s
 =
NULL
) s = "(null)";

123 
	`push°r
(
L
, 
s
);

127 
buff
[2];

128 
buff
[0] = 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, ));

129 
buff
[1] = '\0';

130 
	`push°r
(
L
, 
buff
);

134 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, )));

135 
	`ö¸_t›
(
L
);

139 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, 
l_uacNumbî
)));

140 
	`ö¸_t›
(
L
);

144 
buff
[4*(*) + 8];

145 
	`•rötf
(
buff
, "%p", 
	`va_¨g
(
¨gp
, *));

146 
	`push°r
(
L
, 
buff
);

150 
	`push°r
(
L
, "%");

154 
buff
[3];

155 
buff
[0] = '%';

156 
buff
[1] = *(
e
+1);

157 
buff
[2] = '\0';

158 
	`push°r
(
L
, 
buff
);

162 
n
 += 2;

163 
fmt
 = 
e
+2;

165 
	`push°r
(
L
, 
fmt
);

166 
	`luaV_c⁄ˇt
(
L
, 
n
+1, 
	`ˇ°_öt
(L->
t›
 - L->
ba£
) - 1);

167 
L
->
t›
 -
n
;

168  
	`svÆue
(
L
->
t›
 - 1);

169 
	}
}

172 c⁄° *
	$luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

173 c⁄° *
msg
;

174 
va_li°
 
¨gp
;

175 
	`va_°¨t
(
¨gp
, 
fmt
);

176 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

177 
	`va_íd
(
¨gp
);

178  
msg
;

179 
	}
}

182 
	$luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
bufÊí
) {

183 i‡(*
sour˚
 == '=') {

184 
	`°∫˝y
(
out
, 
sour˚
+1, 
bufÊí
);

185 
out
[
bufÊí
-1] = '\0';

188 i‡(*
sour˚
 == '@') {

189 
size_t
 
l
;

190 
sour˚
++;

191 
bufÊí
 -= (" '...' ");

192 
l
 = 
	`°æí
(
sour˚
);

193 
	`°r˝y
(
out
, "");

194 i‡(
l
 > 
bufÊí
) {

195 
sour˚
 +(
l
-
bufÊí
);

196 
	`°rˇt
(
out
, "...");

198 
	`°rˇt
(
out
, 
sour˚
);

201 
size_t
 
Àn
 = 
	`°rc•n
(
sour˚
, "\n\r");

202 
bufÊí
 -= (" [string \"...\"] ");

203 i‡(
Àn
 > 
bufÊí
)Üen = bufflen;

204 
	`°r˝y
(
out
, "[string \"");

205 i‡(
sour˚
[
Àn
] != '\0') {

206 
	`°∫ˇt
(
out
, 
sour˚
, 
Àn
);

207 
	`°rˇt
(
out
, "...");

210 
	`°rˇt
(
out
, 
sour˚
);

211 
	`°rˇt
(
out
, "\"]");

214 
	}
}

	@lobject.h

8 #i‚de‡
lobje˘_h


9 
	#lobje˘_h


	)

12 
	~<°d¨g.h
>

15 
	~"Œimôs.h
"

16 
	~"lua.h
"

20 
	#LAST_TAG
 
LUA_TTHREAD


	)

22 
	#NUM_TAGS
 (
LAST_TAG
+1)

	)

28 
	#LUA_TPROTO
 (
LAST_TAG
+1)

	)

29 
	#LUA_TUPVAL
 (
LAST_TAG
+2)

	)

30 
	#LUA_TDEADKEY
 (
LAST_TAG
+3)

	)

36 
GCObje˘
 
	tGCObje˘
;

43 
	#Comm⁄Hódî
 
GCObje˘
 *
√xt
; 
lu_byã
 
â
;Üu_byã 
m¨ked


	)

49 
	sGChódî
 {

50 
	mComm⁄Hódî
;

51 } 
	tGChódî
;

60 
GCObje˘
 *
	mgc
;

61 *
	mp
;

62 
lua_Numbî
 
	mn
;

63 
	mb
;

64 } 
	tVÆue
;

71 
	#TVÆuefõlds
 
VÆue
 
vÆue
; 
â


	)

73 
	slua_TVÆue
 {

74 
	mTVÆuefõlds
;

75 } 
	tTVÆue
;

79 
	#âi¢û
(
o
Ë(
	`ây≥
(oË=
LUA_TNIL
)

	)

80 
	#âi¢umbî
(
o
Ë(
	`ây≥
(oË=
LUA_TNUMBER
)

	)

81 
	#âis°rög
(
o
Ë(
	`ây≥
(oË=
LUA_TSTRING
)

	)

82 
	#âi°abÀ
(
o
Ë(
	`ây≥
(oË=
LUA_TTABLE
)

	)

83 
	#âisfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
)

	)

84 
	#âisboﬁón
(
o
Ë(
	`ây≥
(oË=
LUA_TBOOLEAN
)

	)

85 
	#âisu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TUSERDATA
)

	)

86 
	#âi°hªad
(
o
Ë(
	`ây≥
(oË=
LUA_TTHREAD
)

	)

87 
	#âi¶ightu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TLIGHTUSERDATA
)

	)

90 
	#ây≥
(
o
Ë((o)->
â
)

	)

91 
	#gcvÆue
(
o
Ë
	`check_exp
(
	`iscﬁÀ˘abÀ
(o), (o)->
vÆue
.
gc
)

	)

92 
	#pvÆue
(
o
Ë
	`check_exp
(
	`âi¶ightu£rd©a
(o), (o)->
vÆue
.
p
)

	)

93 
	#nvÆue
(
o
Ë
	`check_exp
(
	`âi¢umbî
(o), (o)->
vÆue
.
n
)

	)

94 
	#øwtsvÆue
(
o
Ë
	`check_exp
(
	`âis°rög
(o), &(o)->
vÆue
.
gc
->
ts
)

	)

95 
	#tsvÆue
(
o
Ë(&
	`øwtsvÆue
(o)->
tsv
)

	)

96 
	#øwuvÆue
(
o
Ë
	`check_exp
(
	`âisu£rd©a
(o), &(o)->
vÆue
.
gc
->
u
)

	)

97 
	#uvÆue
(
o
Ë(&
	`øwuvÆue
(o)->
uv
)

	)

98 
	#˛vÆue
(
o
Ë
	`check_exp
(
	`âisfun˘i⁄
(o), &(o)->
vÆue
.
gc
->
˛
)

	)

99 
	#hvÆue
(
o
Ë
	`check_exp
(
	`âi°abÀ
(o), &(o)->
vÆue
.
gc
->
h
)

	)

100 
	#bvÆue
(
o
Ë
	`check_exp
(
	`âisboﬁón
(o), (o)->
vÆue
.
b
)

	)

101 
	#thvÆue
(
o
Ë
	`check_exp
(
	`âi°hªad
(o), &(o)->
vÆue
.
gc
->
th
)

	)

103 
	#l_isÁl£
(
o
Ë(
	`âi¢û
(oË|| (
	`âisboﬁón
(oË&& 
	`bvÆue
(oË=0))

	)

108 
	#checkc⁄si°ícy
(
obj
) \

109 
	`lua_as£π
(!
	`iscﬁÀ˘abÀ
(
obj
Ë|| (
	`ây≥
(objË=(obj)->
vÆue
.
gc
->
gch
.
â
))

	)

111 
	#checklivíess
(
g
,
obj
) \

112 
	`lua_as£π
(!
	`iscﬁÀ˘abÀ
(
obj
) || \

113 ((
	`ây≥
(
obj
Ë=(obj)->
vÆue
.
gc
->
gch
.
â
Ë&& !
	`isdód
(
g
, (obj)->vÆue.gc)))

	)

117 
	#£äûvÆue
(
obj
Ë((obj)->
â
=
LUA_TNIL
)

	)

119 
	#£ävÆue
(
obj
,
x
) \

120 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
n
=(
x
); i_o->
â
=
LUA_TNUMBER
; }

	)

122 
	#£çvÆue
(
obj
,
x
) \

123 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
p
=(
x
); i_o->
â
=
LUA_TLIGHTUSERDATA
; }

	)

125 
	#£tbvÆue
(
obj
,
x
) \

126 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
b
=(
x
); i_o->
â
=
LUA_TBOOLEAN
; }

	)

128 
	#£tsvÆue
(
L
,
obj
,
x
) \

129 { 
TVÆue
 *
i_o
=(
obj
); \

130 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TSTRING
; \

131 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

133 
	#£tuvÆue
(
L
,
obj
,
x
) \

134 { 
TVÆue
 *
i_o
=(
obj
); \

135 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TUSERDATA
; \

136 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

138 
	#£âhvÆue
(
L
,
obj
,
x
) \

139 { 
TVÆue
 *
i_o
=(
obj
); \

140 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TTHREAD
; \

141 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

143 
	#£t˛vÆue
(
L
,
obj
,
x
) \

144 { 
TVÆue
 *
i_o
=(
obj
); \

145 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TFUNCTION
; \

146 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

148 
	#£thvÆue
(
L
,
obj
,
x
) \

149 { 
TVÆue
 *
i_o
=(
obj
); \

150 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TTABLE
; \

151 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

153 
	#£çtvÆue
(
L
,
obj
,
x
) \

154 { 
TVÆue
 *
i_o
=(
obj
); \

155 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TPROTO
; \

156 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

161 
	#£tobj
(
L
,
obj1
,
obj2
) \

162 { c⁄° 
TVÆue
 *
o2
=(
obj2
); TVÆuê*
o1
=(
obj1
); \

163 
o1
->
vÆue
 = 
o2
->vÆue; o1->
â
=o2->tt; \

164 
	`checklivíess
(
	`G
(
L
),
o1
); }

	)

172 
	#£tobjs2s
 
£tobj


	)

174 
	#£tobj2s
 
£tobj


	)

175 
	#£tsvÆue2s
 
£tsvÆue


	)

176 
	#£thvÆue2s
 
£thvÆue


	)

177 
	#£çtvÆue2s
 
£çtvÆue


	)

179 
	#£tobjt2t
 
£tobj


	)

181 
	#£tobj2t
 
£tobj


	)

183 
	#£tobj2n
 
£tobj


	)

184 
	#£tsvÆue2n
 
£tsvÆue


	)

186 
	#£âty≥
(
obj
, 
â
Ë(
	`ây≥
(objË—t))

	)

189 
	#iscﬁÀ˘abÀ
(
o
Ë(
	`ây≥
(oË>
LUA_TSTRING
)

	)

193 
TVÆue
 *
	tStkId
;

199 
	uTSåög
 {

200 
L_UmaxÆign
 
	mdummy
;

202 
	mComm⁄Hódî
;

203 
lu_byã
 
	mª£rved
;

204 
	mhash
;

205 
size_t
 
	mÀn
;

206 } 
	mtsv
;

207 } 
	tTSåög
;

210 
	#gë°r
(
ts
Ë
	`ˇ°
(c⁄° *, (tsË+ 1)

	)

211 
	#svÆue
(
o
Ë
	`gë°r
(
	`tsvÆue
(o))

	)

215 
	uUd©a
 {

216 
L_UmaxÆign
 
	mdummy
;

218 
	mComm⁄Hódî
;

219 
TabÀ
 *
	mmë©abÀ
;

220 
TabÀ
 *
	mív
;

221 
size_t
 
	mÀn
;

222 } 
	muv
;

223 } 
	tUd©a
;

231 
	sPrŸo
 {

232 
	mComm⁄Hódî
;

233 
TVÆue
 *
	mk
;

234 
In°ru˘i⁄
 *
	mcode
;

235 
PrŸo
 **
	mp
;

236 *
	mlöeöfo
;

237 
LocV¨
 *
	mlocv¨s
;

238 
TSåög
 **
	mupvÆues
;

239 
TSåög
 *
	msour˚
;

240 
	msizeupvÆues
;

241 
	msizek
;

242 
	msizecode
;

243 
	msizñöeöfo
;

244 
	msizï
;

245 
	msizñocv¨s
;

246 
	mlöedeföed
;

247 
	mœ°löedeföed
;

248 
GCObje˘
 *
	mg˛i°
;

249 
lu_byã
 
	mnups
;

250 
lu_byã
 
	mnum∑øms
;

251 
lu_byã
 
	mis_v¨¨g
;

252 
lu_byã
 
	mmax°acksize
;

253 } 
	tPrŸo
;

257 
	#VARARG_HASARG
 1

	)

258 
	#VARARG_ISVARARG
 2

	)

259 
	#VARARG_NEEDSARG
 4

	)

262 
	sLocV¨
 {

263 
TSåög
 *
	mv¨«me
;

264 
	m°¨çc
;

265 
	mídpc
;

266 } 
	tLocV¨
;

274 
	sUpVÆ
 {

275 
	mComm⁄Hódî
;

276 
TVÆue
 *
	mv
;

278 
TVÆue
 
	mvÆue
;

280 
UpVÆ
 *
	m¥ev
;

281 
UpVÆ
 *
	m√xt
;

282 } 
	ml
;

283 } 
	mu
;

284 } 
	tUpVÆ
;

291 
	#ClosuªHódî
 \

292 
Comm⁄Hódî
; 
lu_byã
 
isC
;Üu_byã 
nupvÆues
; 
GCObje˘
 *
g˛i°
; \

293 
TabÀ
 *
ív


	)

295 
	sCClosuª
 {

296 
	mClosuªHódî
;

297 
lua_CFun˘i⁄
 
	mf
;

298 
TVÆue
 
	mupvÆue
[1];

299 } 
	tCClosuª
;

302 
	sLClosuª
 {

303 
	mClosuªHódî
;

304 
PrŸo
 *
	mp
;

305 
UpVÆ
 *
	mupvÆs
[1];

306 } 
	tLClosuª
;

309 
	uClosuª
 {

310 
CClosuª
 
	mc
;

311 
LClosuª
 
	ml
;

312 } 
	tClosuª
;

315 
	#iscfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && 
	`˛vÆue
(o)->
c
.
isC
)

	)

316 
	#isLfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && !
	`˛vÆue
(o)->
c
.
isC
)

	)

323 
	uTKey
 {

325 
	mTVÆuefõlds
;

326 
Node
 *
	m√xt
;

327 } 
	mnk
;

328 
TVÆue
 
	mtvk
;

329 } 
	tTKey
;

332 
	sNode
 {

333 
TVÆue
 
	mi_vÆ
;

334 
TKey
 
	mi_key
;

335 } 
	tNode
;

338 
	sTabÀ
 {

339 
	mComm⁄Hódî
;

340 
lu_byã
 
	mÊags
;

341 
lu_byã
 
	mlsizíode
;

342 
TabÀ
 *
	mmë©abÀ
;

343 
TVÆue
 *
	m¨øy
;

344 
Node
 *
	mnode
;

345 
Node
 *
	mœ°‰ì
;

346 
GCObje˘
 *
	mg˛i°
;

347 
	msizóºay
;

348 } 
	tTabÀ
;

355 
	#lmod
(
s
,
size
) \

356 (
	`check_exp
((
size
&(size-1))==0, (
	`ˇ°
(, (
s
Ë& ((size)-1)))))

	)

359 
	#twŸo
(
x
Ë(1<<(x))

	)

360 
	#sizíode
(
t
Ë(
	`twŸo
(—)->
lsizíode
))

	)

363 
	#luaO_nûobje˘
 (&
luaO_nûobje˘_
)

	)

365 
LUAI_DATA
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
;

367 
	#˚ûlog2
(
x
Ë(
	`luaO_log2
((x)-1Ë+ 1)

	)

369 
LUAI_FUNC
 
luaO_log2
 (
x
);

370 
LUAI_FUNC
 
luaO_öt2fb
 (
x
);

371 
LUAI_FUNC
 
luaO_fb2öt
 (
x
);

372 
LUAI_FUNC
 
luaO_øwequÆObj
 (c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

373 
LUAI_FUNC
 
luaO_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
);

374 
LUAI_FUNC
 c⁄° *
luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

375 
va_li°
 
¨gp
);

376 
LUAI_FUNC
 c⁄° *
luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

377 
LUAI_FUNC
 
luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
Àn
);

	@lopcodes.c

7 
	#l›codes_c


	)

8 
	#LUA_CORE


	)

11 
	~"l›codes.h
"

16 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1] = {

55 
NULL


59 
	#›mode
(
t
,
a
,
b
,
c
,
m
Ë((—)<<7Ë| (◊)<<6Ë| ((b)<<4Ë| ((c)<<2Ë| (m))

	)

61 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
] = {

63 
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

64 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

65 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

66 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

67 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

68 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

69 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

70 ,
›mode
(0, 0, 
OpArgK
, 
OpArgN
, 
iABx
)

71 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

72 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

73 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

74 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

75 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

76 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

77 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

78 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

79 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

80 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

81 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

82 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

83 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

84 ,
›mode
(0, 1, 
OpArgR
, OpArgR, 
iABC
)

85 ,
›mode
(0, 0, 
OpArgR
, 
OpArgN
, 
iAsBx
)

86 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

87 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

88 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

89 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

90 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

91 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

92 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

93 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

94 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

95 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

96 ,
›mode
(1, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

97 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iABC
)

98 ,
›mode
(0, 0, 
OpArgN
, OpArgN, 
iABC
)

99 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABx
)

100 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

	@lopcodes.h

7 #i‚de‡
l›codes_h


8 
	#l›codes_h


	)

10 
	~"Œimôs.h
"

31 
	eOpMode
 {
	miABC
, 
	miABx
, 
	miAsBx
};

37 
	#SIZE_C
 9

	)

38 
	#SIZE_B
 9

	)

39 
	#SIZE_Bx
 (
SIZE_C
 + 
SIZE_B
)

	)

40 
	#SIZE_A
 8

	)

42 
	#SIZE_OP
 6

	)

44 
	#POS_OP
 0

	)

45 
	#POS_A
 (
POS_OP
 + 
SIZE_OP
)

	)

46 
	#POS_C
 (
POS_A
 + 
SIZE_A
)

	)

47 
	#POS_B
 (
POS_C
 + 
SIZE_C
)

	)

48 
	#POS_Bx
 
POS_C


	)

56 #i‡
SIZE_Bx
 < 
LUAI_BITSINT
-1

57 
	#MAXARG_Bx
 ((1<<
SIZE_Bx
)-1)

	)

58 
	#MAXARG_sBx
 (
MAXARG_Bx
>>1Ë

	)

60 
	#MAXARG_Bx
 
MAX_INT


	)

61 
	#MAXARG_sBx
 
MAX_INT


	)

65 
	#MAXARG_A
 ((1<<
SIZE_A
)-1)

	)

66 
	#MAXARG_B
 ((1<<
SIZE_B
)-1)

	)

67 
	#MAXARG_C
 ((1<<
SIZE_C
)-1)

	)

71 
	#MASK1
(
n
,
p
Ë((~((~(
In°ru˘i⁄
)0)<<n))<<p)

	)

74 
	#MASK0
(
n
,
p
Ë(~
	`MASK1
“,p))

	)

80 
	#GET_OPCODE
(
i
Ë(
	`ˇ°
(
OpCode
, ((i)>>
POS_OP
Ë& 
	`MASK1
(
SIZE_OP
,0)))

	)

81 
	#SET_OPCODE
(
i
,
o
Ë((iË(((i)&
	`MASK0
(
SIZE_OP
,
POS_OP
)) | \

82 ((
	`ˇ°
(
In°ru˘i⁄
, 
o
)<<
POS_OP
)&
	`MASK1
(
SIZE_OP
,POS_OP))))

	)

84 
	#GETARG_A
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_A
Ë& 
	`MASK1
(
SIZE_A
,0)))

	)

85 
	#SETARG_A
(
i
,
u
Ë((iË(((i)&
	`MASK0
(
SIZE_A
,
POS_A
)) | \

86 ((
	`ˇ°
(
In°ru˘i⁄
, 
u
)<<
POS_A
)&
	`MASK1
(
SIZE_A
,POS_A))))

	)

88 
	#GETARG_B
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_B
Ë& 
	`MASK1
(
SIZE_B
,0)))

	)

89 
	#SETARG_B
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_B
,
POS_B
)) | \

90 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
)&
	`MASK1
(
SIZE_B
,POS_B))))

	)

92 
	#GETARG_C
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_C
Ë& 
	`MASK1
(
SIZE_C
,0)))

	)

93 
	#SETARG_C
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_C
,
POS_C
)) | \

94 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_C
)&
	`MASK1
(
SIZE_C
,POS_C))))

	)

96 
	#GETARG_Bx
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_Bx
Ë& 
	`MASK1
(
SIZE_Bx
,0)))

	)

97 
	#SETARG_Bx
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_Bx
,
POS_Bx
)) | \

98 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_Bx
)&
	`MASK1
(
SIZE_Bx
,POS_Bx))))

	)

100 
	#GETARG_sBx
(
i
Ë(
	`GETARG_Bx
(i)-
MAXARG_sBx
)

	)

101 
	#SETARG_sBx
(
i
,
b
Ë
	`SETARG_Bx
((i),
	`ˇ°
(, (b)+
MAXARG_sBx
))

	)

104 
	#CREATE_ABC
(
o
,
a
,
b
,
c
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

105 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

106 | (
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
) \

107 | (
	`ˇ°
(
In°ru˘i⁄
, 
c
)<<
POS_C
))

	)

109 
	#CREATE_ABx
(
o
,
a
,
bc
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

110 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

111 | (
	`ˇ°
(
In°ru˘i⁄
, 
bc
)<<
POS_Bx
))

	)

119 
	#BITRK
 (1 << (
SIZE_B
 - 1))

	)

122 
	#ISK
(
x
Ë((xË& 
BITRK
)

	)

125 
	#INDEXK
(
r
Ë(()‘Ë& ~
BITRK
)

	)

127 
	#MAXINDEXRK
 (
BITRK
 - 1)

	)

130 
	#RKASK
(
x
Ë((xË| 
BITRK
)

	)

136 
	#NO_REG
 
MAXARG_A


	)

154 
	mOP_MOVE
,

155 
	mOP_LOADK
,

156 
	mOP_LOADBOOL
,

157 
	mOP_LOADNIL
,

158 
	mOP_GETUPVAL
,

160 
	mOP_GETGLOBAL
,

161 
	mOP_GETTABLE
,

163 
	mOP_SETGLOBAL
,

164 
	mOP_SETUPVAL
,

165 
	mOP_SETTABLE
,

167 
	mOP_NEWTABLE
,

169 
	mOP_SELF
,

171 
	mOP_ADD
,

172 
	mOP_SUB
,

173 
	mOP_MUL
,

174 
	mOP_DIV
,

175 
	mOP_MOD
,

176 
	mOP_POW
,

177 
	mOP_UNM
,

178 
	mOP_NOT
,

179 
	mOP_LEN
,

181 
	mOP_CONCAT
,

183 
	mOP_JMP
,

185 
	mOP_EQ
,

186 
	mOP_LT
,

187 
	mOP_LE
,

189 
	mOP_TEST
,

190 
	mOP_TESTSET
,

192 
	mOP_CALL
,

193 
	mOP_TAILCALL
,

194 
	mOP_RETURN
,

196 
	mOP_FORLOOP
,

198 
	mOP_FORPREP
,

200 
	mOP_TFORLOOP
,

202 
	mOP_SETLIST
,

204 
	mOP_CLOSE
,

205 
	mOP_CLOSURE
,

207 
	mOP_VARARG


208 } 
	tOpCode
;

211 
	#NUM_OPCODES
 (
	`ˇ°
(, 
OP_VARARG
Ë+ 1)

	)

245 
	eOpArgMask
 {

246 
	mOpArgN
,

247 
	mOpArgU
,

248 
	mOpArgR
,

249 
	mOpArgK


252 
LUAI_DATA
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
];

254 
	#gëOpMode
(
m
Ë(
	`ˇ°
(
OpMode
, 
luaP_›modes
[m] & 3))

	)

255 
	#gëBMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 4Ë& 3))

	)

256 
	#gëCMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 2Ë& 3))

	)

257 
	#ã°AMode
(
m
Ë(
luaP_›modes
[m] & (1 << 6))

	)

258 
	#ã°TMode
(
m
Ë(
luaP_›modes
[m] & (1 << 7))

	)

261 
LUAI_DATA
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1];

265 
	#LFIELDS_PER_FLUSH
 50

	)

	@loslib.c

8 
	~<î∫o.h
>

9 
	~<loˇÀ.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<time.h
>

14 
	#lo¶ib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

23 
	$os_pushªsu…
 (
lua_Sèã
 *
L
, 
i
, c⁄° *
fûíame
) {

24 
í
 = 
î∫o
;

25 i‡(
i
) {

26 
	`lua_pushboﬁón
(
L
, 1);

30 
	`lua_pushnû
(
L
);

31 i‡(
fûíame
)

32 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
í
));

34 
	`lua_pushf°rög
(
L
, "%s", 
	`°ªº‹
(
í
));

35 
	`lua_pushöãgî
(
L
, 
í
);

38 
	}
}

41 
	$os_execuã
 (
lua_Sèã
 *
L
) {

42 
	`lua_pushöãgî
(
L
, 
	`sy°em
(
	`luaL_›t°rög
(L, 1, 
NULL
)));

44 
	}
}

47 
	$os_ªmove
 (
lua_Sèã
 *
L
) {

48 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

49  
	`os_pushªsu…
(
L
, 
	`ªmove
(
fûíame
) == 0, filename);

50 
	}
}

53 
	$os_ª«me
 (
lua_Sèã
 *
L
) {

54 c⁄° *
‰om«me
 = 
	`luaL_check°rög
(
L
, 1);

55 c⁄° *
t⁄ame
 = 
	`luaL_check°rög
(
L
, 2);

56  
	`os_pushªsu…
(
L
, 
	`ª«me
(
‰om«me
, 
t⁄ame
) == 0, fromname);

57 
	}
}

60 
	$os_tm≤ame
 (
lua_Sèã
 *
L
) {

61 
buff
[
LUA_TMPNAMBUFSIZE
];

62 
îr
;

63 
	`lua_tm≤am
(
buff
, 
îr
);

64 i‡(
îr
)

65  
	`luaL_îr‹
(
L
, "unableÅo generateá unique filename");

66 
	`lua_push°rög
(
L
, 
buff
);

68 
	}
}

71 
	$os_gëív
 (
lua_Sèã
 *
L
) {

72 
	`lua_push°rög
(
L
, 
	`gëív
(
	`luaL_check°rög
(L, 1)));

74 
	}
}

77 
	$os_˛ock
 (
lua_Sèã
 *
L
) {

78 
	`lua_pushnumbî
(
L
, ((
lua_Numbî
)
	`˛ock
())/÷ua_Numbî)
CLOCKS_PER_SEC
);

80 
	}
}

91 
	$£tfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

92 
	`lua_pushöãgî
(
L
, 
vÆue
);

93 
	`lua_£tfõld
(
L
, -2, 
key
);

94 
	}
}

96 
	$£tboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

97 i‡(
vÆue
 < 0)

99 
	`lua_pushboﬁón
(
L
, 
vÆue
);

100 
	`lua_£tfõld
(
L
, -2, 
key
);

101 
	}
}

103 
	$gëboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
) {

104 
ªs
;

105 
	`lua_gëfõld
(
L
, -1, 
key
);

106 
ªs
 = 
	`lua_i¢û
(
L
, -1Ë? -1 : 
	`lua_toboﬁón
(L, -1);

107 
	`lua_p›
(
L
, 1);

108  
ªs
;

109 
	}
}

112 
	$gëfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
d
) {

113 
ªs
;

114 
	`lua_gëfõld
(
L
, -1, 
key
);

115 i‡(
	`lua_i¢umbî
(
L
, -1))

116 
ªs
 = ()
	`lua_toöãgî
(
L
, -1);

118 i‡(
d
 < 0)

119  
	`luaL_îr‹
(
L
, "fõld " 
LUA_QS
 " missög i¿d©êèbÀ", 
key
);

120 
ªs
 = 
d
;

122 
	`lua_p›
(
L
, 1);

123  
ªs
;

124 
	}
}

127 
	$os_d©e
 (
lua_Sèã
 *
L
) {

128 c⁄° *
s
 = 
	`luaL_›t°rög
(
L
, 1, "%c");

129 
time_t
 
t
 = 
	`lua_i¢⁄e‹nû
(
L
, 2Ë? 
	`time
(
NULL
) :

130 (
time_t
)
	`luaL_checknumbî
(
L
, 2);

131 
tm
 *
°m
;

132 i‡(*
s
 == '!') {

133 
°m
 = 
	`gmtime
(&
t
);

134 
s
++;

137 
°m
 = 
	`loˇ…ime
(&
t
);

138 i‡(
°m
 =
NULL
)

139 
	`lua_pushnû
(
L
);

140 i‡(
	`°rcmp
(
s
, "*t") == 0) {

141 
	`lua_¸óãèbÀ
(
L
, 0, 9);

142 
	`£tfõld
(
L
, "£c", 
°m
->
tm_£c
);

143 
	`£tfõld
(
L
, "mö", 
°m
->
tm_mö
);

144 
	`£tfõld
(
L
, "hour", 
°m
->
tm_hour
);

145 
	`£tfõld
(
L
, "day", 
°m
->
tm_mday
);

146 
	`£tfõld
(
L
, "m⁄th", 
°m
->
tm_m⁄
+1);

147 
	`£tfõld
(
L
, "yór", 
°m
->
tm_yór
+1900);

148 
	`£tfõld
(
L
, "wday", 
°m
->
tm_wday
+1);

149 
	`£tfõld
(
L
, "yday", 
°m
->
tm_yday
+1);

150 
	`£tboﬁfõld
(
L
, "isd°", 
°m
->
tm_isd°
);

153 
b
[256];

154 i‡(
	`°r·ime
(
b
, (b), 
s
, 
°m
))

155 
	`lua_push°rög
(
L
, 
b
);

157  
	`luaL_îr‹
(
L
, 
	`LUA_QL
("date") " formatÅooÜong");

160 
	}
}

163 
	$os_time
 (
lua_Sèã
 *
L
) {

164 
time_t
 
t
;

165 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

166 
t
 = 
	`time
(
NULL
);

168 
tm
 
ts
;

169 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

170 
	`lua_£â›
(
L
, 1);

171 
ts
.
tm_£c
 = 
	`gëfõld
(
L
, "sec", 0);

172 
ts
.
tm_mö
 = 
	`gëfõld
(
L
, "min", 0);

173 
ts
.
tm_hour
 = 
	`gëfõld
(
L
, "hour", 12);

174 
ts
.
tm_mday
 = 
	`gëfõld
(
L
, "day", -1);

175 
ts
.
tm_m⁄
 = 
	`gëfõld
(
L
, "month", -1) - 1;

176 
ts
.
tm_yór
 = 
	`gëfõld
(
L
, "year", -1) - 1900;

177 
ts
.
tm_isd°
 = 
	`gëboﬁfõld
(
L
, "isdst");

178 
t
 = 
	`mktime
(&
ts
);

180 i‡(
t
 =(
time_t
)(-1))

181 
	`lua_pushnû
(
L
);

183 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
t
);

185 
	}
}

188 
	$os_dif·ime
 (
lua_Sèã
 *
L
) {

189 
	`lua_pushnumbî
(
L
, 
	`dif·ime
((
time_t
)(
	`luaL_checknumbî
(L, 1)),

190 (
time_t
)(
	`luaL_›äumbî
(
L
, 2, 0))));

192 
	}
}

197 
	$os_£éoˇÀ
 (
lua_Sèã
 *
L
) {

198 c⁄° 
ˇt
[] = {
LC_ALL
, 
LC_COLLATE
, 
LC_CTYPE
, 
LC_MONETARY
,

199 
LC_NUMERIC
, 
LC_TIME
};

200 c⁄° *c⁄° 
ˇäames
[] = {"all", "collate", "ctype", "monetary",

201 "numîic", "time", 
NULL
};

202 c⁄° *
l
 = 
	`lua_to°rög
(
L
, 1);

203 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "Æl", 
ˇäames
);

204 
	`luaL_¨gcheck
(
L
, 
l
 || 
	`lua_i¢⁄e‹nû
(L, 1), 1, "stringÉxpected");

205 
	`lua_push°rög
(
L
, 
	`£éoˇÀ
(
ˇt
[
›
], 
l
));

207 
	}
}

210 
	$os_exô
 (
lua_Sèã
 *
L
) {

211 
	`exô
(
	`luaL_›töt
(
L
, 1, 
EXIT_SUCCESS
));

213 
	}
}

215 c⁄° 
luaL_Reg
 
	gsy¶ib
[] = {

216 {"˛ock", 
os_˛ock
},

217 {"d©e", 
os_d©e
},

218 {"dif·ime", 
os_dif·ime
},

219 {"execuã", 
os_execuã
},

220 {"exô", 
os_exô
},

221 {"gëív", 
os_gëív
},

222 {"ªmove", 
os_ªmove
},

223 {"ª«me", 
os_ª«me
},

224 {"£éoˇÀ", 
os_£éoˇÀ
},

225 {"time", 
os_time
},

226 {"tm≤ame", 
os_tm≤ame
},

227 {
NULL
, NULL}

234 
LUALIB_API
 
	$lua›í_os
 (
lua_Sèã
 *
L
) {

235 
	`luaL_ªgi°î
(
L
, 
LUA_OSLIBNAME
, 
sy¶ib
);

237 
	}
}

	@lparser.c

8 
	~<°rög.h
>

10 
	#Õ¨£r_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lcode.h
"

16 
	~"ldebug.h
"

17 
	~"ldo.h
"

18 
	~"lfunc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"Õ¨£r.h
"

24 
	~"l°©e.h
"

25 
	~"l°rög.h
"

30 
	#hasmu…ªt
(
k
Ë((kË=
VCALL
 || (kË=
VVARARG
)

	)

32 
	#gëlocv¨
(
fs
, 
i
Ë((fs)->
f
->
locv¨s
[(fs)->
a˘v¨
[i]])

	)

34 
	#luaY_checklimô
(
fs
,
v
,
l
,
m
Ëi‡((v)>÷)Ë
	`îr‹limô
(fs,l,m)

	)

40 
	sBlockC¡
 {

41 
BlockC¡
 *
	m¥evious
;

42 
	mbªakli°
;

43 
lu_byã
 
	m«˘v¨
;

44 
lu_byã
 
	mupvÆ
;

45 
lu_byã
 
	misbªakabÀ
;

46 } 
	tBlockC¡
;

53 
chunk
 (
LexSèã
 *
ls
);

54 
ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
);

57 
	$™ch‹_tokí
 (
LexSèã
 *
ls
) {

58 i‡(
ls
->
t
.
tokí
 =
TK_NAME
 ||Üs->t.tokí =
TK_STRING
) {

59 
TSåög
 *
ts
 = 
ls
->
t
.
£möfo
.ts;

60 
	`luaX_√w°rög
(
ls
, 
	`gë°r
(
ts
),Ås->
tsv
.
Àn
);

62 
	}
}

65 
	$îr‹_ex≥˘ed
 (
LexSèã
 *
ls
, 
tokí
) {

66 
	`luaX_sy¡axîr‹
(
ls
,

67 
	`luaO_pushf°rög
(
ls
->
L
, 
LUA_QS
 "Éx≥˘ed", 
	`luaX_tokí2°r
÷s, 
tokí
)));

68 
	}
}

71 
	$îr‹limô
 (
FuncSèã
 *
fs
, 
limô
, c⁄° *
wh©
) {

72 c⁄° *
msg
 = (
fs
->
f
->
löedeföed
 == 0) ?

73 
	`luaO_pushf°rög
(
fs
->
L
, "maö fun˘i⁄ ha†m‹êth™ %d %s", 
limô
, 
wh©
) :

74 
	`luaO_pushf°rög
(
fs
->
L
, "functionátÜine %d has moreÅhan %d %s",

75 
fs
->
f
->
löedeföed
, 
limô
, 
wh©
);

76 
	`luaX_Àxîr‹
(
fs
->
ls
, 
msg
, 0);

77 
	}
}

80 
	$ã°√xt
 (
LexSèã
 *
ls
, 
c
) {

81 i‡(
ls
->
t
.
tokí
 =
c
) {

82 
	`luaX_√xt
(
ls
);

86 
	}
}

89 
	$check
 (
LexSèã
 *
ls
, 
c
) {

90 i‡(
ls
->
t
.
tokí
 !
c
)

91 
	`îr‹_ex≥˘ed
(
ls
, 
c
);

92 
	}
}

94 
	$check√xt
 (
LexSèã
 *
ls
, 
c
) {

95 
	`check
(
ls
, 
c
);

96 
	`luaX_√xt
(
ls
);

97 
	}
}

100 
	#check_c⁄dôi⁄
(
ls
,
c
,
msg
Ë{ i‡(!(c)Ë
	`luaX_sy¡axîr‹
÷s, msg); }

	)

104 
	$check_m©ch
 (
LexSèã
 *
ls
, 
wh©
, 
who
, 
whîe
) {

105 i‡(!
	`ã°√xt
(
ls
, 
wh©
)) {

106 i‡(
whîe
 =
ls
->
löíumbî
)

107 
	`îr‹_ex≥˘ed
(
ls
, 
wh©
);

109 
	`luaX_sy¡axîr‹
(
ls
, 
	`luaO_pushf°rög
÷s->
L
,

110 
LUA_QS
 "Éxpected (to close " LUA_QS "átÜine %d)",

111 
	`luaX_tokí2°r
(
ls
, 
wh©
),ÜuaX_tokí2°r÷s, 
who
), 
whîe
));

114 
	}
}

117 
TSåög
 *
	$°r_check«me
 (
LexSèã
 *
ls
) {

118 
TSåög
 *
ts
;

119 
	`check
(
ls
, 
TK_NAME
);

120 
ts
 = 
ls
->
t
.
£möfo
.ts;

121 
	`luaX_√xt
(
ls
);

122  
ts
;

123 
	}
}

126 
	$öô_exp
 (
expdesc
 *
e
, 
expköd
 
k
, 
i
) {

127 
e
->
f
 =É->
t
 = 
NO_JUMP
;

128 
e
->
k
 = k;

129 
e
->
u
.
s
.
öfo
 = 
i
;

130 
	}
}

133 
	$code°rög
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
TSåög
 *
s
) {

134 
	`öô_exp
(
e
, 
VK
, 
	`luaK_°rögK
(
ls
->
fs
, 
s
));

135 
	}
}

138 
	$check«me
(
LexSèã
 *
ls
, 
expdesc
 *
e
) {

139 
	`code°rög
(
ls
, 
e
, 
	`°r_check«me
(ls));

140 
	}
}

143 
	$ªgi°îloˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
) {

144 
FuncSèã
 *
fs
 = 
ls
->fs;

145 
PrŸo
 *
f
 = 
fs
->f;

146 
ﬁdsize
 = 
f
->
sizñocv¨s
;

147 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
locv¨s
, 
fs
->
∆ocv¨s
, f->
sizñocv¨s
,

148 
LocV¨
, 
SHRT_MAX
, "too manyÜocal variables");

149 
ﬁdsize
 < 
f
->
sizñocv¨s
Ëf->
locv¨s
[ﬁdsize++].
v¨«me
 = 
NULL
;

150 
f
->
locv¨s
[
fs
->
∆ocv¨s
].
v¨«me
 = varname;

151 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
v¨«me
);

152  
fs
->
∆ocv¨s
++;

153 
	}
}

156 
	#√w_loˇlv¨lôîÆ
(
ls
,
v
,
n
) \

157 
	`√w_loˇlv¨
(
ls
, 
	`luaX_√w°rög
÷s, "" 
v
, ((v)/())-1), 
n
)

	)

160 
	$√w_loˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
«me
, 
n
) {

161 
FuncSèã
 *
fs
 = 
ls
->fs;

162 
	`luaY_checklimô
(
fs
, fs->
«˘v¨
+
n
+1, 
LUAI_MAXVARS
, "local variables");

163 
fs
->
a˘v¨
[fs->
«˘v¨
+
n
] = 
	`ˇ°
(, 
	`ªgi°îloˇlv¨
(
ls
, 
«me
));

164 
	}
}

167 
	$adju°loˇlv¨s
 (
LexSèã
 *
ls
, 
nv¨s
) {

168 
FuncSèã
 *
fs
 = 
ls
->fs;

169 
fs
->
«˘v¨
 = 
	`ˇ°_byã
(fs->«˘v¨ + 
nv¨s
);

170 ; 
nv¨s
;Çvars--) {

171 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 
nv¨s
).
°¨çc
 = fs->
pc
;

173 
	}
}

176 
	$ªmovev¨s
 (
LexSèã
 *
ls
, 
tﬁevñ
) {

177 
FuncSèã
 *
fs
 = 
ls
->fs;

178 
fs
->
«˘v¨
 > 
tﬁevñ
)

179 
	`gëlocv¨
(
fs
, --fs->
«˘v¨
).
ídpc
 = fs->
pc
;

180 
	}
}

183 
	$ödexupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
, 
expdesc
 *
v
) {

184 
i
;

185 
PrŸo
 *
f
 = 
fs
->f;

186 
ﬁdsize
 = 
f
->
sizeupvÆues
;

187 
i
=0; i<
f
->
nups
; i++) {

188 i‡(
fs
->
upvÆues
[
i
].
k
 =
v
->k && fs->upvÆues[i].
öfo
 =v->
u
.
s
.info) {

189 
	`lua_as£π
(
f
->
upvÆues
[
i
] =
«me
);

190  
i
;

194 
	`luaY_checklimô
(
fs
, 
f
->
nups
 + 1, 
LUAI_MAXUPVALUES
, "upvalues");

195 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
upvÆues
, f->
nups
, f->
sizeupvÆues
,

196 
TSåög
 *, 
MAX_INT
, "");

197 
ﬁdsize
 < 
f
->
sizeupvÆues
Ëf->
upvÆues
[ﬁdsize++] = 
NULL
;

198 
f
->
upvÆues
[f->
nups
] = 
«me
;

199 
	`luaC_objb¨rõr
(
fs
->
L
, 
f
, 
«me
);

200 
	`lua_as£π
(
v
->
k
 =
VLOCAL
 || v->k =
VUPVAL
);

201 
fs
->
upvÆues
[
f
->
nups
].
k
 = 
	`ˇ°_byã
(
v
->k);

202 
fs
->
upvÆues
[
f
->
nups
].
öfo
 = 
	`ˇ°_byã
(
v
->
u
.
s
.info);

203  
f
->
nups
++;

204 
	}
}

207 
	$£¨chv¨
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
) {

208 
i
;

209 
i
=
fs
->
«˘v¨
-1; i >= 0; i--) {

210 i‡(
n
 =
	`gëlocv¨
(
fs
, 
i
).
v¨«me
)

211  
i
;

214 
	}
}

217 
	$m¨kupvÆ
 (
FuncSèã
 *
fs
, 
Àvñ
) {

218 
BlockC¡
 *
bl
 = 
fs
->bl;

219 
bl
 && bl->
«˘v¨
 > 
Àvñ
Ëb»bl->
¥evious
;

220 i‡(
bl
Ëbl->
upvÆ
 = 1;

221 
	}
}

224 
	$sögÀv¨aux
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
, 
expdesc
 *
v¨
, 
ba£
) {

225 i‡(
fs
 =
NULL
) {

226 
	`öô_exp
(
v¨
, 
VGLOBAL
, 
NO_REG
);

227  
VGLOBAL
;

230 
v
 = 
	`£¨chv¨
(
fs
, 
n
);

231 i‡(
v
 >= 0) {

232 
	`öô_exp
(
v¨
, 
VLOCAL
, 
v
);

233 i‡(!
ba£
)

234 
	`m¨kupvÆ
(
fs
, 
v
);

235  
VLOCAL
;

238 i‡(
	`sögÀv¨aux
(
fs
->
¥ev
, 
n
, 
v¨
, 0Ë=
VGLOBAL
)

239  
VGLOBAL
;

240 
v¨
->
u
.
s
.
öfo
 = 
	`ödexupvÆue
(
fs
, 
n
, var);

241 
v¨
->
k
 = 
VUPVAL
;

242  
VUPVAL
;

245 
	}
}

248 
	$sögÀv¨
 (
LexSèã
 *
ls
, 
expdesc
 *
v¨
) {

249 
TSåög
 *
v¨«me
 = 
	`°r_check«me
(
ls
);

250 
FuncSèã
 *
fs
 = 
ls
->fs;

251 i‡(
	`sögÀv¨aux
(
fs
, 
v¨«me
, 
v¨
, 1Ë=
VGLOBAL
)

252 
v¨
->
u
.
s
.
öfo
 = 
	`luaK_°rögK
(
fs
, 
v¨«me
);

253 
	}
}

256 
	$adju°_assign
 (
LexSèã
 *
ls
, 
nv¨s
, 
√xps
, 
expdesc
 *
e
) {

257 
FuncSèã
 *
fs
 = 
ls
->fs;

258 
exåa
 = 
nv¨s
 - 
√xps
;

259 i‡(
	`hasmu…ªt
(
e
->
k
)) {

260 
exåa
++;

261 i‡(
exåa
 < 0)Éxtra = 0;

262 
	`luaK_£åëu∫s
(
fs
, 
e
, 
exåa
);

263 i‡(
exåa
 > 1Ë
	`luaK_ª£rvîegs
(
fs
,Éxtra-1);

266 i‡(
e
->
k
 !
VVOID
Ë
	`luaK_exp2√xåeg
(
fs
,É);

267 i‡(
exåa
 > 0) {

268 
ªg
 = 
fs
->
‰ìªg
;

269 
	`luaK_ª£rvîegs
(
fs
, 
exåa
);

270 
	`luaK_nû
(
fs
, 
ªg
, 
exåa
);

273 
	}
}

276 
	$íãæevñ
 (
LexSèã
 *
ls
) {

277 i‡(++
ls
->
L
->
nCˇŒs
 > 
LUAI_MAXCCALLS
)

278 
	`luaX_Àxîr‹
(
ls
, "chunk hasÅoo many syntaxÜevels", 0);

279 
	}
}

282 
	#Àavñevñ
(
ls
Ë(÷s)->
L
->
nCˇŒs
--)

	)

285 
	$íãrblock
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
, 
lu_byã
 
isbªakabÀ
) {

286 
bl
->
bªakli°
 = 
NO_JUMP
;

287 
bl
->
isbªakabÀ
 = isbreakable;

288 
bl
->
«˘v¨
 = 
fs
->nactvar;

289 
bl
->
upvÆ
 = 0;

290 
bl
->
¥evious
 = 
fs
->bl;

291 
fs
->
bl
 = bl;

292 
	`lua_as£π
(
fs
->
‰ìªg
 =fs->
«˘v¨
);

293 
	}
}

296 
	$Àaveblock
 (
FuncSèã
 *
fs
) {

297 
BlockC¡
 *
bl
 = 
fs
->bl;

298 
fs
->
bl
 = bl->
¥evious
;

299 
	`ªmovev¨s
(
fs
->
ls
, 
bl
->
«˘v¨
);

300 i‡(
bl
->
upvÆ
)

301 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

302 
	`lua_as£π
(!
bl
->
isbªakabÀ
 || !bl->
upvÆ
);

303 
	`lua_as£π
(
bl
->
«˘v¨
 =
fs
->nactvar);

304 
fs
->
‰ìªg
 = fs->
«˘v¨
;

305 
	`luaK_∑tchtohîe
(
fs
, 
bl
->
bªakli°
);

306 
	}
}

309 
	$push˛osuª
 (
LexSèã
 *
ls
, 
FuncSèã
 *
func
, 
expdesc
 *
v
) {

310 
FuncSèã
 *
fs
 = 
ls
->fs;

311 
PrŸo
 *
f
 = 
fs
->f;

312 
ﬁdsize
 = 
f
->
sizï
;

313 
i
;

314 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
p
, 
fs
->
≈
, f->
sizï
, 
PrŸo
 *,

315 
MAXARG_Bx
, "constantÅable overflow");

316 
ﬁdsize
 < 
f
->
sizï
Ëf->
p
[ﬁdsize++] = 
NULL
;

317 
f
->
p
[
fs
->
≈
++] = 
func
->f;

318 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
func
->f);

319 
	`öô_exp
(
v
, 
VRELOCABLE
, 
	`luaK_codeABx
(
fs
, 
OP_CLOSURE
, 0, fs->
≈
-1));

320 
i
=0; i<
func
->
f
->
nups
; i++) {

321 
OpCode
 
o
 = (
func
->
upvÆues
[
i
].
k
 =
VLOCAL
Ë? 
OP_MOVE
 : 
OP_GETUPVAL
;

322 
	`luaK_codeABC
(
fs
, 
o
, 0, 
func
->
upvÆues
[
i
].
öfo
, 0);

324 
	}
}

327 
	$›í_func
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
) {

328 
lua_Sèã
 *
L
 = 
ls
->L;

329 
PrŸo
 *
f
 = 
	`luaF_√w¥Ÿo
(
L
);

330 
fs
->
f
 = f;

331 
fs
->
¥ev
 = 
ls
->fs;

332 
fs
->
ls
 =Üs;

333 
fs
->
L
 = L;

334 
ls
->
fs
 = fs;

335 
fs
->
pc
 = 0;

336 
fs
->
œ°èrgë
 = -1;

337 
fs
->
jpc
 = 
NO_JUMP
;

338 
fs
->
‰ìªg
 = 0;

339 
fs
->
nk
 = 0;

340 
fs
->
≈
 = 0;

341 
fs
->
∆ocv¨s
 = 0;

342 
fs
->
«˘v¨
 = 0;

343 
fs
->
bl
 = 
NULL
;

344 
f
->
sour˚
 = 
ls
->source;

345 
f
->
max°acksize
 = 2;

346 
fs
->
h
 = 
	`luaH_√w
(
L
, 0, 0);

348 
	`£thvÆue2s
(
L
, L->
t›
, 
fs
->
h
);

349 
	`ö¸_t›
(
L
);

350 
	`£çtvÆue2s
(
L
, L->
t›
, 
f
);

351 
	`ö¸_t›
(
L
);

352 
	}
}

355 
	$˛o£_func
 (
LexSèã
 *
ls
) {

356 
lua_Sèã
 *
L
 = 
ls
->L;

357 
FuncSèã
 *
fs
 = 
ls
->fs;

358 
PrŸo
 *
f
 = 
fs
->f;

359 
	`ªmovev¨s
(
ls
, 0);

360 
	`luaK_ªt
(
fs
, 0, 0);

361 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
code
, f->
sizecode
, 
fs
->
pc
, 
In°ru˘i⁄
);

362 
f
->
sizecode
 = 
fs
->
pc
;

363 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, 
fs
->
pc
, );

364 
f
->
sizñöeöfo
 = 
fs
->
pc
;

365 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
k
, f->
sizek
, 
fs
->
nk
, 
TVÆue
);

366 
f
->
sizek
 = 
fs
->
nk
;

367 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
p
, f->
sizï
, 
fs
->
≈
, 
PrŸo
 *);

368 
f
->
sizï
 = 
fs
->
≈
;

369 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
fs
->
∆ocv¨s
, 
LocV¨
);

370 
f
->
sizñocv¨s
 = 
fs
->
∆ocv¨s
;

371 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, f->
nups
, 
TSåög
 *);

372 
f
->
sizeupvÆues
 = f->
nups
;

373 
	`lua_as£π
(
	`luaG_checkcode
(
f
));

374 
	`lua_as£π
(
fs
->
bl
 =
NULL
);

375 
ls
->
fs
 = fs->
¥ev
;

376 
L
->
t›
 -= 2;

378 i‡(
fs
Ë
	`™ch‹_tokí
(
ls
);

379 
	}
}

382 
PrŸo
 *
	$luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
, c⁄° *
«me
) {

383 
LexSèã
 
Àx°©e
;

384 
FuncSèã
 
func°©e
;

385 
Àx°©e
.
buff
 = buff;

386 
	`luaX_£töput
(
L
, &
Àx°©e
, 
z
, 
	`luaS_√w
(L, 
«me
));

387 
	`›í_func
(&
Àx°©e
, &
func°©e
);

388 
func°©e
.
f
->
is_v¨¨g
 = 
VARARG_ISVARARG
;

389 
	`luaX_√xt
(&
Àx°©e
);

390 
	`chunk
(&
Àx°©e
);

391 
	`check
(&
Àx°©e
, 
TK_EOS
);

392 
	`˛o£_func
(&
Àx°©e
);

393 
	`lua_as£π
(
func°©e
.
¥ev
 =
NULL
);

394 
	`lua_as£π
(
func°©e
.
f
->
nups
 == 0);

395 
	`lua_as£π
(
Àx°©e
.
fs
 =
NULL
);

396  
func°©e
.
f
;

397 
	}
}

406 
	$fõld
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

408 
FuncSèã
 *
fs
 = 
ls
->fs;

409 
expdesc
 
key
;

410 
	`luaK_exp2™yªg
(
fs
, 
v
);

411 
	`luaX_√xt
(
ls
);

412 
	`check«me
(
ls
, &
key
);

413 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

414 
	}
}

417 
	$yödex
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

419 
	`luaX_√xt
(
ls
);

420 
	`ex¥
(
ls
, 
v
);

421 
	`luaK_exp2vÆ
(
ls
->
fs
, 
v
);

422 
	`check√xt
(
ls
, ']');

423 
	}
}

433 
	sC⁄sC⁄åﬁ
 {

434 
expdesc
 
	mv
;

435 
expdesc
 *
	mt
;

436 
	mnh
;

437 
	m«
;

438 
	mto°‹e
;

442 
	$ªcfõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

444 
FuncSèã
 *
fs
 = 
ls
->fs;

445 
ªg
 = 
ls
->
fs
->
‰ìªg
;

446 
expdesc
 
key
, 
vÆ
;

447 i‡(
ls
->
t
.
tokí
 =
TK_NAME
) {

448 
	`luaY_checklimô
(
fs
, 
cc
->
nh
, 
MAX_INT
, "items iná constructor");

449 
	`check«me
(
ls
, &
key
);

452 
	`yödex
(
ls
, &
key
);

453 
cc
->
nh
++;

454 
	`check√xt
(
ls
, '=');

455 
	`luaK_exp2RK
(
fs
, &
key
);

456 
	`ex¥
(
ls
, &
vÆ
);

457 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
cc
->
t
->
u
.
s
.
öfo
, 
	`luaK_exp2RK
(fs, &
key
),

458 
	`luaK_exp2RK
(
fs
, &
vÆ
));

459 
fs
->
‰ìªg
 = 
ªg
;

460 
	}
}

463 
	$˛o£li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

464 i‡(
cc
->
v
.
k
 =
VVOID
) ;

465 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

466 
cc
->
v
.
k
 = 
VVOID
;

467 i‡(
cc
->
to°‹e
 =
LFIELDS_PER_FLUSH
) {

468 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, cc->
to°‹e
);

469 
cc
->
to°‹e
 = 0;

471 
	}
}

474 
	$œ°li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

475 i‡(
cc
->
to°‹e
 == 0) ;

476 i‡(
	`hasmu…ªt
(
cc
->
v
.
k
)) {

477 
	`luaK_£tmu…ªt
(
fs
, &
cc
->
v
);

478 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, 
LUA_MULTRET
);

479 
cc
->
«
--;

482 i‡(
cc
->
v
.
k
 !
VVOID
)

483 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

484 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, cc->
to°‹e
);

486 
	}
}

489 
	$li°fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

490 
	`ex¥
(
ls
, &
cc
->
v
);

491 
	`luaY_checklimô
(
ls
->
fs
, 
cc
->
«
, 
MAXARG_Bx
, "items iná constructor");

492 
cc
->
«
++;

493 
cc
->
to°‹e
++;

494 
	}
}

497 
	$c⁄°ru˘‹
 (
LexSèã
 *
ls
, 
expdesc
 *
t
) {

499 
FuncSèã
 *
fs
 = 
ls
->fs;

500 
löe
 = 
ls
->
löíumbî
;

501 
pc
 = 
	`luaK_codeABC
(
fs
, 
OP_NEWTABLE
, 0, 0, 0);

502 
C⁄sC⁄åﬁ
 
cc
;

503 
cc
.
«
 = cc.
nh
 = cc.
to°‹e
 = 0;

504 
cc
.
t
 =Å;

505 
	`öô_exp
(
t
, 
VRELOCABLE
, 
pc
);

506 
	`öô_exp
(&
cc
.
v
, 
VVOID
, 0);

507 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
t
);

508 
	`check√xt
(
ls
, '{');

510 
	`lua_as£π
(
cc
.
v
.
k
 =
VVOID
 || cc.
to°‹e
 > 0);

511 i‡(
ls
->
t
.
tokí
 == '}') ;

512 
	`˛o£li°fõld
(
fs
, &
cc
);

513 
ls
->
t
.
tokí
) {

514 
TK_NAME
: {

515 
	`luaX_lookahód
(
ls
);

516 i‡(
ls
->
lookahód
.
tokí
 != '=')

517 
	`li°fõld
(
ls
, &
cc
);

519 
	`ªcfõld
(
ls
, &
cc
);

523 
	`ªcfõld
(
ls
, &
cc
);

527 
	`li°fõld
(
ls
, &
cc
);

531 } 
	`ã°√xt
(
ls
, ',') ||Åestnext(ls, ';'));

532 
	`check_m©ch
(
ls
, '}', '{', 
löe
);

533 
	`œ°li°fõld
(
fs
, &
cc
);

534 
	`SETARG_B
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
«
));

535 
	`SETARG_C
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
nh
));

536 
	}
}

542 
	$∑æi°
 (
LexSèã
 *
ls
) {

544 
FuncSèã
 *
fs
 = 
ls
->fs;

545 
PrŸo
 *
f
 = 
fs
->f;

546 
≈¨ams
 = 0;

547 
f
->
is_v¨¨g
 = 0;

548 i‡(
ls
->
t
.
tokí
 != ')') {

550 
ls
->
t
.
tokí
) {

551 
TK_NAME
: {

552 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
≈¨ams
++);

555 
TK_DOTS
: {

556 
	`luaX_√xt
(
ls
);

557 #i‡
	`deföed
(
LUA_COMPAT_VARARG
)

559 
	`√w_loˇlv¨lôîÆ
(
ls
, "¨g", 
≈¨ams
++);

560 
f
->
is_v¨¨g
 = 
VARARG_HASARG
 | 
VARARG_NEEDSARG
;

562 
f
->
is_v¨¨g
 |
VARARG_ISVARARG
;

565 : 
	`luaX_sy¡axîr‹
(
ls
, "<«me> o∏" 
	`LUA_QL
("...") "Éxpected");

567 } !
f
->
is_v¨¨g
 && 
	`ã°√xt
(
ls
, ','));

569 
	`adju°loˇlv¨s
(
ls
, 
≈¨ams
);

570 
f
->
num∑øms
 = 
	`ˇ°_byã
(
fs
->
«˘v¨
 - (f->
is_v¨¨g
 & 
VARARG_HASARG
));

571 
	`luaK_ª£rvîegs
(
fs
, fs->
«˘v¨
);

572 
	}
}

575 
	$body
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
√ed£lf
, 
löe
) {

577 
FuncSèã
 
√w_fs
;

578 
	`›í_func
(
ls
, &
√w_fs
);

579 
√w_fs
.
f
->
löedeföed
 = 
löe
;

580 
	`check√xt
(
ls
, '(');

581 i‡(
√ed£lf
) {

582 
	`√w_loˇlv¨lôîÆ
(
ls
, "self", 0);

583 
	`adju°loˇlv¨s
(
ls
, 1);

585 
	`∑æi°
(
ls
);

586 
	`check√xt
(
ls
, ')');

587 
	`chunk
(
ls
);

588 
√w_fs
.
f
->
œ°löedeföed
 = 
ls
->
löíumbî
;

589 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FUNCTION
, 
löe
);

590 
	`˛o£_func
(
ls
);

591 
	`push˛osuª
(
ls
, &
√w_fs
, 
e
);

592 
	}
}

595 
	$ex∂i°1
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

597 
n
 = 1;

598 
	`ex¥
(
ls
, 
v
);

599 
	`ã°√xt
(
ls
, ',')) {

600 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
v
);

601 
	`ex¥
(
ls
, 
v
);

602 
n
++;

604  
n
;

605 
	}
}

608 
	$funˇrgs
 (
LexSèã
 *
ls
, 
expdesc
 *
f
) {

609 
FuncSèã
 *
fs
 = 
ls
->fs;

610 
expdesc
 
¨gs
;

611 
ba£
, 
≈¨ams
;

612 
löe
 = 
ls
->
löíumbî
;

613 
ls
->
t
.
tokí
) {

615 i‡(
löe
 !
ls
->
œ°löe
)

616 
	`luaX_sy¡axîr‹
(
ls
,"ambiguous syntax (function call xÇew statement)");

617 
	`luaX_√xt
(
ls
);

618 i‡(
ls
->
t
.
tokí
 == ')')

619 
¨gs
.
k
 = 
VVOID
;

621 
	`ex∂i°1
(
ls
, &
¨gs
);

622 
	`luaK_£tmu…ªt
(
fs
, &
¨gs
);

624 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

628 
	`c⁄°ru˘‹
(
ls
, &
¨gs
);

631 
TK_STRING
: {

632 
	`code°rög
(
ls
, &
¨gs
,Üs->
t
.
£möfo
.
ts
);

633 
	`luaX_√xt
(
ls
);

637 
	`luaX_sy¡axîr‹
(
ls
, "functionárgumentsÉxpected");

641 
	`lua_as£π
(
f
->
k
 =
VNONRELOC
);

642 
ba£
 = 
f
->
u
.
s
.
öfo
;

643 i‡(
	`hasmu…ªt
(
¨gs
.
k
))

644 
≈¨ams
 = 
LUA_MULTRET
;

646 i‡(
¨gs
.
k
 !
VVOID
)

647 
	`luaK_exp2√xåeg
(
fs
, &
¨gs
);

648 
≈¨ams
 = 
fs
->
‰ìªg
 - (
ba£
+1);

650 
	`öô_exp
(
f
, 
VCALL
, 
	`luaK_codeABC
(
fs
, 
OP_CALL
, 
ba£
, 
≈¨ams
+1, 2));

651 
	`luaK_fixlöe
(
fs
, 
löe
);

652 
fs
->
‰ìªg
 = 
ba£
+1;

654 
	}
}

666 
	$¥efixexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

668 
ls
->
t
.
tokí
) {

670 
löe
 = 
ls
->
löíumbî
;

671 
	`luaX_√xt
(
ls
);

672 
	`ex¥
(
ls
, 
v
);

673 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

674 
	`luaK_disch¨gev¨s
(
ls
->
fs
, 
v
);

677 
TK_NAME
: {

678 
	`sögÀv¨
(
ls
, 
v
);

682 
	`luaX_sy¡axîr‹
(
ls
, "unexpected symbol");

686 
	}
}

689 
	$¥im¨yexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

692 
FuncSèã
 *
fs
 = 
ls
->fs;

693 
	`¥efixexp
(
ls
, 
v
);

695 
ls
->
t
.
tokí
) {

697 
	`fõld
(
ls
, 
v
);

701 
expdesc
 
key
;

702 
	`luaK_exp2™yªg
(
fs
, 
v
);

703 
	`yödex
(
ls
, &
key
);

704 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

708 
expdesc
 
key
;

709 
	`luaX_√xt
(
ls
);

710 
	`check«me
(
ls
, &
key
);

711 
	`luaK_£lf
(
fs
, 
v
, &
key
);

712 
	`funˇrgs
(
ls
, 
v
);

715 '(': 
TK_STRING
: '{': {

716 
	`luaK_exp2√xåeg
(
fs
, 
v
);

717 
	`funˇrgs
(
ls
, 
v
);

723 
	}
}

726 
	$sim∂ìxp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

729 
ls
->
t
.
tokí
) {

730 
TK_NUMBER
: {

731 
	`öô_exp
(
v
, 
VKNUM
, 0);

732 
v
->
u
.
nvÆ
 = 
ls
->
t
.
£möfo
.
r
;

735 
TK_STRING
: {

736 
	`code°rög
(
ls
, 
v
,Üs->
t
.
£möfo
.
ts
);

739 
TK_NIL
: {

740 
	`öô_exp
(
v
, 
VNIL
, 0);

743 
TK_TRUE
: {

744 
	`öô_exp
(
v
, 
VTRUE
, 0);

747 
TK_FALSE
: {

748 
	`öô_exp
(
v
, 
VFALSE
, 0);

751 
TK_DOTS
: {

752 
FuncSèã
 *
fs
 = 
ls
->fs;

753 
	`check_c⁄dôi⁄
(
ls
, 
fs
->
f
->
is_v¨¨g
,

754 "ˇ¬Ÿ u£ " 
	`LUA_QL
("...") " outsideá vararg function");

755 
fs
->
f
->
is_v¨¨g
 &~
VARARG_NEEDSARG
;

756 
	`öô_exp
(
v
, 
VVARARG
, 
	`luaK_codeABC
(
fs
, 
OP_VARARG
, 0, 1, 0));

760 
	`c⁄°ru˘‹
(
ls
, 
v
);

763 
TK_FUNCTION
: {

764 
	`luaX_√xt
(
ls
);

765 
	`body
(
ls
, 
v
, 0,Üs->
löíumbî
);

769 
	`¥im¨yexp
(
ls
, 
v
);

773 
	`luaX_√xt
(
ls
);

774 
	}
}

777 
UnO¥
 
	$gëun›r
 (
›
) {

778 
›
) {

779 
TK_NOT
:  
OPR_NOT
;

780 '-':  
OPR_MINUS
;

781 '#':  
OPR_LEN
;

782 :  
OPR_NOUNOPR
;

784 
	}
}

787 
BöO¥
 
	$gëbö›r
 (
›
) {

788 
›
) {

789 '+':  
OPR_ADD
;

790 '-':  
OPR_SUB
;

791 '*':  
OPR_MUL
;

792 '/':  
OPR_DIV
;

793 '%':  
OPR_MOD
;

794 '^':  
OPR_POW
;

795 
TK_CONCAT
:  
OPR_CONCAT
;

796 
TK_NE
:  
OPR_NE
;

797 
TK_EQ
:  
OPR_EQ
;

798 '<':  
OPR_LT
;

799 
TK_LE
:  
OPR_LE
;

800 '>':  
OPR_GT
;

801 
TK_GE
:  
OPR_GE
;

802 
TK_AND
:  
OPR_AND
;

803 
TK_OR
:  
OPR_OR
;

804 :  
OPR_NOBINOPR
;

806 
	}
}

810 
lu_byã
 
	mÀ·
;

811 
lu_byã
 
	mright
;

812 } 
	g¥i‹ôy
[] = {

820 
	#UNARY_PRIORITY
 8

	)

827 
BöO¥
 
	$subex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
, 
limô
) {

828 
BöO¥
 
›
;

829 
UnO¥
 
u›
;

830 
	`íãæevñ
(
ls
);

831 
u›
 = 
	`gëun›r
(
ls
->
t
.
tokí
);

832 i‡(
u›
 !
OPR_NOUNOPR
) {

833 
	`luaX_√xt
(
ls
);

834 
	`subex¥
(
ls
, 
v
, 
UNARY_PRIORITY
);

835 
	`luaK_¥efix
(
ls
->
fs
, 
u›
, 
v
);

837 
	`sim∂ìxp
(
ls
, 
v
);

839 
›
 = 
	`gëbö›r
(
ls
->
t
.
tokí
);

840 
›
 !
OPR_NOBINOPR
 && 
¥i‹ôy
[›].
À·
 > 
limô
) {

841 
expdesc
 
v2
;

842 
BöO¥
 
√xt›
;

843 
	`luaX_√xt
(
ls
);

844 
	`luaK_öfix
(
ls
->
fs
, 
›
, 
v
);

846 
√xt›
 = 
	`subex¥
(
ls
, &
v2
, 
¥i‹ôy
[
›
].
right
);

847 
	`luaK_posfix
(
ls
->
fs
, 
›
, 
v
, &
v2
);

848 
›
 = 
√xt›
;

850 
	`Àavñevñ
(
ls
);

851  
›
;

852 
	}
}

855 
	$ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

856 
	`subex¥
(
ls
, 
v
, 0);

857 
	}
}

870 
	$block_fﬁlow
 (
tokí
) {

871 
tokí
) {

872 
TK_ELSE
: 
TK_ELSEIF
: 
TK_END
:

873 
TK_UNTIL
: 
TK_EOS
:

877 
	}
}

880 
	$block
 (
LexSèã
 *
ls
) {

882 
FuncSèã
 *
fs
 = 
ls
->fs;

883 
BlockC¡
 
bl
;

884 
	`íãrblock
(
fs
, &
bl
, 0);

885 
	`chunk
(
ls
);

886 
	`lua_as£π
(
bl
.
bªakli°
 =
NO_JUMP
);

887 
	`Àaveblock
(
fs
);

888 
	}
}

895 
	sLHS_assign
 {

896 
LHS_assign
 *
	m¥ev
;

897 
expdesc
 
	mv
;

907 
	$check_c⁄Êi˘
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
expdesc
 *
v
) {

908 
FuncSèã
 *
fs
 = 
ls
->fs;

909 
exåa
 = 
fs
->
‰ìªg
;

910 
c⁄Êi˘
 = 0;

911 ; 
lh
;Üh =Üh->
¥ev
) {

912 i‡(
lh
->
v
.
k
 =
VINDEXED
) {

913 i‡(
lh
->
v
.
u
.
s
.
öfo
 == v->u.s.info) {

914 
c⁄Êi˘
 = 1;

915 
lh
->
v
.
u
.
s
.
öfo
 = 
exåa
;

917 i‡(
lh
->
v
.
u
.
s
.
aux
 =v->u.s.
öfo
) {

918 
c⁄Êi˘
 = 1;

919 
lh
->
v
.
u
.
s
.
aux
 = 
exåa
;

923 i‡(
c⁄Êi˘
) {

924 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, fs->
‰ìªg
, 
v
->
u
.
s
.
öfo
, 0);

925 
	`luaK_ª£rvîegs
(
fs
, 1);

927 
	}
}

930 
	$assignmít
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
nv¨s
) {

931 
expdesc
 
e
;

932 
	`check_c⁄dôi⁄
(
ls
, 
VLOCAL
 <
lh
->
v
.
k
 &&Üh->v.k <
VINDEXED
,

934 i‡(
	`ã°√xt
(
ls
, ',')) {

935 
LHS_assign
 
nv
;

936 
nv
.
¥ev
 = 
lh
;

937 
	`¥im¨yexp
(
ls
, &
nv
.
v
);

938 i‡(
nv
.
v
.
k
 =
VLOCAL
)

939 
	`check_c⁄Êi˘
(
ls
, 
lh
, &
nv
.
v
);

940 
	`assignmít
(
ls
, &
nv
, 
nv¨s
+1);

943 
√xps
;

944 
	`check√xt
(
ls
, '=');

945 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

946 i‡(
√xps
 !
nv¨s
) {

947 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

948 i‡(
√xps
 > 
nv¨s
)

949 
ls
->
fs
->
‰ìªg
 -
√xps
 - 
nv¨s
;

952 
	`luaK_£t⁄îë
(
ls
->
fs
, &
e
);

953 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

957 
	`öô_exp
(&
e
, 
VNONRELOC
, 
ls
->
fs
->
‰ìªg
-1);

958 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

959 
	}
}

962 
	$c⁄d
 (
LexSèã
 *
ls
) {

964 
expdesc
 
v
;

965 
	`ex¥
(
ls
, &
v
);

966 i‡(
v
.
k
 =
VNIL
Ëv.k = 
VFALSE
;

967 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

968  
v
.
f
;

969 
	}
}

972 
	$bªak°©
 (
LexSèã
 *
ls
) {

973 
FuncSèã
 *
fs
 = 
ls
->fs;

974 
BlockC¡
 *
bl
 = 
fs
->bl;

975 
upvÆ
 = 0;

976 
bl
 && !bl->
isbªakabÀ
) {

977 
upvÆ
 |
bl
->upval;

978 
bl
 = bl->
¥evious
;

980 i‡(!
bl
)

981 
	`luaX_sy¡axîr‹
(
ls
, "noÜoopÅo break");

982 i‡(
upvÆ
)

983 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

984 
	`luaK_c⁄ˇt
(
fs
, &
bl
->
bªakli°
, 
	`luaK_jump
(fs));

985 
	}
}

988 
	$whûe°©
 (
LexSèã
 *
ls
, 
löe
) {

990 
FuncSèã
 *
fs
 = 
ls
->fs;

991 
whûeöô
;

992 
c⁄dexô
;

993 
BlockC¡
 
bl
;

994 
	`luaX_√xt
(
ls
);

995 
whûeöô
 = 
	`luaK_gëœbñ
(
fs
);

996 
c⁄dexô
 = 
	`c⁄d
(
ls
);

997 
	`íãrblock
(
fs
, &
bl
, 1);

998 
	`check√xt
(
ls
, 
TK_DO
);

999 
	`block
(
ls
);

1000 
	`luaK_∑tchli°
(
fs
, 
	`luaK_jump
(fs), 
whûeöô
);

1001 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_WHILE
, 
löe
);

1002 
	`Àaveblock
(
fs
);

1003 
	`luaK_∑tchtohîe
(
fs
, 
c⁄dexô
);

1004 
	}
}

1007 
	$ª≥©°©
 (
LexSèã
 *
ls
, 
löe
) {

1009 
c⁄dexô
;

1010 
FuncSèã
 *
fs
 = 
ls
->fs;

1011 
ª≥©_öô
 = 
	`luaK_gëœbñ
(
fs
);

1012 
BlockC¡
 
bl1
, 
bl2
;

1013 
	`íãrblock
(
fs
, &
bl1
, 1);

1014 
	`íãrblock
(
fs
, &
bl2
, 0);

1015 
	`luaX_√xt
(
ls
);

1016 
	`chunk
(
ls
);

1017 
	`check_m©ch
(
ls
, 
TK_UNTIL
, 
TK_REPEAT
, 
löe
);

1018 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1019 i‡(!
bl2
.
upvÆ
) {

1020 
	`Àaveblock
(
fs
);

1021 
	`luaK_∑tchli°
(
ls
->
fs
, 
c⁄dexô
, 
ª≥©_öô
);

1024 
	`bªak°©
(
ls
);

1025 
	`luaK_∑tchtohîe
(
ls
->
fs
, 
c⁄dexô
);

1026 
	`Àaveblock
(
fs
);

1027 
	`luaK_∑tchli°
(
ls
->
fs
, 
	`luaK_jump
(fs), 
ª≥©_öô
);

1029 
	`Àaveblock
(
fs
);

1030 
	}
}

1033 
	$exp1
 (
LexSèã
 *
ls
) {

1034 
expdesc
 
e
;

1035 
k
;

1036 
	`ex¥
(
ls
, &
e
);

1037 
k
 = 
e
.k;

1038 
	`luaK_exp2√xåeg
(
ls
->
fs
, &
e
);

1039  
k
;

1040 
	}
}

1043 
	$f‹body
 (
LexSèã
 *
ls
, 
ba£
, 
löe
, 
nv¨s
, 
i¢um
) {

1045 
BlockC¡
 
bl
;

1046 
FuncSèã
 *
fs
 = 
ls
->fs;

1047 
¥ï
, 
ídf‹
;

1048 
	`adju°loˇlv¨s
(
ls
, 3);

1049 
	`check√xt
(
ls
, 
TK_DO
);

1050 
¥ï
 = 
i¢um
 ? 
	`luaK_codeAsBx
(
fs
, 
OP_FORPREP
, 
ba£
, 
NO_JUMP
Ë: 
	`luaK_jump
(fs);

1051 
	`íãrblock
(
fs
, &
bl
, 0);

1052 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1053 
	`luaK_ª£rvîegs
(
fs
, 
nv¨s
);

1054 
	`block
(
ls
);

1055 
	`Àaveblock
(
fs
);

1056 
	`luaK_∑tchtohîe
(
fs
, 
¥ï
);

1057 
ídf‹
 = (
i¢um
Ë? 
	`luaK_codeAsBx
(
fs
, 
OP_FORLOOP
, 
ba£
, 
NO_JUMP
) :

1058 
	`luaK_codeABC
(
fs
, 
OP_TFORLOOP
, 
ba£
, 0, 
nv¨s
);

1059 
	`luaK_fixlöe
(
fs
, 
löe
);

1060 
	`luaK_∑tchli°
(
fs
, (
i¢um
 ? 
ídf‹
 : 
	`luaK_jump
(fs)), 
¥ï
 + 1);

1061 
	}
}

1064 
	$f‹num
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
, 
löe
) {

1066 
FuncSèã
 *
fs
 = 
ls
->fs;

1067 
ba£
 = 
fs
->
‰ìªg
;

1068 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for index)", 0);

1069 
	`√w_loˇlv¨lôîÆ
(
ls
, "(forÜimit)", 1);

1070 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for step)", 2);

1071 
	`√w_loˇlv¨
(
ls
, 
v¨«me
, 3);

1072 
	`check√xt
(
ls
, '=');

1073 
	`exp1
(
ls
);

1074 
	`check√xt
(
ls
, ',');

1075 
	`exp1
(
ls
);

1076 i‡(
	`ã°√xt
(
ls
, ','))

1077 
	`exp1
(
ls
);

1079 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, fs->
‰ìªg
, 
	`luaK_numbîK
(fs, 1));

1080 
	`luaK_ª£rvîegs
(
fs
, 1);

1082 
	`f‹body
(
ls
, 
ba£
, 
löe
, 1, 1);

1083 
	}
}

1086 
	$f‹li°
 (
LexSèã
 *
ls
, 
TSåög
 *
ödex«me
) {

1088 
FuncSèã
 *
fs
 = 
ls
->fs;

1089 
expdesc
 
e
;

1090 
nv¨s
 = 0;

1091 
löe
;

1092 
ba£
 = 
fs
->
‰ìªg
;

1094 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ gíî©‹)", 
nv¨s
++);

1095 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ sèã)", 
nv¨s
++);

1096 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ c⁄åﬁ)", 
nv¨s
++);

1098 
	`√w_loˇlv¨
(
ls
, 
ödex«me
, 
nv¨s
++);

1099 
	`ã°√xt
(
ls
, ','))

1100 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1101 
	`check√xt
(
ls
, 
TK_IN
);

1102 
löe
 = 
ls
->
löíumbî
;

1103 
	`adju°_assign
(
ls
, 3, 
	`ex∂i°1
÷s, &
e
), &e);

1104 
	`luaK_check°ack
(
fs
, 3);

1105 
	`f‹body
(
ls
, 
ba£
, 
löe
, 
nv¨s
 - 3, 0);

1106 
	}
}

1109 
	$f‹°©
 (
LexSèã
 *
ls
, 
löe
) {

1111 
FuncSèã
 *
fs
 = 
ls
->fs;

1112 
TSåög
 *
v¨«me
;

1113 
BlockC¡
 
bl
;

1114 
	`íãrblock
(
fs
, &
bl
, 1);

1115 
	`luaX_√xt
(
ls
);

1116 
v¨«me
 = 
	`°r_check«me
(
ls
);

1117 
ls
->
t
.
tokí
) {

1118 '=': 
	`f‹num
(
ls
, 
v¨«me
, 
löe
); ;

1119 ',': 
TK_IN
: 
	`f‹li°
(
ls
, 
v¨«me
); ;

1120 : 
	`luaX_sy¡axîr‹
(
ls
, 
	`LUA_QL
("=") " or " LUA_QL("in") "Éxpected");

1122 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FOR
, 
löe
);

1123 
	`Àaveblock
(
fs
);

1124 
	}
}

1127 
	$ã°_thí_block
 (
LexSèã
 *
ls
) {

1129 
c⁄dexô
;

1130 
	`luaX_√xt
(
ls
);

1131 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1132 
	`check√xt
(
ls
, 
TK_THEN
);

1133 
	`block
(
ls
);

1134  
c⁄dexô
;

1135 
	}
}

1138 
	$if°©
 (
LexSèã
 *
ls
, 
löe
) {

1140 
FuncSèã
 *
fs
 = 
ls
->fs;

1141 
Êi°
;

1142 
esˇ≥li°
 = 
NO_JUMP
;

1143 
Êi°
 = 
	`ã°_thí_block
(
ls
);

1144 
ls
->
t
.
tokí
 =
TK_ELSEIF
) {

1145 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1146 
	`luaK_∑tchtohîe
(
fs
, 
Êi°
);

1147 
Êi°
 = 
	`ã°_thí_block
(
ls
);

1149 i‡(
ls
->
t
.
tokí
 =
TK_ELSE
) {

1150 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1151 
	`luaK_∑tchtohîe
(
fs
, 
Êi°
);

1152 
	`luaX_√xt
(
ls
);

1153 
	`block
(
ls
);

1156 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
Êi°
);

1157 
	`luaK_∑tchtohîe
(
fs
, 
esˇ≥li°
);

1158 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_IF
, 
löe
);

1159 
	}
}

1162 
	$loˇlfunc
 (
LexSèã
 *
ls
) {

1163 
expdesc
 
v
, 
b
;

1164 
FuncSèã
 *
fs
 = 
ls
->fs;

1165 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls), 0);

1166 
	`öô_exp
(&
v
, 
VLOCAL
, 
fs
->
‰ìªg
);

1167 
	`luaK_ª£rvîegs
(
fs
, 1);

1168 
	`adju°loˇlv¨s
(
ls
, 1);

1169 
	`body
(
ls
, &
b
, 0,Üs->
löíumbî
);

1170 
	`luaK_°‹ev¨
(
fs
, &
v
, &
b
);

1172 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 1).
°¨çc
 = fs->
pc
;

1173 
	}
}

1176 
	$loˇl°©
 (
LexSèã
 *
ls
) {

1178 
nv¨s
 = 0;

1179 
√xps
;

1180 
expdesc
 
e
;

1182 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1183 } 
	`ã°√xt
(
ls
, ','));

1184 i‡(
	`ã°√xt
(
ls
, '='))

1185 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

1187 
e
.
k
 = 
VVOID
;

1188 
√xps
 = 0;

1190 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1191 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1192 
	}
}

1195 
	$fun˙ame
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1197 
√ed£lf
 = 0;

1198 
	`sögÀv¨
(
ls
, 
v
);

1199 
ls
->
t
.
tokí
 == '.')

1200 
	`fõld
(
ls
, 
v
);

1201 i‡(
ls
->
t
.
tokí
 == ':') {

1202 
√ed£lf
 = 1;

1203 
	`fõld
(
ls
, 
v
);

1205  
√ed£lf
;

1206 
	}
}

1209 
	$func°©
 (
LexSèã
 *
ls
, 
löe
) {

1211 
√ed£lf
;

1212 
expdesc
 
v
, 
b
;

1213 
	`luaX_√xt
(
ls
);

1214 
√ed£lf
 = 
	`fun˙ame
(
ls
, &
v
);

1215 
	`body
(
ls
, &
b
, 
√ed£lf
, 
löe
);

1216 
	`luaK_°‹ev¨
(
ls
->
fs
, &
v
, &
b
);

1217 
	`luaK_fixlöe
(
ls
->
fs
, 
löe
);

1218 
	}
}

1221 
	$ex¥°©
 (
LexSèã
 *
ls
) {

1223 
FuncSèã
 *
fs
 = 
ls
->fs;

1224 
LHS_assign
 
v
;

1225 
	`¥im¨yexp
(
ls
, &
v
.v);

1226 i‡(
v
.v.
k
 =
VCALL
)

1227 
	`SETARG_C
(
	`gëcode
(
fs
, &
v
.v), 1);

1229 
v
.
¥ev
 = 
NULL
;

1230 
	`assignmít
(
ls
, &
v
, 1);

1232 
	}
}

1235 
	$ªt°©
 (
LexSèã
 *
ls
) {

1237 
FuncSèã
 *
fs
 = 
ls
->fs;

1238 
expdesc
 
e
;

1239 
fú°
, 
ƒë
;

1240 
	`luaX_√xt
(
ls
);

1241 i‡(
	`block_fﬁlow
(
ls
->
t
.
tokí
) ||Üs->t.token == ';')

1242 
fú°
 = 
ƒë
 = 0;

1244 
ƒë
 = 
	`ex∂i°1
(
ls
, &
e
);

1245 i‡(
	`hasmu…ªt
(
e
.
k
)) {

1246 
	`luaK_£tmu…ªt
(
fs
, &
e
);

1247 i‡(
e
.
k
 =
VCALL
 && 
ƒë
 == 1) {

1248 
	`SET_OPCODE
(
	`gëcode
(
fs
,&
e
), 
OP_TAILCALL
);

1249 
	`lua_as£π
(
	`GETARG_A
(
	`gëcode
(
fs
,&
e
)Ë=fs->
«˘v¨
);

1251 
fú°
 = 
fs
->
«˘v¨
;

1252 
ƒë
 = 
LUA_MULTRET
;

1255 i‡(
ƒë
 == 1)

1256 
fú°
 = 
	`luaK_exp2™yªg
(
fs
, &
e
);

1258 
	`luaK_exp2√xåeg
(
fs
, &
e
);

1259 
fú°
 = 
fs
->
«˘v¨
;

1260 
	`lua_as£π
(
ƒë
 =
fs
->
‰ìªg
 - 
fú°
);

1264 
	`luaK_ªt
(
fs
, 
fú°
, 
ƒë
);

1265 
	}
}

1268 
	$°©emít
 (
LexSèã
 *
ls
) {

1269 
löe
 = 
ls
->
löíumbî
;

1270 
ls
->
t
.
tokí
) {

1271 
TK_IF
: {

1272 
	`if°©
(
ls
, 
löe
);

1275 
TK_WHILE
: {

1276 
	`whûe°©
(
ls
, 
löe
);

1279 
TK_DO
: {

1280 
	`luaX_√xt
(
ls
);

1281 
	`block
(
ls
);

1282 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_DO
, 
löe
);

1285 
TK_FOR
: {

1286 
	`f‹°©
(
ls
, 
löe
);

1289 
TK_REPEAT
: {

1290 
	`ª≥©°©
(
ls
, 
löe
);

1293 
TK_FUNCTION
: {

1294 
	`func°©
(
ls
, 
löe
);

1297 
TK_LOCAL
: {

1298 
	`luaX_√xt
(
ls
);

1299 i‡(
	`ã°√xt
(
ls
, 
TK_FUNCTION
))

1300 
	`loˇlfunc
(
ls
);

1302 
	`loˇl°©
(
ls
);

1305 
TK_RETURN
: {

1306 
	`ªt°©
(
ls
);

1309 
TK_BREAK
: {

1310 
	`luaX_√xt
(
ls
);

1311 
	`bªak°©
(
ls
);

1315 
	`ex¥°©
(
ls
);

1319 
	}
}

1322 
	$chunk
 (
LexSèã
 *
ls
) {

1324 
i¶a°
 = 0;

1325 
	`íãæevñ
(
ls
);

1326 !
i¶a°
 && !
	`block_fﬁlow
(
ls
->
t
.
tokí
)) {

1327 
i¶a°
 = 
	`°©emít
(
ls
);

1328 
	`ã°√xt
(
ls
, ';');

1329 
	`lua_as£π
(
ls
->
fs
->
f
->
max°acksize
 >ls->fs->
‰ìªg
 &&

1330 
ls
->
fs
->
‰ìªg
 >ls->fs->
«˘v¨
);

1331 
ls
->
fs
->
‰ìªg
 =Üs->fs->
«˘v¨
;

1333 
	`Àavñevñ
(
ls
);

1334 
	}
}

	@lparser.h

7 #i‚de‡
Õ¨£r_h


8 
	#Õ¨£r_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"…abÀ.h
"

13 
	~"lzio.h
"

21 
	mVVOID
,

22 
	mVNIL
,

23 
	mVTRUE
,

24 
	mVFALSE
,

25 
	mVK
,

26 
	mVKNUM
,

27 
	mVLOCAL
,

28 
	mVUPVAL
,

29 
	mVGLOBAL
,

30 
	mVINDEXED
,

31 
	mVJMP
,

32 
	mVRELOCABLE
,

33 
	mVNONRELOC
,

34 
	mVCALL
,

35 
	mVVARARG


36 } 
	texpköd
;

38 
	sexpdesc
 {

39 
expköd
 
	mk
;

41 °ru˘ { 
	möfo
, 
	maux
; } 
	ms
;

42 
lua_Numbî
 
	mnvÆ
;

43 } 
	mu
;

44 
	mt
;

45 
	mf
;

46 } 
	texpdesc
;

49 
	supvÆdesc
 {

50 
lu_byã
 
	mk
;

51 
lu_byã
 
	möfo
;

52 } 
	tupvÆdesc
;

55 
	gBlockC¡
;

59 
	sFuncSèã
 {

60 
PrŸo
 *
	mf
;

61 
TabÀ
 *
	mh
;

62 
FuncSèã
 *
	m¥ev
;

63 
LexSèã
 *
	mls
;

64 
lua_Sèã
 *
	mL
;

65 
BlockC¡
 *
	mbl
;

66 
	mpc
;

67 
	mœ°èrgë
;

68 
	mjpc
;

69 
	m‰ìªg
;

70 
	mnk
;

71 
	m≈
;

72 
	m∆ocv¨s
;

73 
lu_byã
 
	m«˘v¨
;

74 
upvÆdesc
 
	mupvÆues
[
LUAI_MAXUPVALUES
];

75 
	ma˘v¨
[
LUAI_MAXVARS
];

76 } 
	tFuncSèã
;

79 
LUAI_FUNC
 
PrŸo
 *
luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

80 c⁄° *
«me
);

	@lstate.c

8 
	~<°ddef.h
>

10 
	#l°©e_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"…abÀ.h
"

24 
	~"…m.h
"

27 
	#°©e_size
(
x
Ë((xË+ 
LUAI_EXTRASPACE
)

	)

28 
	#‰om°©e
(
l
Ë(
	`ˇ°
(
lu_byã
 *, (l)Ë- 
LUAI_EXTRASPACE
)

	)

29 
	#to°©e
(
l
Ë(
	`ˇ°
(
lua_Sèã
 *, ca°(
lu_byã
 *,ÜË+ 
LUAI_EXTRASPACE
))

	)

35 
	sLG
 {

36 
lua_Sèã
 
	ml
;

37 
globÆ_Sèã
 
	mg
;

38 } 
	tLG
;

42 
	$°ack_öô
 (
lua_Sèã
 *
L1
,Üua_Sèã *
L
) {

44 
L1
->
ba£_ci
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_CI_SIZE
, 
CÆlInfo
);

45 
L1
->
ci
 = L1->
ba£_ci
;

46 
L1
->
size_ci
 = 
BASIC_CI_SIZE
;

47 
L1
->
íd_ci
 = L1->
ba£_ci
 + L1->
size_ci
 - 1;

49 
L1
->
°ack
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
, 
TVÆue
);

50 
L1
->
°acksize
 = 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
;

51 
L1
->
t›
 = L1->
°ack
;

52 
L1
->
°ack_œ°
 = L1->
°ack
+(L1->
°acksize
 - 
EXTRA_STACK
)-1;

54 
L1
->
ci
->
func
 = L1->
t›
;

55 
	`£äûvÆue
(
L1
->
t›
++);

56 
L1
->
ba£
 = L1->
ci
->ba£ = L1->
t›
;

57 
L1
->
ci
->
t›
 = L1->t› + 
LUA_MINSTACK
;

58 
	}
}

61 
	$‰ì°ack
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

62 
	`luaM_‰ì¨øy
(
L
, 
L1
->
ba£_ci
, L1->
size_ci
, 
CÆlInfo
);

63 
	`luaM_‰ì¨øy
(
L
, 
L1
->
°ack
, L1->
°acksize
, 
TVÆue
);

64 
	}
}

70 
	$f_lua›í
 (
lua_Sèã
 *
L
, *
ud
) {

71 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

72 
	`UNUSED
(
ud
);

73 
	`°ack_öô
(
L
, L);

74 
	`£thvÆue
(
L
, 
	`gt
(L), 
	`luaH_√w
(L, 0, 2));

75 
	`£thvÆue
(
L
, 
	`ªgi°ry
(L), 
	`luaH_√w
(L, 0, 2));

76 
	`luaS_ªsize
(
L
, 
MINSTRTABSIZE
);

77 
	`luaT_öô
(
L
);

78 
	`luaX_öô
(
L
);

79 
	`luaS_fix
(
	`luaS_√wlôîÆ
(
L
, 
MEMERRMSG
));

80 
g
->
GCthªshﬁd
 = 4*g->
tŸÆbyãs
;

81 
	}
}

84 
	$¥eöô_°©e
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

85 
	`G
(
L
Ë
g
;

86 
L
->
°ack
 = 
NULL
;

87 
L
->
°acksize
 = 0;

88 
L
->
îr‹Jmp
 = 
NULL
;

89 
L
->
hook
 = 
NULL
;

90 
L
->
hookmask
 = 0;

91 
L
->
ba£hookcou¡
 = 0;

92 
L
->
Ælowhook
 = 1;

93 
	`ª£thookcou¡
(
L
);

94 
L
->
›íupvÆ
 = 
NULL
;

95 
L
->
size_ci
 = 0;

96 
L
->
nCˇŒs
 = 0;

97 
L
->
°©us
 = 0;

98 
L
->
ba£_ci
 = L->
ci
 = 
NULL
;

99 
L
->
ßvedpc
 = 
NULL
;

100 
L
->
îrfunc
 = 0;

101 
	`£äûvÆue
(
	`gt
(
L
));

102 
	}
}

105 
	$˛o£_°©e
 (
lua_Sèã
 *
L
) {

106 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

107 
	`luaF_˛o£
(
L
, L->
°ack
);

108 
	`luaC_‰ìÆl
(
L
);

109 
	`lua_as£π
(
g
->
roŸgc
 =
	`obj2gco
(
L
));

110 
	`lua_as£π
(
g
->
°π
.
nu£
 == 0);

111 
	`luaM_‰ì¨øy
(
L
, 
	`G
(L)->
°π
.
hash
, G(L)->°π.
size
, 
TSåög
 *);

112 
	`luaZ_‰ìbuf„r
(
L
, &
g
->
buff
);

113 
	`‰ì°ack
(
L
, L);

114 
	`lua_as£π
(
g
->
tŸÆbyãs
 =(
LG
));

115 (*
g
->
‰óŒoc
)(g->
ud
, 
	`‰om°©e
(
L
), 
	`°©e_size
(
LG
), 0);

116 
	}
}

119 
lua_Sèã
 *
	$luaE_√wthªad
 (
lua_Sèã
 *
L
) {

120 
lua_Sèã
 *
L1
 = 
	`to°©e
(
	`luaM_mÆloc
(
L
, 
	`°©e_size
(lua_State)));

121 
	`luaC_lök
(
L
, 
	`obj2gco
(
L1
), 
LUA_TTHREAD
);

122 
	`¥eöô_°©e
(
L1
, 
	`G
(
L
));

123 
	`°ack_öô
(
L1
, 
L
);

124 
	`£tobj2n
(
L
, 
	`gt
(
L1
), gt(L));

125 
L1
->
hookmask
 = 
L
->hookmask;

126 
L1
->
ba£hookcou¡
 = 
L
->basehookcount;

127 
L1
->
hook
 = 
L
->hook;

128 
	`ª£thookcou¡
(
L1
);

129 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
L1
)));

130  
L1
;

131 
	}
}

134 
	$luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

135 
	`luaF_˛o£
(
L1
, L1->
°ack
);

136 
	`lua_as£π
(
L1
->
›íupvÆ
 =
NULL
);

137 
	`luai_u£r°©e‰ì
(
L1
);

138 
	`‰ì°ack
(
L
, 
L1
);

139 
	`luaM_‰ìmem
(
L
, 
	`‰om°©e
(
L1
), 
	`°©e_size
(
lua_Sèã
));

140 
	}
}

143 
LUA_API
 
lua_Sèã
 *
	$lua_√w°©e
 (
lua_AŒoc
 
f
, *
ud
) {

144 
i
;

145 
lua_Sèã
 *
L
;

146 
globÆ_Sèã
 *
g
;

147 *
l
 = (*
f
)(
ud
, 
NULL
, 0, 
	`°©e_size
(
LG
));

148 i‡(
l
 =
NULL
)  NULL;

149 
L
 = 
	`to°©e
(
l
);

150 
g
 = &((
LG
 *)
L
)->g;

151 
L
->
√xt
 = 
NULL
;

152 
L
->
â
 = 
LUA_TTHREAD
;

153 
g
->
cuºítwhôe
 = 
	`bô2mask
(
WHITE0BIT
, 
FIXEDBIT
);

154 
L
->
m¨ked
 = 
	`luaC_whôe
(
g
);

155 
	`£t2bôs
(
L
->
m¨ked
, 
FIXEDBIT
, 
SFIXEDBIT
);

156 
	`¥eöô_°©e
(
L
, 
g
);

157 
g
->
‰óŒoc
 = 
f
;

158 
g
->
ud
 = ud;

159 
g
->
maöthªad
 = 
L
;

160 
g
->
uvhód
.
u
.
l
.
¥ev
 = &g->uvhead;

161 
g
->
uvhód
.
u
.
l
.
√xt
 = &g->uvhead;

162 
g
->
GCthªshﬁd
 = 0;

163 
g
->
°π
.
size
 = 0;

164 
g
->
°π
.
nu£
 = 0;

165 
g
->
°π
.
hash
 = 
NULL
;

166 
	`£äûvÆue
(
	`ªgi°ry
(
L
));

167 
	`luaZ_öôbuf„r
(
L
, &
g
->
buff
);

168 
g
->
∑nic
 = 
NULL
;

169 
g
->
gc°©e
 = 
GCS∑u£
;

170 
g
->
roŸgc
 = 
	`obj2gco
(
L
);

171 
g
->
swìp°rgc
 = 0;

172 
g
->
swìpgc
 = &g->
roŸgc
;

173 
g
->
gøy
 = 
NULL
;

174 
g
->
gøyagaö
 = 
NULL
;

175 
g
->
wók
 = 
NULL
;

176 
g
->
tmud©a
 = 
NULL
;

177 
g
->
tŸÆbyãs
 = (
LG
);

178 
g
->
g˝au£
 = 
LUAI_GCPAUSE
;

179 
g
->
gc°ïmul
 = 
LUAI_GCMUL
;

180 
g
->
gcdït
 = 0;

181 
i
=0; i<
NUM_TAGS
; i++Ë
g
->
mt
[i] = 
NULL
;

182 i‡(
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_lua›í
, 
NULL
) != 0) {

184 
	`˛o£_°©e
(
L
);

185 
L
 = 
NULL
;

188 
	`luai_u£r°©e›í
(
L
);

189  
L
;

190 
	}
}

193 
	$ˇŒÆlgcTM
 (
lua_Sèã
 *
L
, *
ud
) {

194 
	`UNUSED
(
ud
);

195 
	`luaC_ˇŒGCTM
(
L
);

196 
	}
}

199 
LUA_API
 
	$lua_˛o£
 (
lua_Sèã
 *
L
) {

200 
L
 = 
	`G
(L)->
maöthªad
;

201 
	`luai_u£r°©e˛o£
(
L
);

202 
	`lua_lock
(
L
);

203 
	`luaF_˛o£
(
L
, L->
°ack
);

204 
	`luaC_£∑øãud©a
(
L
, 1);

205 
L
->
îrfunc
 = 0;

207 
L
->
ci
 = L->
ba£_ci
;

208 
L
->
ba£
 = L->
t›
 = L->
ci
->base;

209 
L
->
nCˇŒs
 = 0;

210 } 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ˇŒÆlgcTM
, 
NULL
) != 0);

211 
	`lua_as£π
(
	`G
(
L
)->
tmud©a
 =
NULL
);

212 
	`˛o£_°©e
(
L
);

213 
	}
}

	@lstate.h

7 #i‚de‡
l°©e_h


8 
	#l°©e_h


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

14 
	~"lzio.h
"

18 
	glua_l⁄gjmp
;

22 
	#gt
(
L
Ë(&L->
l_gt
)

	)

25 
	#ªgi°ry
(
L
Ë(&
	`G
(L)->
l_ªgi°ry
)

	)

29 
	#EXTRA_STACK
 5

	)

32 
	#BASIC_CI_SIZE
 8

	)

34 
	#BASIC_STACK_SIZE
 (2*
LUA_MINSTACK
)

	)

38 
	s°rögèbÀ
 {

39 
GCObje˘
 **
	mhash
;

40 
lu_öt32
 
	mnu£
;

41 
	msize
;

42 } 
	t°rögèbÀ
;

48 
	sCÆlInfo
 {

49 
StkId
 
	mba£
;

50 
StkId
 
	mfunc
;

51 
StkId
 
	mt›
;

52 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

53 
	mƒesu…s
;

54 
	mèûˇŒs
;

55 } 
	tCÆlInfo
;

59 
	#cuº_func
(
L
Ë(
	`˛vÆue
(L->
ci
->
func
))

	)

60 
	#ci_func
(
ci
Ë(
	`˛vÆue
((ci)->
func
))

	)

61 
	#f_isLua
(
ci
Ë(!
	`ci_func
(ci)->
c
.
isC
)

	)

62 
	#isLua
(
ci
Ë(
	`âisfun˘i⁄
((ci)->
func
Ë&& 
	`f_isLua
(ci))

	)

68 
	sglobÆ_Sèã
 {

69 
°rögèbÀ
 
	m°π
;

70 
lua_AŒoc
 
	m‰óŒoc
;

71 *
	mud
;

72 
lu_byã
 
	mcuºítwhôe
;

73 
lu_byã
 
	mgc°©e
;

74 
	mswìp°rgc
;

75 
GCObje˘
 *
	mroŸgc
;

76 
GCObje˘
 **
	mswìpgc
;

77 
GCObje˘
 *
	mgøy
;

78 
GCObje˘
 *
	mgøyagaö
;

79 
GCObje˘
 *
	mwók
;

80 
GCObje˘
 *
	mtmud©a
;

81 
Mbuf„r
 
	mbuff
;

82 
lu_mem
 
	mGCthªshﬁd
;

83 
lu_mem
 
	mtŸÆbyãs
;

84 
lu_mem
 
	me°im©e
;

85 
lu_mem
 
	mgcdït
;

86 
	mg˝au£
;

87 
	mgc°ïmul
;

88 
lua_CFun˘i⁄
 
	m∑nic
;

89 
TVÆue
 
	ml_ªgi°ry
;

90 
lua_Sèã
 *
	mmaöthªad
;

91 
UpVÆ
 
	muvhód
;

92 
TabÀ
 *
	mmt
[
NUM_TAGS
];

93 
TSåög
 *
	mtm«me
[
TM_N
];

94 } 
	tglobÆ_Sèã
;

100 
	slua_Sèã
 {

101 
	mComm⁄Hódî
;

102 
lu_byã
 
	m°©us
;

103 
StkId
 
	mt›
;

104 
StkId
 
	mba£
;

105 
globÆ_Sèã
 *
	ml_G
;

106 
CÆlInfo
 *
	mci
;

107 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

108 
StkId
 
	m°ack_œ°
;

109 
StkId
 
	m°ack
;

110 
CÆlInfo
 *
	míd_ci
;

111 
CÆlInfo
 *
	mba£_ci
;

112 
	m°acksize
;

113 
	msize_ci
;

114 
	mnCˇŒs
;

115 
lu_byã
 
	mhookmask
;

116 
lu_byã
 
	mÆlowhook
;

117 
	mba£hookcou¡
;

118 
	mhookcou¡
;

119 
lua_Hook
 
	mhook
;

120 
TVÆue
 
	ml_gt
;

121 
TVÆue
 
	mív
;

122 
GCObje˘
 *
	m›íupvÆ
;

123 
GCObje˘
 *
	mg˛i°
;

124 
lua_l⁄gjmp
 *
	mîr‹Jmp
;

125 
±rdiff_t
 
	mîrfunc
;

129 
	#G
(
L
Ë(L->
l_G
)

	)

135 
	uGCObje˘
 {

136 
GChódî
 
	mgch
;

137 
TSåög
 
	mts
;

138 
Ud©a
 
	mu
;

139 
Closuª
 
	m˛
;

140 
TabÀ
 
	mh
;

141 
PrŸo
 
	mp
;

142 
UpVÆ
 
	muv
;

143 
lua_Sèã
 
	mth
;

148 
	#øwgco2ts
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TSTRING
, &((o)->
ts
))

	)

149 
	#gco2ts
(
o
Ë(&
	`øwgco2ts
(o)->
tsv
)

	)

150 
	#øwgco2u
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUSERDATA
, &((o)->
u
))

	)

151 
	#gco2u
(
o
Ë(&
	`øwgco2u
(o)->
uv
)

	)

152 
	#gco2˛
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TFUNCTION
, &((o)->
˛
))

	)

153 
	#gco2h
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTABLE
, &((o)->
h
))

	)

154 
	#gco2p
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TPROTO
, &((o)->
p
))

	)

155 
	#gco2uv
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

156 
	#ngcŸouv
(
o
) \

157 
	`check_exp
((
o
Ë=
NULL
 || (o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

158 
	#gco2th
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTHREAD
, &((o)->
th
))

	)

161 
	#obj2gco
(
v
Ë(
	`ˇ°
(
GCObje˘
 *, (v)))

	)

164 
LUAI_FUNC
 
lua_Sèã
 *
luaE_√wthªad
 (lua_Sèã *
L
);

165 
LUAI_FUNC
 
luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
);

	@lstring.c

8 
	~<°rög.h
>

10 
	#l°rög_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lmem.h
"

16 
	~"lobje˘.h
"

17 
	~"l°©e.h
"

18 
	~"l°rög.h
"

22 
	$luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
) {

23 
GCObje˘
 **
√whash
;

24 
°rögèbÀ
 *
tb
;

25 
i
;

26 i‡(
	`G
(
L
)->
gc°©e
 =
GCSswìp°rög
)

28 
√whash
 = 
	`luaM_√wve˘‹
(
L
, 
√wsize
, 
GCObje˘
 *);

29 
tb
 = &
	`G
(
L
)->
°π
;

30 
i
=0; i<
√wsize
; i++Ë
√whash
[i] = 
NULL
;

32 
i
=0; i<
tb
->
size
; i++) {

33 
GCObje˘
 *
p
 = 
tb
->
hash
[
i
];

34 
p
) {

35 
GCObje˘
 *
√xt
 = 
p
->
gch
.next;

36 
h
 = 
	`gco2ts
(
p
)->
hash
;

37 
h1
 = 
	`lmod
(
h
, 
√wsize
);

38 
	`lua_as£π
(
	`ˇ°_öt
(
h
%
√wsize
Ë=
	`lmod
(h,Çewsize));

39 
p
->
gch
.
√xt
 = 
√whash
[
h1
];

40 
√whash
[
h1
] = 
p
;

41 
p
 = 
√xt
;

44 
	`luaM_‰ì¨øy
(
L
, 
tb
->
hash
,Åb->
size
, 
TSåög
 *);

45 
tb
->
size
 = 
√wsize
;

46 
tb
->
hash
 = 
√whash
;

47 
	}
}

50 
TSåög
 *
	$√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
,

51 
h
) {

52 
TSåög
 *
ts
;

53 
°rögèbÀ
 *
tb
;

54 i‡(
l
+1 > (
MAX_SIZET
 - (
TSåög
))/())

55 
	`luaM_toobig
(
L
);

56 
ts
 = 
	`ˇ°
(
TSåög
 *, 
	`luaM_mÆloc
(
L
, (
l
+1)*()+(TString)));

57 
ts
->
tsv
.
Àn
 = 
l
;

58 
ts
->
tsv
.
hash
 = 
h
;

59 
ts
->
tsv
.
m¨ked
 = 
	`luaC_whôe
(
	`G
(
L
));

60 
ts
->
tsv
.
â
 = 
LUA_TSTRING
;

61 
ts
->
tsv
.
ª£rved
 = 0;

62 
	`mem˝y
(
ts
+1, 
°r
, 
l
*());

63 ((*)(
ts
+1))[
l
] = '\0';

64 
tb
 = &
	`G
(
L
)->
°π
;

65 
h
 = 
	`lmod
(h, 
tb
->
size
);

66 
ts
->
tsv
.
√xt
 = 
tb
->
hash
[
h
];

67 
tb
->
hash
[
h
] = 
	`obj2gco
(
ts
);

68 
tb
->
nu£
++;

69 i‡(
tb
->
nu£
 > 
	`ˇ°
(
lu_öt32
,Åb->
size
Ë&&Åb->sizê<
MAX_INT
/2)

70 
	`luaS_ªsize
(
L
, 
tb
->
size
*2);

71  
ts
;

72 
	}
}

75 
TSåög
 *
	$luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

76 
GCObje˘
 *
o
;

77 
h
 = 
	`ˇ°
(, 
l
);

78 
size_t
 
°ï
 = (
l
>>5)+1;

79 
size_t
 
l1
;

80 
l1
=
l
;Ü1>=
°ï
;Ü1-=step)

81 
h
 = h ^ ((h<<5)+(h>>2)+
	`ˇ°
(, 
°r
[
l1
-1]));

82 
o
 = 
	`G
(
L
)->
°π
.
hash
[
	`lmod
(
h
, G(L)->°π.
size
)];

83 
o
 !
NULL
;

84 
o
 = o->
gch
.
√xt
) {

85 
TSåög
 *
ts
 = 
	`øwgco2ts
(
o
);

86 i‡(
ts
->
tsv
.
Àn
 =
l
 && (
	`memcmp
(
°r
, 
	`gë°r
(ts),Ü) == 0)) {

88 i‡(
	`isdód
(
	`G
(
L
), 
o
)Ë
	`ch™gewhôe
(o);

89  
ts
;

92  
	`√wl°r
(
L
, 
°r
, 
l
, 
h
);

93 
	}
}

96 
Ud©a
 *
	$luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
, 
TabÀ
 *
e
) {

97 
Ud©a
 *
u
;

98 i‡(
s
 > 
MAX_SIZET
 - (
Ud©a
))

99 
	`luaM_toobig
(
L
);

100 
u
 = 
	`ˇ°
(
Ud©a
 *, 
	`luaM_mÆloc
(
L
, 
s
 + (Udata)));

101 
u
->
uv
.
m¨ked
 = 
	`luaC_whôe
(
	`G
(
L
));

102 
u
->
uv
.
â
 = 
LUA_TUSERDATA
;

103 
u
->
uv
.
Àn
 = 
s
;

104 
u
->
uv
.
më©abÀ
 = 
NULL
;

105 
u
->
uv
.
ív
 = 
e
;

107 
u
->
uv
.
√xt
 = 
	`G
(
L
)->
maöthªad
->next;

108 
	`G
(
L
)->
maöthªad
->
√xt
 = 
	`obj2gco
(
u
);

109  
u
;

110 
	}
}

	@lstring.h

7 #i‚de‡
l°rög_h


8 
	#l°rög_h


	)

11 
	~"lgc.h
"

12 
	~"lobje˘.h
"

13 
	~"l°©e.h
"

16 
	#size°rög
(
s
Ë((
TSåög
)+((s)->
Àn
+1)*())

	)

18 
	#sizeud©a
(
u
Ë((
Ud©a
)+(u)->
Àn
)

	)

20 
	#luaS_√w
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, s, 
	`°æí
(s)))

	)

21 
	#luaS_√wlôîÆ
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, "" s, \

22 ((
s
)/())-1))

	)

24 
	#luaS_fix
(
s
Ë
	`l_£tbô
((s)->
tsv
.
m¨ked
, 
FIXEDBIT
)

	)

26 
LUAI_FUNC
 
luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
);

27 
LUAI_FUNC
 
Ud©a
 *
luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
, 
TabÀ
 *
e
);

28 
LUAI_FUNC
 
TSåög
 *
luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
);

	@lstrlib.c

8 
	~<˘y≥.h
>

9 
	~<°ddef.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	#l°æib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

24 
	#uch¨
(
c
Ë(()(c))

	)

28 
	$°r_Àn
 (
lua_Sèã
 *
L
) {

29 
size_t
 
l
;

30 
	`luaL_checkl°rög
(
L
, 1, &
l
);

31 
	`lua_pushöãgî
(
L
, 
l
);

33 
	}
}

36 
±rdiff_t
 
	$po§ñ©
 (
±rdiff_t
 
pos
, 
size_t
 
Àn
) {

38  (
pos
>=0Ë?Öo†: (
±rdiff_t
)
Àn
+pos+1;

39 
	}
}

42 
	$°r_sub
 (
lua_Sèã
 *
L
) {

43 
size_t
 
l
;

44 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

45 
±rdiff_t
 
°¨t
 = 
	`po§ñ©
(
	`luaL_checköãgî
(
L
, 2), 
l
);

46 
±rdiff_t
 
íd
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
l
);

47 i‡(
°¨t
 < 1) start = 1;

48 i‡(
íd
 > (
±rdiff_t
)
l
)Énd = (ptrdiff_t)l;

49 i‡(
°¨t
 <
íd
)

50 
	`lua_pushl°rög
(
L
, 
s
+
°¨t
-1, 
íd
-start+1);

51 
	`lua_pushlôîÆ
(
L
, "");

53 
	}
}

56 
	$°r_ªvî£
 (
lua_Sèã
 *
L
) {

57 
size_t
 
l
;

58 
luaL_Buf„r
 
b
;

59 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

60 
	`luaL_bufföô
(
L
, &
b
);

61 
l
--Ë
	`luaL_addch¨
(&
b
, 
s
[l]);

62 
	`luaL_pushªsu…
(&
b
);

64 
	}
}

67 
	$°r_lowî
 (
lua_Sèã
 *
L
) {

68 
size_t
 
l
;

69 
size_t
 
i
;

70 
luaL_Buf„r
 
b
;

71 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

72 
	`luaL_bufföô
(
L
, &
b
);

73 
i
=0; i<
l
; i++)

74 
	`luaL_addch¨
(&
b
, 
	`tﬁowî
(
	`uch¨
(
s
[
i
])));

75 
	`luaL_pushªsu…
(&
b
);

77 
	}
}

80 
	$°r_uµî
 (
lua_Sèã
 *
L
) {

81 
size_t
 
l
;

82 
size_t
 
i
;

83 
luaL_Buf„r
 
b
;

84 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

85 
	`luaL_bufföô
(
L
, &
b
);

86 
i
=0; i<
l
; i++)

87 
	`luaL_addch¨
(&
b
, 
	`touµî
(
	`uch¨
(
s
[
i
])));

88 
	`luaL_pushªsu…
(&
b
);

90 
	}
}

92 
	$°r_ªp
 (
lua_Sèã
 *
L
) {

93 
size_t
 
l
;

94 
luaL_Buf„r
 
b
;

95 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

96 
n
 = 
	`luaL_checköt
(
L
, 2);

97 
	`luaL_bufföô
(
L
, &
b
);

98 
n
-- > 0)

99 
	`luaL_addl°rög
(&
b
, 
s
, 
l
);

100 
	`luaL_pushªsu…
(&
b
);

102 
	}
}

105 
	$°r_byã
 (
lua_Sèã
 *
L
) {

106 
size_t
 
l
;

107 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

108 
±rdiff_t
 
posi
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
l
);

109 
±rdiff_t
 
po£
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
l
);

110 
n
, 
i
;

111 i‡(
posi
 <= 0)Öosi = 1;

112 i‡((
size_t
)
po£
 > 
l
)Öose =Ü;

113 i‡(
posi
 > 
po£
)  0;

114 
n
 = ()(
po£
 - 
posi
 + 1);

115 i‡(
posi
 + 
n
 <
po£
)

116 
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

117 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

118 
i
=0; i<
n
; i++)

119 
	`lua_pushöãgî
(
L
, 
	`uch¨
(
s
[
posi
+
i
-1]));

120  
n
;

121 
	}
}

124 
	$°r_ch¨
 (
lua_Sèã
 *
L
) {

125 
n
 = 
	`lua_gët›
(
L
);

126 
i
;

127 
luaL_Buf„r
 
b
;

128 
	`luaL_bufföô
(
L
, &
b
);

129 
i
=1; i<=
n
; i++) {

130 
c
 = 
	`luaL_checköt
(
L
, 
i
);

131 
	`luaL_¨gcheck
(
L
, 
	`uch¨
(
c
Ë=c, 
i
, "invalid value");

132 
	`luaL_addch¨
(&
b
, 
	`uch¨
(
c
));

134 
	`luaL_pushªsu…
(&
b
);

136 
	}
}

139 
	$wrôî
 (
lua_Sèã
 *
L
, c⁄° * 
b
, 
size_t
 
size
, * 
B
) {

140 ()
L
;

141 
	`luaL_addl°rög
((
luaL_Buf„r
*Ë
B
, (c⁄° *)
b
, 
size
);

143 
	}
}

146 
	$°r_dump
 (
lua_Sèã
 *
L
) {

147 
luaL_Buf„r
 
b
;

148 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

149 
	`lua_£â›
(
L
, 1);

150 
	`luaL_bufföô
(
L
,&
b
);

151 i‡(
	`lua_dump
(
L
, 
wrôî
, &
b
) != 0)

152 
	`luaL_îr‹
(
L
, "unableÅo dump given function");

153 
	`luaL_pushªsu…
(&
b
);

155 
	}
}

166 
	#CAP_UNFINISHED
 (-1)

	)

167 
	#CAP_POSITION
 (-2)

	)

169 
	sM©chSèã
 {

170 c⁄° *
	m§c_öô
;

171 c⁄° *
	m§c_íd
;

172 
lua_Sèã
 *
	mL
;

173 
	mÀvñ
;

175 c⁄° *
	möô
;

176 
±rdiff_t
 
	mÀn
;

177 } 
	mˇ±uª
[
LUA_MAXCAPTURES
];

178 } 
	tM©chSèã
;

181 
	#L_ESC
 '%'

	)

182 
	#SPECIALS
 "^$*+?.([%-"

	)

185 
	$check_ˇ±uª
 (
M©chSèã
 *
ms
, 
l
) {

186 
l
 -= '1';

187 i‡(
l
 < 0 ||Ü >
ms
->
Àvñ
 || ms->
ˇ±uª
[l].
Àn
 =
CAP_UNFINISHED
)

188  
	`luaL_îr‹
(
ms
->
L
, "invalid capture index");

189  
l
;

190 
	}
}

193 
	$ˇ±uª_to_˛o£
 (
M©chSèã
 *
ms
) {

194 
Àvñ
 = 
ms
->level;

195 
Àvñ
--;Üevel>=0;Üevel--)

196 i‡(
ms
->
ˇ±uª
[
Àvñ
].
Àn
 =
CAP_UNFINISHED
) Üevel;

197  
	`luaL_îr‹
(
ms
->
L
, "invalidÖattern capture");

198 
	}
}

201 c⁄° *
	$˛as£nd
 (
M©chSèã
 *
ms
, c⁄° *
p
) {

202 *
p
++) {

203 
L_ESC
: {

204 i‡(*
p
 == '\0')

205 
	`luaL_îr‹
(
ms
->
L
, "mÆf‹medÖ©ã∫ (íd†wôh " 
	`LUA_QL
("%%") ")");

206  
p
+1;

209 i‡(*
p
 == '^')Ö++;

211 i‡(*
p
 == '\0')

212 
	`luaL_îr‹
(
ms
->
L
, "mÆf‹medÖ©ã∫ (missög " 
	`LUA_QL
("]") ")");

213 i‡(*(
p
++Ë=
L_ESC
 && *p != '\0')

214 
p
++;

215 } *
p
 != ']');

216  
p
+1;

219  
p
;

222 
	}
}

225 
	$m©ch_˛ass
 (
c
, 
˛
) {

226 
ªs
;

227 
	`tﬁowî
(
˛
)) {

228 'a' : 
ªs
 = 
	`ißÕha
(
c
); ;

229 'c' : 
ªs
 = 
	`is˙ål
(
c
); ;

230 'd' : 
ªs
 = 
	`isdigô
(
c
); ;

231 'l' : 
ªs
 = 
	`i¶owî
(
c
); ;

232 'p' : 
ªs
 = 
	`i•un˘
(
c
); ;

233 's' : 
ªs
 = 
	`is•a˚
(
c
); ;

234 'u' : 
ªs
 = 
	`isuµî
(
c
); ;

235 'w' : 
ªs
 = 
	`iß um
(
c
); ;

236 'x' : 
ªs
 = 
	`isxdigô
(
c
); ;

237 'z' : 
ªs
 = (
c
 == 0); ;

238 :  (
˛
 =
c
);

240  (
	`i¶owî
(
˛
Ë? 
ªs
 : !res);

241 
	}
}

244 
	$m©chbøckë˛ass
 (
c
, c⁄° *
p
, c⁄° *
ec
) {

245 
sig
 = 1;

246 i‡(*(
p
+1) == '^') {

247 
sig
 = 0;

248 
p
++;

250 ++
p
 < 
ec
) {

251 i‡(*
p
 =
L_ESC
) {

252 
p
++;

253 i‡(
	`m©ch_˛ass
(
c
, 
	`uch¨
(*
p
)))

254  
sig
;

256 i‡((*(
p
+1Ë='-'Ë&& (p+2 < 
ec
)) {

257 
p
+=2;

258 i‡(
	`uch¨
(*(
p
-2)Ë<
c
 && c <= uchar(*p))

259  
sig
;

261 i‡(
	`uch¨
(*
p
Ë=
c
Ë 
sig
;

263  !
sig
;

264 
	}
}

267 
	$sögÀm©ch
 (
c
, c⁄° *
p
, c⁄° *
ï
) {

268 *
p
) {

270 
L_ESC
:  
	`m©ch_˛ass
(
c
, 
	`uch¨
(*(
p
+1)));

271 '[':  
	`m©chbøckë˛ass
(
c
, 
p
, 
ï
-1);

272 :  (
	`uch¨
(*
p
Ë=
c
);

274 
	}
}

277 c⁄° *
m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
);

280 c⁄° *
	$m©chbÆ™˚
 (
M©chSèã
 *
ms
, c⁄° *
s
,

281 c⁄° *
p
) {

282 i‡(*
p
 == 0 || *(p+1) == 0)

283 
	`luaL_îr‹
(
ms
->
L
, "unbalancedÖattern");

284 i‡(*
s
 !*
p
Ë 
NULL
;

286 
b
 = *
p
;

287 
e
 = *(
p
+1);

288 
c⁄t
 = 1;

289 ++
s
 < 
ms
->
§c_íd
) {

290 i‡(*
s
 =
e
) {

291 i‡(--
c⁄t
 =0Ë 
s
+1;

293 i‡(*
s
 =
b
Ë
c⁄t
++;

296  
NULL
;

297 
	}
}

300 c⁄° *
	$max_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

301 c⁄° *
p
, c⁄° *
ï
) {

302 
±rdiff_t
 
i
 = 0;

303 (
s
+
i
)<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*(s+i)), 
p
, 
ï
))

304 
i
++;

306 
i
>=0) {

307 c⁄° *
ªs
 = 
	`m©ch
(
ms
, (
s
+
i
), 
ï
+1);

308 i‡(
ªs
) Ñes;

309 
i
--;

311  
NULL
;

312 
	}
}

315 c⁄° *
	$mö_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

316 c⁄° *
p
, c⁄° *
ï
) {

318 c⁄° *
ªs
 = 
	`m©ch
(
ms
, 
s
, 
ï
+1);

319 i‡(
ªs
 !
NULL
)

320  
ªs
;

321 i‡(
s
<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
))

322 
s
++;

323  
NULL
;

325 
	}
}

328 c⁄° *
	$°¨t_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

329 c⁄° *
p
, 
wh©
) {

330 c⁄° *
ªs
;

331 
Àvñ
 = 
ms
->level;

332 i‡(
Àvñ
 >
LUA_MAXCAPTURES
Ë
	`luaL_îr‹
(
ms
->
L
, "too many captures");

333 
ms
->
ˇ±uª
[
Àvñ
].
öô
 = 
s
;

334 
ms
->
ˇ±uª
[
Àvñ
].
Àn
 = 
wh©
;

335 
ms
->
Àvñ
 =Üevel+1;

336 i‡((
ªs
=
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

337 
ms
->
Àvñ
--;

338  
ªs
;

339 
	}
}

342 c⁄° *
	$íd_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

343 c⁄° *
p
) {

344 
l
 = 
	`ˇ±uª_to_˛o£
(
ms
);

345 c⁄° *
ªs
;

346 
ms
->
ˇ±uª
[
l
].
Àn
 = 
s
 - ms->ˇ±uª[l].
öô
;

347 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

348 
ms
->
ˇ±uª
[
l
].
Àn
 = 
CAP_UNFINISHED
;

349  
ªs
;

350 
	}
}

353 c⁄° *
	$m©ch_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
, 
l
) {

354 
size_t
 
Àn
;

355 
l
 = 
	`check_ˇ±uª
(
ms
,Ü);

356 
Àn
 = 
ms
->
ˇ±uª
[
l
].len;

357 i‡((
size_t
)(
ms
->
§c_íd
-
s
Ë>
Àn
 &&

358 
	`memcmp
(
ms
->
ˇ±uª
[
l
].
öô
, 
s
, 
Àn
) == 0)

359  
s
+
Àn
;

360  
NULL
;

361 
	}
}

364 c⁄° *
	$m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
) {

365 
öô
:

366 *
p
) {

368 i‡(*(
p
+1) == ')')

369  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
+2, 
CAP_POSITION
);

371  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
+1, 
CAP_UNFINISHED
);

374  
	`íd_ˇ±uª
(
ms
, 
s
, 
p
+1);

376 
L_ESC
: {

377 *(
p
+1)) {

379 
s
 = 
	`m©chbÆ™˚
(
ms
, s, 
p
+2);

380 i‡(
s
 =
NULL
)  NULL;

381 
p
+=4; 
öô
;

384 c⁄° *
ï
; 
¥evious
;

385 
p
 += 2;

386 i‡(*
p
 != '[')

387 
	`luaL_îr‹
(
ms
->
L
, "missög " 
	`LUA_QL
("[") "áfter "

388 
	`LUA_QL
("%%f") " inÖattern");

389 
ï
 = 
	`˛as£nd
(
ms
, 
p
);

390 
¥evious
 = (
s
 =
ms
->
§c_öô
) ? '\0' : *(s-1);

391 i‡(
	`m©chbøckë˛ass
(
	`uch¨
(
¥evious
), 
p
, 
ï
-1) ||

392 !
	`m©chbøckë˛ass
(
	`uch¨
(*
s
), 
p
, 
ï
-1)Ë 
NULL
;

393 
p
=
ï
; 
öô
;

396 i‡(
	`isdigô
(
	`uch¨
(*(
p
+1)))) {

397 
s
 = 
	`m©ch_ˇ±uª
(
ms
, s, 
	`uch¨
(*(
p
+1)));

398 i‡(
s
 =
NULL
)  NULL;

399 
p
+=2; 
öô
;

401 
dÊt
;

406  
s
;

409 i‡(*(
p
+1) == '\0')

410  (
s
 =
ms
->
§c_íd
Ë? s : 
NULL
;

411 
dÊt
;

413 : 
dÊt
: {

414 c⁄° *
ï
 = 
	`˛as£nd
(
ms
, 
p
);

415 
m
 = 
s
<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
);

416 *
ï
) {

418 c⁄° *
ªs
;

419 i‡(
m
 && ((
ªs
=
	`m©ch
(
ms
, 
s
+1, 
ï
+1)Ë!
NULL
))

420  
ªs
;

421 
p
=
ï
+1; 
öô
;

424  
	`max_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

427  (
m
 ? 
	`max_ex∑nd
(
ms
, 
s
+1, 
p
, 
ï
Ë: 
NULL
);

430  
	`mö_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

433 i‡(!
m
Ë 
NULL
;

434 
s
++; 
p
=
ï
; 
öô
;

439 
	}
}

443 c⁄° *
	$lmemföd
 (c⁄° *
s1
, 
size_t
 
l1
,

444 c⁄° *
s2
, 
size_t
 
l2
) {

445 i‡(
l2
 =0Ë 
s1
;

446 i‡(
l2
 > 
l1
Ë 
NULL
;

448 c⁄° *
öô
;

449 
l2
--;

450 
l1
 =Ü1-
l2
;

451 
l1
 > 0 && (
öô
 = (c⁄° *)
	`memchr
(
s1
, *
s2
,Ü1)Ë!
NULL
) {

452 
öô
++;

453 i‡(
	`memcmp
(
öô
, 
s2
+1, 
l2
) == 0)

454  
öô
-1;

456 
l1
 -
öô
-
s1
;

457 
s1
 = 
öô
;

460  
NULL
;

462 
	}
}

465 
	$push_⁄eˇ±uª
 (
M©chSèã
 *
ms
, 
i
, c⁄° *
s
,

466 c⁄° *
e
) {

467 i‡(
i
 >
ms
->
Àvñ
) {

468 i‡(
i
 == 0)

469 
	`lua_pushl°rög
(
ms
->
L
, 
s
, 
e
 - s);

471 
	`luaL_îr‹
(
ms
->
L
, "invalid capture index");

474 
±rdiff_t
 
l
 = 
ms
->
ˇ±uª
[
i
].
Àn
;

475 i‡(
l
 =
CAP_UNFINISHED
Ë
	`luaL_îr‹
(
ms
->
L
, "unfinished capture");

476 i‡(
l
 =
CAP_POSITION
)

477 
	`lua_pushöãgî
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
 - ms->
§c_öô
 + 1);

479 
	`lua_pushl°rög
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
, 
l
);

481 
	}
}

484 
	$push_ˇ±uªs
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
e
) {

485 
i
;

486 
∆evñs
 = (
ms
->
Àvñ
 =0 && 
s
) ? 1 : ms->level;

487 
	`luaL_check°ack
(
ms
->
L
, 
∆evñs
, "too many captures");

488 
i
 = 0; i < 
∆evñs
; i++)

489 
	`push_⁄eˇ±uª
(
ms
, 
i
, 
s
, 
e
);

490  
∆evñs
;

491 
	}
}

494 
	$°r_föd_aux
 (
lua_Sèã
 *
L
, 
föd
) {

495 
size_t
 
l1
, 
l2
;

496 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l1
);

497 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
l2
);

498 
±rdiff_t
 
öô
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
l1
) - 1;

499 i‡(
öô
 < 0) init = 0;

500 i‡((
size_t
)(
öô
Ë> 
l1
Ëöô = (
±rdiff_t
)l1;

501 i‡(
föd
 && (
	`lua_toboﬁón
(
L
, 4) ||

502 
	`°Ωbrk
(
p
, 
SPECIALS
Ë=
NULL
)) {

504 c⁄° *
s2
 = 
	`lmemföd
(
s
+
öô
, 
l1
-öô, 
p
, 
l2
);

505 i‡(
s2
) {

506 
	`lua_pushöãgî
(
L
, 
s2
-
s
+1);

507 
	`lua_pushöãgî
(
L
, 
s2
-
s
+
l2
);

512 
M©chSèã
 
ms
;

513 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

514 c⁄° *
s1
=
s
+
öô
;

515 
ms
.
L
 = L;

516 
ms
.
§c_öô
 = 
s
;

517 
ms
.
§c_íd
 = 
s
+
l1
;

519 c⁄° *
ªs
;

520 
ms
.
Àvñ
 = 0;

521 i‡((
ªs
=
	`m©ch
(&
ms
, 
s1
, 
p
)Ë!
NULL
) {

522 i‡(
föd
) {

523 
	`lua_pushöãgî
(
L
, 
s1
-
s
+1);

524 
	`lua_pushöãgî
(
L
, 
ªs
-
s
);

525  
	`push_ˇ±uªs
(&
ms
, 
NULL
, 0) + 2;

528  
	`push_ˇ±uªs
(&
ms
, 
s1
, 
ªs
);

530 } 
s1
++ < 
ms
.
§c_íd
 && !
™ch‹
);

532 
	`lua_pushnû
(
L
);

534 
	}
}

537 
	$°r_föd
 (
lua_Sèã
 *
L
) {

538  
	`°r_föd_aux
(
L
, 1);

539 
	}
}

542 
	$°r_m©ch
 (
lua_Sèã
 *
L
) {

543  
	`°r_föd_aux
(
L
, 0);

544 
	}
}

547 
	$gm©ch_aux
 (
lua_Sèã
 *
L
) {

548 
M©chSèã
 
ms
;

549 
size_t
 
ls
;

550 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
	`lua_upvÆueödex
(1), &
ls
);

551 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
	`lua_upvÆueödex
(2));

552 c⁄° *
§c
;

553 
ms
.
L
 = L;

554 
ms
.
§c_öô
 = 
s
;

555 
ms
.
§c_íd
 = 
s
+
ls
;

556 
§c
 = 
s
 + (
size_t
)
	`lua_toöãgî
(
L
, 
	`lua_upvÆueödex
(3));

557 
§c
 <
ms
.
§c_íd
;

558 
§c
++) {

559 c⁄° *
e
;

560 
ms
.
Àvñ
 = 0;

561 i‡((
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
)Ë!
NULL
) {

562 
lua_I¡egî
 
√w°¨t
 = 
e
-
s
;

563 i‡(
e
 =
§c
Ë
√w°¨t
++;

564 
	`lua_pushöãgî
(
L
, 
√w°¨t
);

565 
	`lua_ª∂a˚
(
L
, 
	`lua_upvÆueödex
(3));

566  
	`push_ˇ±uªs
(&
ms
, 
§c
, 
e
);

570 
	}
}

573 
	$gm©ch
 (
lua_Sèã
 *
L
) {

574 
	`luaL_check°rög
(
L
, 1);

575 
	`luaL_check°rög
(
L
, 2);

576 
	`lua_£â›
(
L
, 2);

577 
	`lua_pushöãgî
(
L
, 0);

578 
	`lua_pushc˛osuª
(
L
, 
gm©ch_aux
, 3);

580 
	}
}

583 
	$gföd_nodef
 (
lua_Sèã
 *
L
) {

584  
	`luaL_îr‹
(
L
, 
	`LUA_QL
("string.gfind") " wasÑenamedÅo "

585 
	`LUA_QL
("string.gmatch"));

586 
	}
}

589 
	$add_s
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

590 c⁄° *
e
) {

591 
size_t
 
l
, 
i
;

592 c⁄° *
√ws
 = 
	`lua_tﬁ°rög
(
ms
->
L
, 3, &
l
);

593 
i
 = 0; i < 
l
; i++) {

594 i‡(
√ws
[
i
] !
L_ESC
)

595 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

597 
i
++;

598 i‡(!
	`isdigô
(
	`uch¨
(
√ws
[
i
])))

599 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

600 i‡(
√ws
[
i
] == '0')

601 
	`luaL_addl°rög
(
b
, 
s
, 
e
 - s);

603 
	`push_⁄eˇ±uª
(
ms
, 
√ws
[
i
] - '1', 
s
, 
e
);

604 
	`luaL_addvÆue
(
b
);

608 
	}
}

611 
	$add_vÆue
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

612 c⁄° *
e
) {

613 
lua_Sèã
 *
L
 = 
ms
->L;

614 
	`lua_ty≥
(
L
, 3)) {

615 
LUA_TNUMBER
:

616 
LUA_TSTRING
: {

617 
	`add_s
(
ms
, 
b
, 
s
, 
e
);

620 
LUA_TFUNCTION
: {

621 
n
;

622 
	`lua_pushvÆue
(
L
, 3);

623 
n
 = 
	`push_ˇ±uªs
(
ms
, 
s
, 
e
);

624 
	`lua_ˇŒ
(
L
, 
n
, 1);

627 
LUA_TTABLE
: {

628 
	`push_⁄eˇ±uª
(
ms
, 0, 
s
, 
e
);

629 
	`lua_gëèbÀ
(
L
, 3);

633 
	`luaL_¨gîr‹
(
L
, 3, "string/function/tableÉxpected");

637 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

638 
	`lua_p›
(
L
, 1);

639 
	`lua_pushl°rög
(
L
, 
s
, 
e
 - s);

641 i‡(!
	`lua_is°rög
(
L
, -1))

642 
	`luaL_îr‹
(
L
, "övÆidÑïœ˚míàvÆuê◊ %s)", 
	`luaL_ty≥«me
(L, -1));

643 
	`luaL_addvÆue
(
b
);

644 
	}
}

647 
	$°r_gsub
 (
lua_Sèã
 *
L
) {

648 
size_t
 
§˛
;

649 c⁄° *
§c
 = 
	`luaL_checkl°rög
(
L
, 1, &
§˛
);

650 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 2);

651 
max_s
 = 
	`luaL_›töt
(
L
, 4, 
§˛
+1);

652 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

653 
n
 = 0;

654 
M©chSèã
 
ms
;

655 
luaL_Buf„r
 
b
;

656 
	`luaL_bufföô
(
L
, &
b
);

657 
ms
.
L
 = L;

658 
ms
.
§c_öô
 = 
§c
;

659 
ms
.
§c_íd
 = 
§c
+
§˛
;

660 
n
 < 
max_s
) {

661 c⁄° *
e
;

662 
ms
.
Àvñ
 = 0;

663 
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
);

664 i‡(
e
) {

665 
n
++;

666 
	`add_vÆue
(&
ms
, &
b
, 
§c
, 
e
);

668 i‡(
e
 &&É>
§c
)

669 
§c
 = 
e
;

670 i‡(
§c
 < 
ms
.
§c_íd
)

671 
	`luaL_addch¨
(&
b
, *
§c
++);

673 i‡(
™ch‹
) ;

675 
	`luaL_addl°rög
(&
b
, 
§c
, 
ms
.
§c_íd
-src);

676 
	`luaL_pushªsu…
(&
b
);

677 
	`lua_pushöãgî
(
L
, 
n
);

679 
	}
}

685 
	#MAX_ITEM
 512

	)

687 
	#FLAGS
 "-+ #0"

	)

692 
	#MAX_FORMAT
 ((
FLAGS
Ë+ (
LUA_INTFRMLEN
Ë+ 10)

	)

695 
	$addquŸed
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
¨g
) {

696 
size_t
 
l
;

697 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

698 
	`luaL_addch¨
(
b
, '"');

699 
l
--) {

700 *
s
) {

702 
	`luaL_addch¨
(
b
, '\\');

703 
	`luaL_addch¨
(
b
, *
s
);

707 
	`luaL_addl°rög
(
b
, "\\000", 4);

711 
	`luaL_addch¨
(
b
, *
s
);

715 
s
++;

717 
	`luaL_addch¨
(
b
, '"');

718 
	}
}

720 c⁄° *
	$sˇnf‹m©
 (
lua_Sèã
 *
L
, c⁄° *
°r‰mt
, *
f‹m
) {

721 c⁄° *
p
 = 
°r‰mt
;

722 
	`°rchr
(
FLAGS
, *
p
))Ö++;

723 i‡((
size_t
)(
p
 - 
°r‰mt
Ë>(
FLAGS
))

724 
	`luaL_îr‹
(
L
, "invalid format (repeated flags)");

725 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

726 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

727 i‡(*
p
 == '.') {

728 
p
++;

729 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

730 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

732 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

733 
	`luaL_îr‹
(
L
, "invalid format (width orÖrecisionÅooÜong)");

734 *(
f‹m
++) = '%';

735 
	`°∫˝y
(
f‹m
, 
°r‰mt
, 
p
 - strfrmt + 1);

736 
f‹m
 +
p
 - 
°r‰mt
 + 1;

737 *
f‹m
 = '\0';

738  
p
;

739 
	}
}

742 
	$addöéí
 (*
f‹m
) {

743 
size_t
 
l
 = 
	`°æí
(
f‹m
);

744 
•ec
 = 
f‹m
[
l
 - 1];

745 
	`°r˝y
(
f‹m
 + 
l
 - 1, 
LUA_INTFRMLEN
);

746 
f‹m
[
l
 + (
LUA_INTFRMLEN
Ë- 2] = 
•ec
;

747 
f‹m
[
l
 + (
LUA_INTFRMLEN
) - 1] = '\0';

748 
	}
}

751 
	$°r_f‹m©
 (
lua_Sèã
 *
L
) {

752 
¨g
 = 1;

753 
size_t
 
sÊ
;

754 c⁄° *
°r‰mt
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
sÊ
);

755 c⁄° *
°r‰mt_íd
 = 
°r‰mt
+
sÊ
;

756 
luaL_Buf„r
 
b
;

757 
	`luaL_bufföô
(
L
, &
b
);

758 
°r‰mt
 < 
°r‰mt_íd
) {

759 i‡(*
°r‰mt
 !
L_ESC
)

760 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

761 i‡(*++
°r‰mt
 =
L_ESC
)

762 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

764 
f‹m
[
MAX_FORMAT
];

765 
buff
[
MAX_ITEM
];

766 
¨g
++;

767 
°r‰mt
 = 
	`sˇnf‹m©
(
L
, så‰mt, 
f‹m
);

768 *
°r‰mt
++) {

770 
	`•rötf
(
buff
, 
f‹m
, ()
	`luaL_checknumbî
(
L
, 
¨g
));

774 
	`addöéí
(
f‹m
);

775 
	`•rötf
(
buff
, 
f‹m
, (
LUA_INTFRM_T
)
	`luaL_checknumbî
(
L
, 
¨g
));

779 
	`addöéí
(
f‹m
);

780 
	`•rötf
(
buff
, 
f‹m
, (
LUA_INTFRM_T
)
	`luaL_checknumbî
(
L
, 
¨g
));

785 
	`•rötf
(
buff
, 
f‹m
, ()
	`luaL_checknumbî
(
L
, 
¨g
));

789 
	`addquŸed
(
L
, &
b
, 
¨g
);

793 
size_t
 
l
;

794 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

795 i‡(!
	`°rchr
(
f‹m
, '.'Ë&& 
l
 >= 100) {

798 
	`lua_pushvÆue
(
L
, 
¨g
);

799 
	`luaL_addvÆue
(&
b
);

803 
	`•rötf
(
buff
, 
f‹m
, 
s
);

808  
	`luaL_îr‹
(
L
, "övÆid o±i⁄Åÿ" 
	`LUA_QL
("format"));

811 
	`luaL_addl°rög
(&
b
, 
buff
, 
	`°æí
(buff));

814 
	`luaL_pushªsu…
(&
b
);

816 
	}
}

819 c⁄° 
luaL_Reg
 
	g°æib
[] = {

820 {"byã", 
°r_byã
},

821 {"ch¨", 
°r_ch¨
},

822 {"dump", 
°r_dump
},

823 {"föd", 
°r_föd
},

824 {"f‹m©", 
°r_f‹m©
},

825 {"gföd", 
gföd_nodef
},

826 {"gm©ch", 
gm©ch
},

827 {"gsub", 
°r_gsub
},

828 {"Àn", 
°r_Àn
},

829 {"lowî", 
°r_lowî
},

830 {"m©ch", 
°r_m©ch
},

831 {"ªp", 
°r_ªp
},

832 {"ªvî£", 
°r_ªvî£
},

833 {"sub", 
°r_sub
},

834 {"uµî", 
°r_uµî
},

835 {
NULL
, NULL}

839 
	$¸óãmë©abÀ
 (
lua_Sèã
 *
L
) {

840 
	`lua_¸óãèbÀ
(
L
, 0, 1);

841 
	`lua_pushlôîÆ
(
L
, "");

842 
	`lua_pushvÆue
(
L
, -2);

843 
	`lua_£tmë©abÀ
(
L
, -2);

844 
	`lua_p›
(
L
, 1);

845 
	`lua_pushvÆue
(
L
, -2);

846 
	`lua_£tfõld
(
L
, -2, "__index");

847 
	`lua_p›
(
L
, 1);

848 
	}
}

854 
LUALIB_API
 
	$lua›í_°rög
 (
lua_Sèã
 *
L
) {

855 
	`luaL_ªgi°î
(
L
, 
LUA_STRLIBNAME
, 
°æib
);

856 #i‡
	`deföed
(
LUA_COMPAT_GFIND
)

857 
	`lua_gëfõld
(
L
, -1, "gmatch");

858 
	`lua_£tfõld
(
L
, -2, "gfind");

860 
	`¸óãmë©abÀ
(
L
);

862 
	}
}

	@ltable.c

21 
	~<m©h.h
>

22 
	~<°rög.h
>

24 
	#…abÀ_c


	)

25 
	#LUA_CORE


	)

27 
	~"lua.h
"

29 
	~"ldebug.h
"

30 
	~"ldo.h
"

31 
	~"lgc.h
"

32 
	~"lmem.h
"

33 
	~"lobje˘.h
"

34 
	~"l°©e.h
"

35 
	~"…abÀ.h
"

41 #i‡
LUAI_BITSINT
 > 26

42 
	#MAXBITS
 26

	)

44 
	#MAXBITS
 (
LUAI_BITSINT
-2)

	)

47 
	#MAXASIZE
 (1 << 
MAXBITS
)

	)

50 
	#hashpow2
(
t
,
n
Ë(
	`gnode
—, 
	`lmod
(“), 
	`sizíode
—))))

	)

52 
	#hash°r
(
t
,
°r
Ë
	`hashpow2
—, (°r)->
tsv
.
hash
)

	)

53 
	#hashboﬁón
(
t
,
p
Ë
	`hashpow2
—,Ö)

	)

60 
	#hashmod
(
t
,
n
Ë(
	`gnode
—, (“Ë% ((
	`sizíode
—)-1)|1))))

	)

63 
	#hashpoöãr
(
t
,
p
Ë
	`hashmod
—, 
	`I¡Poöt
’))

	)

69 
	#numöts
 
	`ˇ°_öt
((
lua_Numbî
)/())

	)

73 
	#dummynode
 (&
dummynode_
)

	)

75 c⁄° 
Node
 
	gdummynode_
 = {

76 {{
NULL
}, 
LUA_TNIL
},

77 {{{
NULL
}, 
LUA_TNIL
, NULL}}

84 
Node
 *
	$hashnum
 (c⁄° 
TabÀ
 *
t
, 
lua_Numbî
 
n
) {

85 
a
[
numöts
];

86 
i
;

87 
n
 += 1;

88 
	`lua_as£π
((
a
Ë<(
n
));

89 
	`mem˝y
(
a
, &
n
, (a));

90 
i
 = 1; i < 
numöts
; i++Ë
a
[0] +=á[i];

91  
	`hashmod
(
t
, 
a
[0]);

92 
	}
}

100 
Node
 *
	$maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

101 
	`ây≥
(
key
)) {

102 
LUA_TNUMBER
:

103  
	`hashnum
(
t
, 
	`nvÆue
(
key
));

104 
LUA_TSTRING
:

105  
	`hash°r
(
t
, 
	`øwtsvÆue
(
key
));

106 
LUA_TBOOLEAN
:

107  
	`hashboﬁón
(
t
, 
	`bvÆue
(
key
));

108 
LUA_TLIGHTUSERDATA
:

109  
	`hashpoöãr
(
t
, 
	`pvÆue
(
key
));

111  
	`hashpoöãr
(
t
, 
	`gcvÆue
(
key
));

113 
	}
}

120 
	$¨øyödex
 (c⁄° 
TVÆue
 *
key
) {

121 i‡(
	`âi¢umbî
(
key
)) {

122 
lua_Numbî
 
n
 = 
	`nvÆue
(
key
);

123 
k
;

124 
	`lua_numbî2öt
(
k
, 
n
);

125 i‡(
	`luai_numeq
(
	`ˇ°_num
(
k
), 
n
))

126  
k
;

129 
	}
}

137 
	$födödex
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

138 
i
;

139 i‡(
	`âi¢û
(
key
))  -1;

140 
i
 = 
	`¨øyödex
(
key
);

141 i‡(0 < 
i
 && i <
t
->
sizóºay
)

142  
i
-1;

144 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

147 i‡(
	`luaO_øwequÆObj
(
	`key2tvÆ
(
n
), 
key
) ||

148 (
	`ây≥
(
	`gkey
(
n
)Ë=
LUA_TDEADKEY
 && 
	`iscﬁÀ˘abÀ
(
key
) &&

149 
	`gcvÆue
(
	`gkey
(
n
)Ë=gcvÆue(
key
))) {

150 
i
 = 
	`ˇ°_öt
(
n
 - 
	`gnode
(
t
, 0));

152  
i
 + 
t
->
sizóºay
;

154 
n
 = 
	`g√xt
(n);

155 } 
n
);

156 
	`luaG_ru√º‹
(
L
, "övÆid keyÅÿ" 
	`LUA_QL
("next"));

159 
	}
}

162 
	$luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

163 
i
 = 
	`födödex
(
L
, 
t
, 
key
);

164 
i
++; i < 
t
->
sizóºay
; i++) {

165 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

166 
	`£ävÆue
(
key
, 
	`ˇ°_num
(
i
+1));

167 
	`£tobj2s
(
L
, 
key
+1, &
t
->
¨øy
[
i
]);

171 
i
 -
t
->
sizóºay
; i < 
	`sizíode
(t); i++) {

172 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
)))) {

173 
	`£tobj2s
(
L
, 
key
, 
	`key2tvÆ
(
	`gnode
(
t
, 
i
)));

174 
	`£tobj2s
(
L
, 
key
+1, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

179 
	}
}

189 
	$compuãsizes
 (
nums
[], *
«ºay
) {

190 
i
;

191 
twŸoi
;

192 
a
 = 0;

193 
«
 = 0;

194 
n
 = 0;

195 
i
 = 0, 
twŸoi
 = 1;ÅwŸoi/2 < *
«ºay
; i++,Åwotoi *= 2) {

196 i‡(
nums
[
i
] > 0) {

197 
a
 +
nums
[
i
];

198 i‡(
a
 > 
twŸoi
/2) {

199 
n
 = 
twŸoi
;

200 
«
 = 
a
;

203 i‡(
a
 =*
«ºay
) ;

205 *
«ºay
 = 
n
;

206 
	`lua_as£π
(*
«ºay
/2 <
«
 &&Ça <= *narray);

207  
«
;

208 
	}
}

211 
	$cou¡öt
 (c⁄° 
TVÆue
 *
key
, *
nums
) {

212 
k
 = 
	`¨øyödex
(
key
);

213 i‡(0 < 
k
 && k <
MAXASIZE
) {

214 
nums
[
	`˚ûlog2
(
k
)]++;

219 
	}
}

222 
	$numu£¨øy
 (c⁄° 
TabÀ
 *
t
, *
nums
) {

223 
lg
;

224 
âlg
;

225 
au£
 = 0;

226 
i
 = 1;

227 
lg
=0, 
âlg
=1;Üg<=
MAXBITS
;Üg++,Åtlg*=2) {

228 
lc
 = 0;

229 
lim
 = 
âlg
;

230 i‡(
lim
 > 
t
->
sizóºay
) {

231 
lim
 = 
t
->
sizóºay
;

232 i‡(
i
 > 
lim
)

236 ; 
i
 <
lim
; i++) {

237 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
-1]))

238 
lc
++;

240 
nums
[
lg
] +
lc
;

241 
au£
 +
lc
;

243  
au£
;

244 
	}
}

247 
	$numu£hash
 (c⁄° 
TabÀ
 *
t
, *
nums
, *
≤asize
) {

248 
tŸÆu£
 = 0;

249 
au£
 = 0;

250 
i
 = 
	`sizíode
(
t
);

251 
i
--) {

252 
Node
 *
n
 = &
t
->
node
[
i
];

253 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

254 
au£
 +
	`cou¡öt
(
	`key2tvÆ
(
n
), 
nums
);

255 
tŸÆu£
++;

258 *
≤asize
 +
au£
;

259  
tŸÆu£
;

260 
	}
}

263 
	$£èºayve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

264 
i
;

265 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
size
, 
TVÆue
);

266 
i
=
t
->
sizóºay
; i<
size
; i++)

267 
	`£äûvÆue
(&
t
->
¨øy
[
i
]);

268 
t
->
sizóºay
 = 
size
;

269 
	}
}

272 
	$£äodeve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

273 
lsize
;

274 i‡(
size
 == 0) {

275 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

276 
lsize
 = 0;

279 
i
;

280 
lsize
 = 
	`˚ûlog2
(
size
);

281 i‡(
lsize
 > 
MAXBITS
)

282 
	`luaG_ru√º‹
(
L
, "table overflow");

283 
size
 = 
	`twŸo
(
lsize
);

284 
t
->
node
 = 
	`luaM_√wve˘‹
(
L
, 
size
, 
Node
);

285 
i
=0; i<
size
; i++) {

286 
Node
 *
n
 = 
	`gnode
(
t
, 
i
);

287 
	`g√xt
(
n
Ë
NULL
;

288 
	`£äûvÆue
(
	`gkey
(
n
));

289 
	`£äûvÆue
(
	`gvÆ
(
n
));

292 
t
->
lsizíode
 = 
	`ˇ°_byã
(
lsize
);

293 
t
->
œ°‰ì
 = 
	`gnode
—, 
size
);

294 
	}
}

297 
	$ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
, 
nhsize
) {

298 
i
;

299 
ﬁdasize
 = 
t
->
sizóºay
;

300 
ﬁdhsize
 = 
t
->
lsizíode
;

301 
Node
 *
nﬁd
 = 
t
->
node
;

302 i‡(
«size
 > 
ﬁdasize
)

303 
	`£èºayve˘‹
(
L
, 
t
, 
«size
);

305 
	`£äodeve˘‹
(
L
, 
t
, 
nhsize
);

306 i‡(
«size
 < 
ﬁdasize
) {

307 
t
->
sizóºay
 = 
«size
;

309 
i
=
«size
; i<
ﬁdasize
; i++) {

310 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
]))

311 
	`£tobjt2t
(
L
, 
	`luaH_£äum
(L, 
t
, 
i
+1), &t->
¨øy
[i]);

314 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
, 
ﬁdasize
, 
«size
, 
TVÆue
);

317 
i
 = 
	`twŸo
(
ﬁdhsize
) - 1; i >= 0; i--) {

318 
Node
 *
ﬁd
 = 
nﬁd
+
i
;

319 i‡(!
	`âi¢û
(
	`gvÆ
(
ﬁd
)))

320 
	`£tobjt2t
(
L
, 
	`luaH_£t
(L, 
t
, 
	`key2tvÆ
(
ﬁd
)), 
	`gvÆ
(old));

322 i‡(
nﬁd
 !
dummynode
)

323 
	`luaM_‰ì¨øy
(
L
, 
nﬁd
, 
	`twŸo
(
ﬁdhsize
), 
Node
);

324 
	}
}

327 
	$luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
) {

328 
nsize
 = (
t
->
node
 =
dummynode
Ë? 0 : 
	`sizíode
(t);

329 
	`ªsize
(
L
, 
t
, 
«size
, 
nsize
);

330 
	}
}

333 
	$ªhash
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
ek
) {

334 
«size
, 
«
;

335 
nums
[
MAXBITS
+1];

336 
i
;

337 
tŸÆu£
;

338 
i
=0; i<=
MAXBITS
; i++Ë
nums
[i] = 0;

339 
«size
 = 
	`numu£¨øy
(
t
, 
nums
);

340 
tŸÆu£
 = 
«size
;

341 
tŸÆu£
 +
	`numu£hash
(
t
, 
nums
, &
«size
);

343 
«size
 +
	`cou¡öt
(
ek
, 
nums
);

344 
tŸÆu£
++;

346 
«
 = 
	`compuãsizes
(
nums
, &
«size
);

348 
	`ªsize
(
L
, 
t
, 
«size
, 
tŸÆu£
 - 
«
);

349 
	}
}

358 
TabÀ
 *
	$luaH_√w
 (
lua_Sèã
 *
L
, 
«ºay
, 
nhash
) {

359 
TabÀ
 *
t
 = 
	`luaM_√w
(
L
, Table);

360 
	`luaC_lök
(
L
, 
	`obj2gco
(
t
), 
LUA_TTABLE
);

361 
t
->
më©abÀ
 = 
NULL
;

362 
t
->
Êags
 = 
	`ˇ°_byã
(~0);

364 
t
->
¨øy
 = 
NULL
;

365 
t
->
sizóºay
 = 0;

366 
t
->
lsizíode
 = 0;

367 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

368 
	`£èºayve˘‹
(
L
, 
t
, 
«ºay
);

369 
	`£äodeve˘‹
(
L
, 
t
, 
nhash
);

370  
t
;

371 
	}
}

374 
	$luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

375 i‡(
t
->
node
 !
dummynode
)

376 
	`luaM_‰ì¨øy
(
L
, 
t
->
node
, 
	`sizíode
—), 
Node
);

377 
	`luaM_‰ì¨øy
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
TVÆue
);

378 
	`luaM_‰ì
(
L
, 
t
);

379 
	}
}

382 
Node
 *
	$gë‰ìpos
 (
TabÀ
 *
t
) {

383 
t
->
œ°‰ì
-- >Å->
node
) {

384 i‡(
	`âi¢û
(
	`gkey
(
t
->
œ°‰ì
)))

385  
t
->
œ°‰ì
;

387  
NULL
;

388 
	}
}

399 
TVÆue
 *
	$√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

400 
Node
 *
mp
 = 
	`maöposôi⁄
(
t
, 
key
);

401 i‡(!
	`âi¢û
(
	`gvÆ
(
mp
)Ë|| m∞=
dummynode
) {

402 
Node
 *
Ÿhîn
;

403 
Node
 *
n
 = 
	`gë‰ìpos
(
t
);

404 i‡(
n
 =
NULL
) {

405 
	`ªhash
(
L
, 
t
, 
key
);

406  
	`luaH_£t
(
L
, 
t
, 
key
);

408 
	`lua_as£π
(
n
 !
dummynode
);

409 
Ÿhîn
 = 
	`maöposôi⁄
(
t
, 
	`key2tvÆ
(
mp
));

410 i‡(
Ÿhîn
 !
mp
) {

412 
	`g√xt
(
Ÿhîn
Ë!
mp
) othern = gnext(othern);

413 
	`g√xt
(
Ÿhîn
Ë
n
;

414 *
n
 = *
mp
;

415 
	`g√xt
(
mp
Ë
NULL
;

416 
	`£äûvÆue
(
	`gvÆ
(
mp
));

420 
	`g√xt
(
n
Ëg√xt(
mp
);

421 
	`g√xt
(
mp
Ë
n
;

422 
mp
 = 
n
;

425 
	`gkey
(
mp
)->
vÆue
 = 
key
->vÆue; gkey(mp)->
â
 = key->tt;

426 
	`luaC_b¨rõπ
(
L
, 
t
, 
key
);

427 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
mp
)));

428  
	`gvÆ
(
mp
);

429 
	}
}

435 c⁄° 
TVÆue
 *
	$luaH_gënum
 (
TabÀ
 *
t
, 
key
) {

437 i‡(
	`ˇ°
(, 
key
-1Ë< ca°(, 
t
->
sizóºay
))

438  &
t
->
¨øy
[
key
-1];

440 
lua_Numbî
 
nk
 = 
	`ˇ°_num
(
key
);

441 
Node
 *
n
 = 
	`hashnum
(
t
, 
nk
);

443 i‡(
	`âi¢umbî
(
	`gkey
(
n
)Ë&& 
	`luai_numeq
(
	`nvÆue
(gkey“)), 
nk
))

444  
	`gvÆ
(
n
);

445 
n
 = 
	`g√xt
(n);

446 } 
n
);

447  
luaO_nûobje˘
;

449 
	}
}

455 c⁄° 
TVÆue
 *
	$luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
) {

456 
Node
 *
n
 = 
	`hash°r
(
t
, 
key
);

458 i‡(
	`âis°rög
(
	`gkey
(
n
)Ë&& 
	`øwtsvÆue
(gkey“)Ë=
key
)

459  
	`gvÆ
(
n
);

460 
n
 = 
	`g√xt
(n);

461 } 
n
);

462  
luaO_nûobje˘
;

463 
	}
}

469 c⁄° 
TVÆue
 *
	$luaH_gë
 (
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

470 
	`ây≥
(
key
)) {

471 
LUA_TNIL
:  
luaO_nûobje˘
;

472 
LUA_TSTRING
:  
	`luaH_gë°r
(
t
, 
	`øwtsvÆue
(
key
));

473 
LUA_TNUMBER
: {

474 
k
;

475 
lua_Numbî
 
n
 = 
	`nvÆue
(
key
);

476 
	`lua_numbî2öt
(
k
, 
n
);

477 i‡(
	`luai_numeq
(
	`ˇ°_num
(
k
), 
	`nvÆue
(
key
)))

478  
	`luaH_gënum
(
t
, 
k
);

482 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

484 i‡(
	`luaO_øwequÆObj
(
	`key2tvÆ
(
n
), 
key
))

485  
	`gvÆ
(
n
);

486 
n
 = 
	`g√xt
(n);

487 } 
n
);

488  
luaO_nûobje˘
;

491 
	}
}

494 
TVÆue
 *
	$luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

495 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë
(
t
, 
key
);

496 
t
->
Êags
 = 0;

497 i‡(
p
 !
luaO_nûobje˘
)

498  
	`ˇ°
(
TVÆue
 *, 
p
);

500 i‡(
	`âi¢û
(
key
)Ë
	`luaG_ru√º‹
(
L
, "table index isÇil");

501 i‡(
	`âi¢umbî
(
key
Ë&& 
	`luai_numi¢™
(
	`nvÆue
(key)))

502 
	`luaG_ru√º‹
(
L
, "table index is NaN");

503  
	`√wkey
(
L
, 
t
, 
key
);

505 
	}
}

508 
TVÆue
 *
	$luaH_£äum
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
key
) {

509 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gënum
(
t
, 
key
);

510 i‡(
p
 !
luaO_nûobje˘
)

511  
	`ˇ°
(
TVÆue
 *, 
p
);

513 
TVÆue
 
k
;

514 
	`£ävÆue
(&
k
, 
	`ˇ°_num
(
key
));

515  
	`√wkey
(
L
, 
t
, &
k
);

517 
	}
}

520 
TVÆue
 *
	$luaH_£t°r
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
TSåög
 *
key
) {

521 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë°r
(
t
, 
key
);

522 i‡(
p
 !
luaO_nûobje˘
)

523  
	`ˇ°
(
TVÆue
 *, 
p
);

525 
TVÆue
 
k
;

526 
	`£tsvÆue
(
L
, &
k
, 
key
);

527  
	`√wkey
(
L
, 
t
, &
k
);

529 
	}
}

532 
	$unbound_£¨ch
 (
TabÀ
 *
t
, 
j
) {

533 
i
 = 
j
;

534 
j
++;

536 !
	`âi¢û
(
	`luaH_gënum
(
t
, 
j
))) {

537 
i
 = 
j
;

538 
j
 *= 2;

539 i‡(
j
 > 
	`ˇ°
(, 
MAX_INT
)) {

541 
i
 = 1;

542 !
	`âi¢û
(
	`luaH_gënum
(
t
, 
i
))) i++;

543  
i
 - 1;

547 
j
 - 
i
 > 1) {

548 
m
 = (
i
+
j
)/2;

549 i‡(
	`âi¢û
(
	`luaH_gënum
(
t
, 
m
))Ë
j
 = m;

550 
i
 = 
m
;

552  
i
;

553 
	}
}

560 
	$luaH_gën
 (
TabÀ
 *
t
) {

561 
j
 = 
t
->
sizóºay
;

562 i‡(
j
 > 0 && 
	`âi¢û
(&
t
->
¨øy
[j - 1])) {

564 
i
 = 0;

565 
j
 - 
i
 > 1) {

566 
m
 = (
i
+
j
)/2;

567 i‡(
	`âi¢û
(&
t
->
¨øy
[
m
 - 1])Ë
j
 = m;

568 
i
 = 
m
;

570  
i
;

573 i‡(
t
->
node
 =
dummynode
)

574  
j
;

575  
	`unbound_£¨ch
(
t
, 
j
);

576 
	}
}

580 #i‡
deföed
(
LUA_DEBUG
)

582 
Node
 *
	$luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

583  
	`maöposôi⁄
(
t
, 
key
);

584 
	}
}

586 
	$luaH_isdummy
 (
Node
 *
n
Ë{ Ç =
dummynode
; 
	}
}

	@ltable.h

7 #i‚de‡
…abÀ_h


8 
	#…abÀ_h


	)

10 
	~"lobje˘.h
"

13 
	#gnode
(
t
,
i
Ë(&—)->
node
[i])

	)

14 
	#gkey
(
n
Ë(&“)->
i_key
.
nk
)

	)

15 
	#gvÆ
(
n
Ë(&“)->
i_vÆ
)

	)

16 
	#g√xt
(
n
Ë(“)->
i_key
.
nk
.
√xt
)

	)

18 
	#key2tvÆ
(
n
Ë(&“)->
i_key
.
tvk
)

	)

21 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gënum
 (
TabÀ
 *
t
, 
key
);

22 
LUAI_FUNC
 
TVÆue
 *
luaH_£äum
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
key
);

23 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
);

24 
LUAI_FUNC
 
TVÆue
 *
luaH_£t°r
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
TSåög
 *
key
);

25 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë
 (
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

26 
LUAI_FUNC
 
TVÆue
 *
luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

27 
LUAI_FUNC
 
TabÀ
 *
luaH_√w
 (
lua_Sèã
 *
L
, 
«ºay
, 
 hash
);

28 
LUAI_FUNC
 
luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
);

29 
LUAI_FUNC
 
luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

30 
LUAI_FUNC
 
luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
);

31 
LUAI_FUNC
 
luaH_gën
 (
TabÀ
 *
t
);

34 #i‡
deföed
(
LUA_DEBUG
)

35 
LUAI_FUNC
 
Node
 *
luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
);

36 
LUAI_FUNC
 
luaH_isdummy
 (
Node
 *
n
);

	@ltablib.c

8 
	~<°ddef.h
>

10 
	#…ablib_c


	)

11 
	#LUA_LIB


	)

13 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

19 
	#aux_gën
(
L
,
n
Ë(
	`luaL_checkty≥
(L,Ç, 
LUA_TTABLE
), 
	`luaL_gën
(L,Ç))

	)

22 
	$f‹óchi
 (
lua_Sèã
 *
L
) {

23 
i
;

24 
n
 = 
	`aux_gën
(
L
, 1);

25 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

26 
i
=1; i <
n
; i++) {

27 
	`lua_pushvÆue
(
L
, 2);

28 
	`lua_pushöãgî
(
L
, 
i
);

29 
	`lua_øwgëi
(
L
, 1, 
i
);

30 
	`lua_ˇŒ
(
L
, 2, 1);

31 i‡(!
	`lua_i¢û
(
L
, -1))

33 
	`lua_p›
(
L
, 1);

36 
	}
}

39 
	$f‹óch
 (
lua_Sèã
 *
L
) {

40 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

41 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

42 
	`lua_pushnû
(
L
);

43 
	`lua_√xt
(
L
, 1)) {

44 
	`lua_pushvÆue
(
L
, 2);

45 
	`lua_pushvÆue
(
L
, -3);

46 
	`lua_pushvÆue
(
L
, -3);

47 
	`lua_ˇŒ
(
L
, 2, 1);

48 i‡(!
	`lua_i¢û
(
L
, -1))

50 
	`lua_p›
(
L
, 2);

53 
	}
}

56 
	$maxn
 (
lua_Sèã
 *
L
) {

57 
lua_Numbî
 
max
 = 0;

58 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

59 
	`lua_pushnû
(
L
);

60 
	`lua_√xt
(
L
, 1)) {

61 
	`lua_p›
(
L
, 1);

62 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
) {

63 
lua_Numbî
 
v
 = 
	`lua_t⁄umbî
(
L
, -1);

64 i‡(
v
 > 
max
) max = v;

67 
	`lua_pushnumbî
(
L
, 
max
);

69 
	}
}

72 
	$gën
 (
lua_Sèã
 *
L
) {

73 
	`lua_pushöãgî
(
L
, 
	`aux_gën
(L, 1));

75 
	}
}

78 
	$£ä
 (
lua_Sèã
 *
L
) {

79 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

80 #i‚de‡
luaL_£ä


81 
	`luaL_£ä
(
L
, 1, 
	`luaL_checköt
(L, 2));

83 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("setn") " is obsolete");

85 
	`lua_pushvÆue
(
L
, 1);

87 
	}
}

90 
	$tö£π
 (
lua_Sèã
 *
L
) {

91 
e
 = 
	`aux_gën
(
L
, 1) + 1;

92 
pos
;

93 
	`lua_gët›
(
L
)) {

95 
pos
 = 
e
;

99 
i
;

100 
pos
 = 
	`luaL_checköt
(
L
, 2);

101 i‡(
pos
 > 
e
)É =Öos;

102 
i
 = 
e
; i > 
pos
; i--) {

103 
	`lua_øwgëi
(
L
, 1, 
i
-1);

104 
	`lua_øw£ti
(
L
, 1, 
i
);

109  
	`luaL_îr‹
(
L
, "wr⁄gÇumbî o‡¨gumít†tÿ" 
	`LUA_QL
("insert"));

112 
	`luaL_£ä
(
L
, 1, 
e
);

113 
	`lua_øw£ti
(
L
, 1, 
pos
);

115 
	}
}

118 
	$åemove
 (
lua_Sèã
 *
L
) {

119 
e
 = 
	`aux_gën
(
L
, 1);

120 
pos
 = 
	`luaL_›töt
(
L
, 2, 
e
);

121 i‡(
e
 == 0)  0;

122 
	`luaL_£ä
(
L
, 1, 
e
 - 1);

123 
	`lua_øwgëi
(
L
, 1, 
pos
);

124  ;
pos
<
e
;Öos++) {

125 
	`lua_øwgëi
(
L
, 1, 
pos
+1);

126 
	`lua_øw£ti
(
L
, 1, 
pos
);

128 
	`lua_pushnû
(
L
);

129 
	`lua_øw£ti
(
L
, 1, 
e
);

131 
	}
}

134 
	$tc⁄ˇt
 (
lua_Sèã
 *
L
) {

135 
luaL_Buf„r
 
b
;

136 
size_t
 
l£p
;

137 
i
, 
œ°
;

138 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 2, "", &
l£p
);

139 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

140 
i
 = 
	`luaL_›töt
(
L
, 3, 1);

141 
œ°
 = 
	`luaL_›t
(
L
, 
luaL_checköt
, 4, 
	`luaL_gën
(L, 1));

142 
	`luaL_bufföô
(
L
, &
b
);

143 ; 
i
 <
œ°
; i++) {

144 
	`lua_øwgëi
(
L
, 1, 
i
);

145 
	`luaL_¨gcheck
(
L
, 
	`lua_is°rög
(L, -1), 1, "table containsÇon-strings");

146 
	`luaL_addvÆue
(&
b
);

147 i‡(
i
 !
œ°
)

148 
	`luaL_addl°rög
(&
b
, 
£p
, 
l£p
);

150 
	`luaL_pushªsu…
(&
b
);

152 
	}
}

164 
	$£t2
 (
lua_Sèã
 *
L
, 
i
, 
j
) {

165 
	`lua_øw£ti
(
L
, 1, 
i
);

166 
	`lua_øw£ti
(
L
, 1, 
j
);

167 
	}
}

169 
	$s‹t_comp
 (
lua_Sèã
 *
L
, 
a
, 
b
) {

170 i‡(!
	`lua_i¢û
(
L
, 2)) {

171 
ªs
;

172 
	`lua_pushvÆue
(
L
, 2);

173 
	`lua_pushvÆue
(
L
, 
a
-1);

174 
	`lua_pushvÆue
(
L
, 
b
-2);

175 
	`lua_ˇŒ
(
L
, 2, 1);

176 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

177 
	`lua_p›
(
L
, 1);

178  
ªs
;

181  
	`lua_Às°h™
(
L
, 
a
, 
b
);

182 
	}
}

184 
	$auxs‹t
 (
lua_Sèã
 *
L
, 
l
, 
u
) {

185 
l
 < 
u
) {

186 
i
, 
j
;

188 
	`lua_øwgëi
(
L
, 1, 
l
);

189 
	`lua_øwgëi
(
L
, 1, 
u
);

190 i‡(
	`s‹t_comp
(
L
, -1, -2))

191 
	`£t2
(
L
, 
l
, 
u
);

193 
	`lua_p›
(
L
, 2);

194 i‡(
u
-
l
 == 1) ;

195 
i
 = (
l
+
u
)/2;

196 
	`lua_øwgëi
(
L
, 1, 
i
);

197 
	`lua_øwgëi
(
L
, 1, 
l
);

198 i‡(
	`s‹t_comp
(
L
, -2, -1))

199 
	`£t2
(
L
, 
i
, 
l
);

201 
	`lua_p›
(
L
, 1);

202 
	`lua_øwgëi
(
L
, 1, 
u
);

203 i‡(
	`s‹t_comp
(
L
, -1, -2))

204 
	`£t2
(
L
, 
i
, 
u
);

206 
	`lua_p›
(
L
, 2);

208 i‡(
u
-
l
 == 2) ;

209 
	`lua_øwgëi
(
L
, 1, 
i
);

210 
	`lua_pushvÆue
(
L
, -1);

211 
	`lua_øwgëi
(
L
, 1, 
u
-1);

212 
	`£t2
(
L
, 
i
, 
u
-1);

214 
i
 = 
l
; 
j
 = 
u
-1;

217 
	`lua_øwgëi
(
L
, 1, ++
i
), 
	`s‹t_comp
(L, -1, -2)) {

218 i‡(
i
>
u
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

219 
	`lua_p›
(
L
, 1);

222 
	`lua_øwgëi
(
L
, 1, --
j
), 
	`s‹t_comp
(L, -3, -1)) {

223 i‡(
j
<
l
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

224 
	`lua_p›
(
L
, 1);

226 i‡(
j
<
i
) {

227 
	`lua_p›
(
L
, 3);

230 
	`£t2
(
L
, 
i
, 
j
);

232 
	`lua_øwgëi
(
L
, 1, 
u
-1);

233 
	`lua_øwgëi
(
L
, 1, 
i
);

234 
	`£t2
(
L
, 
u
-1, 
i
);

237 i‡(
i
-
l
 < 
u
-i) {

238 
j
=
l
; 
i
=i-1;Ü=i+2;

241 
j
=
i
+1; i=
u
; u=j-2;

243 
	`auxs‹t
(
L
, 
j
, 
i
);

245 
	}
}

247 
	$s‹t
 (
lua_Sèã
 *
L
) {

248 
n
 = 
	`aux_gën
(
L
, 1);

249 
	`luaL_check°ack
(
L
, 40, "");

250 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 2))

251 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

252 
	`lua_£â›
(
L
, 2);

253 
	`auxs‹t
(
L
, 1, 
n
);

255 
	}
}

260 c⁄° 
luaL_Reg
 
	gèb_funcs
[] = {

261 {"c⁄ˇt", 
tc⁄ˇt
},

262 {"f‹óch", 
f‹óch
},

263 {"f‹óchi", 
f‹óchi
},

264 {"gën", 
gën
},

265 {"maxn", 
maxn
},

266 {"ö£π", 
tö£π
},

267 {"ªmove", 
åemove
},

268 {"£ä", 
£ä
},

269 {"s‹t", 
s‹t
},

270 {
NULL
, NULL}

274 
LUALIB_API
 
	$lua›í_èbÀ
 (
lua_Sèã
 *
L
) {

275 
	`luaL_ªgi°î
(
L
, 
LUA_TABLIBNAME
, 
èb_funcs
);

277 
	}
}

	@ltm.c

8 
	~<°rög.h
>

10 
	#…m_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lobje˘.h
"

16 
	~"l°©e.h
"

17 
	~"l°rög.h
"

18 
	~"…abÀ.h
"

19 
	~"…m.h
"

23 c⁄° *c⁄° 
	gluaT_ty≥«mes
[] = {

30 
	$luaT_öô
 (
lua_Sèã
 *
L
) {

31 c⁄° *c⁄° 
luaT_evíäame
[] = {

38 
i
;

39 
i
=0; i<
TM_N
; i++) {

40 
	`G
(
L
)->
tm«me
[
i
] = 
	`luaS_√w
(L, 
luaT_evíäame
[i]);

41 
	`luaS_fix
(
	`G
(
L
)->
tm«me
[
i
]);

43 
	}
}

50 c⁄° 
TVÆue
 *
	$luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
) {

51 c⁄° 
TVÆue
 *
tm
 = 
	`luaH_gë°r
(
evíts
, 
íame
);

52 
	`lua_as£π
(
evít
 <
TM_EQ
);

53 i‡(
	`âi¢û
(
tm
)) {

54 
evíts
->
Êags
 |
	`ˇ°_byã
(1u<<
evít
);

55  
NULL
;

57  
tm
;

58 
	}
}

61 c⁄° 
TVÆue
 *
	$luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, 
TMS
 
evít
) {

62 
TabÀ
 *
mt
;

63 
	`ây≥
(
o
)) {

64 
LUA_TTABLE
:

65 
mt
 = 
	`hvÆue
(
o
)->
më©abÀ
;

67 
LUA_TUSERDATA
:

68 
mt
 = 
	`uvÆue
(
o
)->
më©abÀ
;

71 
mt
 = 
	`G
(
L
)->mt[
	`ây≥
(
o
)];

73  (
mt
 ? 
	`luaH_gë°r
(mt, 
	`G
(
L
)->
tm«me
[
evít
]Ë: 
luaO_nûobje˘
);

74 
	}
}

	@ltm.h

7 #i‚de‡
…m_h


8 
	#…m_h


	)

11 
	~"lobje˘.h
"

19 
	mTM_INDEX
,

20 
	mTM_NEWINDEX
,

21 
	mTM_GC
,

22 
	mTM_MODE
,

23 
	mTM_EQ
,

24 
	mTM_ADD
,

25 
	mTM_SUB
,

26 
	mTM_MUL
,

27 
	mTM_DIV
,

28 
	mTM_MOD
,

29 
	mTM_POW
,

30 
	mTM_UNM
,

31 
	mTM_LEN
,

32 
	mTM_LT
,

33 
	mTM_LE
,

34 
	mTM_CONCAT
,

35 
	mTM_CALL
,

36 
	mTM_N


37 } 
	tTMS
;

41 
	#gÁ°tm
(
g
,
ë
,
e
Ë(”tË=
NULL
 ? NULL : \

42 ((
ë
)->
Êags
 & (1u<<(
e
))Ë? 
NULL
 : 
	`luaT_gëtm
”t,É, (
g
)->
tm«me
[e]))

	)

44 
	#Á°tm
(
l
,
ë
,
e
Ë
	`gÁ°tm
(
	`G
÷),Ét,É)

	)

46 
LUAI_DATA
 c⁄° *c⁄° 
	gluaT_ty≥«mes
[];

49 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
);

50 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° TVÆuê*
o
,

51 
TMS
 
evít
);

52 
LUAI_FUNC
 
luaT_öô
 (
lua_Sèã
 *
L
);

	@lua.c

8 
	~<sig«l.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#lua_c


	)

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

22 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

24 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

28 
	$l°›
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

29 ()
¨
;

30 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

31 
	`luaL_îr‹
(
L
, "interrupted!");

32 
	}
}

35 
	$œ˘i⁄
 (
i
) {

36 
	`sig«l
(
i
, 
SIG_DFL
);

38 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

39 
	}
}

42 
	$¥öt_ußge
 () {

43 
	`Ârötf
(
°dîr
,

46 " -ê°©Éxecuã såög " 
	`LUA_QL
("stat") "\n"

47 " -»«mêÑequúêlibøry " 
	`LUA_QL
("name") "\n"

48 " -òÉ¡î i¡îa˘ivêmodêa·îÉxecutög " 
	`LUA_QL
("script") "\n"

53 
¥og«me
);

54 
	`fÊush
(
°dîr
);

55 
	}
}

58 
	$l_mesßge
 (c⁄° *
≤ame
, c⁄° *
msg
) {

59 i‡(
≤ame
Ë
	`Ârötf
(
°dîr
, "%s: ",Öname);

60 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

61 
	`fÊush
(
°dîr
);

62 
	}
}

65 
	$ªp‹t
 (
lua_Sèã
 *
L
, 
°©us
) {

66 i‡(
°©us
 && !
	`lua_i¢û
(
L
, -1)) {

67 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

68 i‡(
msg
 =
NULL
) msg = "(error object isÇotá string)";

69 
	`l_mesßge
(
¥og«me
, 
msg
);

70 
	`lua_p›
(
L
, 1);

72  
°©us
;

73 
	}
}

76 
	$åa˚back
 (
lua_Sèã
 *
L
) {

77 
	`lua_gëfõld
(
L
, 
LUA_GLOBALSINDEX
, "debug");

78 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

79 
	`lua_p›
(
L
, 1);

82 
	`lua_gëfõld
(
L
, -1, "traceback");

83 i‡(!
	`lua_isfun˘i⁄
(
L
, -1)) {

84 
	`lua_p›
(
L
, 2);

87 
	`lua_pushvÆue
(
L
, 1);

88 
	`lua_pushöãgî
(
L
, 2);

89 
	`lua_ˇŒ
(
L
, 2, 1);

91 
	}
}

94 
	$doˇŒ
 (
lua_Sèã
 *
L
, 
«rg
, 
˛ór
) {

95 
°©us
;

96 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

97 
	`lua_pushcfun˘i⁄
(
L
, 
åa˚back
);

98 
	`lua_ö£π
(
L
, 
ba£
);

99 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

100 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, (
˛ór
 ? 0 : 
LUA_MULTRET
), 
ba£
);

101 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

102 
	`lua_ªmove
(
L
, 
ba£
);

104 i‡(
°©us
 !0Ë
	`lua_gc
(
L
, 
LUA_GCCOLLECT
, 0);

105  
°©us
;

106 
	}
}

109 
	$¥öt_vîsi⁄
 () {

110 
	`l_mesßge
(
NULL
, 
LUA_VERSION
 " " 
LUA_COPYRIGHT
);

111 
	}
}

114 
	$gë¨gs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

115 
«rg
;

116 
i
;

117 
¨gc
 = 0;

118 
¨gv
[
¨gc
])árgc++;

119 
«rg
 = 
¨gc
 - (
n
 + 1);

120 
	`luaL_check°ack
(
L
, 
«rg
 + 3, "too manyárgumentsÅo script");

121 
i
=
n
+1; i < 
¨gc
; i++)

122 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

123 
	`lua_¸óãèbÀ
(
L
, 
«rg
, 
n
 + 1);

124 
i
=0; i < 
¨gc
; i++) {

125 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

126 
	`lua_øw£ti
(
L
, -2, 
i
 - 
n
);

128  
«rg
;

129 
	}
}

132 
	$dofûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

133 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
«me
Ë|| 
	`doˇŒ
(L, 0, 1);

134  
	`ªp‹t
(
L
, 
°©us
);

135 
	}
}

138 
	$do°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

139 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), 
«me
Ë|| 
	`doˇŒ
(L, 0, 1);

140  
	`ªp‹t
(
L
, 
°©us
);

141 
	}
}

144 
	$dﬁibøry
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

145 
	`lua_gëglobÆ
(
L
, "require");

146 
	`lua_push°rög
(
L
, 
«me
);

147  
	`ªp‹t
(
L
, 
	`lua_pˇŒ
(L, 1, 0, 0));

148 
	}
}

151 c⁄° *
	$gë_¥om±
 (
lua_Sèã
 *
L
, 
fú°löe
) {

152 c⁄° *
p
;

153 
	`lua_gëfõld
(
L
, 
LUA_GLOBALSINDEX
, 
fú°löe
 ? "_PROMPT" : "_PROMPT2");

154 
p
 = 
	`lua_to°rög
(
L
, -1);

155 i‡(
p
 =
NULL
Ë∞(
fú°löe
 ? 
LUA_PROMPT
 : 
LUA_PROMPT2
);

156 
	`lua_p›
(
L
, 1);

157  
p
;

158 
	}
}

161 
	$öcom∂ëe
 (
lua_Sèã
 *
L
, 
°©us
) {

162 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

163 
size_t
 
lmsg
;

164 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

165 c⁄° *
ç
 = 
msg
 + 
lmsg
 - ((
	`LUA_QL
("<eof>")) - 1);

166 i‡(
	`°r°r
(
msg
, 
	`LUA_QL
("<eof>")Ë=
ç
) {

167 
	`lua_p›
(
L
, 1);

172 
	}
}

175 
	$pushlöe
 (
lua_Sèã
 *
L
, 
fú°löe
) {

176 
buf„r
[
LUA_MAXINPUT
];

177 *
b
 = 
buf„r
;

178 
size_t
 
l
;

179 c⁄° *
¥mt
 = 
	`gë_¥om±
(
L
, 
fú°löe
);

180 i‡(
	`lua_ªadlöe
(
L
, 
b
, 
¥mt
) == 0)

182 
l
 = 
	`°æí
(
b
);

183 i‡(
l
 > 0 && 
b
[l-1] == '\n')

184 
b
[
l
-1] = '\0';

185 i‡(
fú°löe
 && 
b
[0] == '=')

186 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
+1);

188 
	`lua_push°rög
(
L
, 
b
);

189 
	`lua_‰ìlöe
(
L
, 
b
);

191 
	}
}

194 
	$lﬂdlöe
 (
lua_Sèã
 *
L
) {

195 
°©us
;

196 
	`lua_£â›
(
L
, 0);

197 i‡(!
	`pushlöe
(
L
, 1))

200 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
	`lua_to°rög
(L, 1), 
	`lua_°æí
(L, 1), "=stdin");

201 i‡(!
	`öcom∂ëe
(
L
, 
°©us
)) ;

202 i‡(!
	`pushlöe
(
L
, 0))

204 
	`lua_pushlôîÆ
(
L
, "\n");

205 
	`lua_ö£π
(
L
, -2);

206 
	`lua_c⁄ˇt
(
L
, 3);

208 
	`lua_ßvñöe
(
L
, 1);

209 
	`lua_ªmove
(
L
, 1);

210  
°©us
;

211 
	}
}

214 
	$dŸty
 (
lua_Sèã
 *
L
) {

215 
°©us
;

216 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

217 
¥og«me
 = 
NULL
;

218 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

219 i‡(
°©us
 =0Ë°©u†
	`doˇŒ
(
L
, 0, 0);

220 
	`ªp‹t
(
L
, 
°©us
);

221 i‡(
°©us
 =0 && 
	`lua_gët›
(
L
) > 0) {

222 
	`lua_gëglobÆ
(
L
, "print");

223 
	`lua_ö£π
(
L
, 1);

224 i‡(
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(L)-1, 0, 0) != 0)

225 
	`l_mesßge
(
¥og«me
, 
	`lua_pushf°rög
(
L
,

226 "îr‹ cÆlög " 
	`LUA_QL
("print") " (%s)",

227 
	`lua_to°rög
(
L
, -1)));

230 
	`lua_£â›
(
L
, 0);

231 
	`Âuts
("\n", 
°dout
);

232 
	`fÊush
(
°dout
);

233 
¥og«me
 = 
ﬁd¥og«me
;

234 
	}
}

237 
	$h™dÀ_s¸ùt
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

238 
°©us
;

239 c⁄° *
‚ame
;

240 
«rg
 = 
	`gë¨gs
(
L
, 
¨gv
, 
n
);

241 
	`lua_£tglobÆ
(
L
, "arg");

242 
‚ame
 = 
¨gv
[
n
];

243 i‡(
	`°rcmp
(
‚ame
, "-"Ë=0 && såcmp(
¨gv
[
n
-1], "--") != 0)

244 
‚ame
 = 
NULL
;

245 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
‚ame
);

246 
	`lua_ö£π
(
L
, -(
«rg
+1));

247 i‡(
°©us
 == 0)

248 
°©us
 = 
	`doˇŒ
(
L
, 
«rg
, 0);

250 
	`lua_p›
(
L
, 
«rg
);

251  
	`ªp‹t
(
L
, 
°©us
);

252 
	}
}

255 
	$cﬁÀ˘¨gs
 (**
¨gv
, *
pi
, *
pv
, *
≥
) {

256 
i
;

257 
i
 = 1; 
¨gv
[i] !
NULL
; i++) {

258 i‡(
¨gv
[
i
][0] != '-')

259  
i
;

260 
¨gv
[
i
][1]) {

261 '-':  (
¨gv
[
i
+1] !
NULL
 ? i+1 : 0);

262 '\0':  
i
;

263 'i': *
pi
 = 1;

264 'v': *
pv
 = 1; ;

265 'e': *
≥
 = 1;

267 i‡(
¨gv
[
i
][2] == '\0') {

268 
i
++;

269 i‡(
¨gv
[
i
] =
NULL
)  -1;

276 
	}
}

279 
	$ru«rgs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

280 
i
;

281 
i
 = 1; i < 
n
; i++) {

282 i‡(
¨gv
[
i
] =
NULL
) ;

283 
	`lua_as£π
(
¨gv
[
i
][0] == '-');

284 
¨gv
[
i
][1]) {

286 c⁄° *
chunk
 = 
¨gv
[
i
] + 2;

287 i‡(*
chunk
 ='\0'Ëchunk = 
¨gv
[++
i
];

288 
	`lua_as£π
(
chunk
 !
NULL
);

289 i‡(
	`do°rög
(
L
, 
chunk
, "=(commandÜine)") != 0)

294 c⁄° *
fûíame
 = 
¨gv
[
i
] + 2;

295 i‡(*
fûíame
 ='\0'Ëfûíamê
¨gv
[++
i
];

296 
	`lua_as£π
(
fûíame
 !
NULL
);

297 i‡(
	`dﬁibøry
(
L
, 
fûíame
))

305 
	}
}

308 
	$h™dÀ_luaöô
 (
lua_Sèã
 *
L
) {

309 c⁄° *
öô
 = 
	`gëív
("LUA_INIT");

310 i‡(
öô
 =
NULL
)  0;

311 i‡(
öô
[0] == '@')

312  
	`dofûe
(
L
, 
öô
+1);

314  
	`do°rög
(
L
, 
öô
, "=LUA_INIT");

315 
	}
}

318 
	sSmaö
 {

319 
	m¨gc
;

320 **
	m¨gv
;

321 
	m°©us
;

325 
	$pmaö
 (
lua_Sèã
 *
L
) {

326 
Smaö
 *
s
 = (Smaö *)
	`lua_tou£rd©a
(
L
, 1);

327 **
¨gv
 = 
s
->argv;

328 
s¸ùt
;

329 
has_i
 = 0, 
has_v
 = 0, 
has_e
 = 0;

330 
globÆL
 = 
L
;

331 i‡(
¨gv
[0] &&árgv[0][0]Ë
¥og«me
 =árgv[0];

332 
	`lua_gc
(
L
, 
LUA_GCSTOP
, 0);

333 
	`luaL_›ílibs
(
L
);

334 
	`lua_gc
(
L
, 
LUA_GCRESTART
, 0);

335 
s
->
°©us
 = 
	`h™dÀ_luaöô
(
L
);

336 i‡(
s
->
°©us
 != 0)  0;

337 
s¸ùt
 = 
	`cﬁÀ˘¨gs
(
¨gv
, &
has_i
, &
has_v
, &
has_e
);

338 i‡(
s¸ùt
 < 0) {

339 
	`¥öt_ußge
();

340 
s
->
°©us
 = 1;

343 i‡(
has_v
Ë
	`¥öt_vîsi⁄
();

344 
s
->
°©us
 = 
	`ru«rgs
(
L
, 
¨gv
, (
s¸ùt
 > 0Ë? s¸ùà: s->
¨gc
);

345 i‡(
s
->
°©us
 != 0)  0;

346 i‡(
s¸ùt
)

347 
s
->
°©us
 = 
	`h™dÀ_s¸ùt
(
L
, 
¨gv
, 
s¸ùt
);

348 i‡(
s
->
°©us
 != 0)  0;

349 i‡(
has_i
)

350 
	`dŸty
(
L
);

351 i‡(
s¸ùt
 =0 && !
has_e
 && !
has_v
) {

352 i‡(
	`lua_°dö_is_ây
()) {

353 
	`¥öt_vîsi⁄
();

354 
	`dŸty
(
L
);

356 
	`dofûe
(
L
, 
NULL
);

359 
	}
}

362 
	$maö
 (
¨gc
, **
¨gv
) {

363 
°©us
;

364 
Smaö
 
s
;

365 
lua_Sèã
 *
L
 = 
	`lua_›í
();

366 i‡(
L
 =
NULL
) {

367 
	`l_mesßge
(
¨gv
[0], "cannot create state:ÇotÉnough memory");

368  
EXIT_FAILURE
;

370 
s
.
¨gc
 =árgc;

371 
s
.
¨gv
 =árgv;

372 
°©us
 = 
	`lua_˝ˇŒ
(
L
, &
pmaö
, &
s
);

373 
	`ªp‹t
(
L
, 
°©us
);

374 
	`lua_˛o£
(
L
);

375  (
°©us
 || 
s
.°©usË? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
;

376 
	}
}

	@lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

16 
	~"luac⁄f.h
"

19 
	#LUA_VERSION
 "Lu®5.1"

	)

20 
	#LUA_VERSION_NUM
 501

	)

21 
	#LUA_COPYRIGHT
 "C›yrighà(CË1994-2006 Lua.‹g, PUC-Rio"

	)

22 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedÿ& W. Cñes"

	)

26 
	#LUA_SIGNATURE
 "\033Lua"

	)

29 
	#LUA_MULTRET
 (-1)

	)

35 
	#LUA_REGISTRYINDEX
 (-10000)

	)

36 
	#LUA_ENVIRONINDEX
 (-10001)

	)

37 
	#LUA_GLOBALSINDEX
 (-10002)

	)

38 
	#lua_upvÆueödex
(
i
Ë(
LUA_GLOBALSINDEX
-(i))

	)

42 
	#LUA_YIELD
 1

	)

43 
	#LUA_ERRRUN
 2

	)

44 
	#LUA_ERRSYNTAX
 3

	)

45 
	#LUA_ERRMEM
 4

	)

46 
	#LUA_ERRERR
 5

	)

49 
lua_Sèã
 
	tlua_Sèã
;

51 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
);

57 c⁄° * (*
	tlua_Ródî
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
, 
	tsize_t
 *
	tsz
);

59 (*
	tlua_Wrôî
Ë(
	tlua_Sèã
 *
	tL
, c⁄° * 
	tp
, 
	tsize_t
 
	tsz
, * 
	tud
);

65 * (*
	tlua_AŒoc
Ë(*
	tud
, *
	t±r
, 
	tsize_t
 
	tosize
, size_à
	tnsize
);

71 
	#LUA_TNONE
 (-1)

	)

73 
	#LUA_TNIL
 0

	)

74 
	#LUA_TBOOLEAN
 1

	)

75 
	#LUA_TLIGHTUSERDATA
 2

	)

76 
	#LUA_TNUMBER
 3

	)

77 
	#LUA_TSTRING
 4

	)

78 
	#LUA_TTABLE
 5

	)

79 
	#LUA_TFUNCTION
 6

	)

80 
	#LUA_TUSERDATA
 7

	)

81 
	#LUA_TTHREAD
 8

	)

86 
	#LUA_MINSTACK
 20

	)

92 #i‡
	`deföed
(
LUA_USER_H
)

93 #ö˛udê
LUA_USER_H


98 
LUA_NUMBER
 
	tlua_Numbî
;

102 
LUA_INTEGER
 
	tlua_I¡egî
;

109 
LUA_API
 
lua_Sèã
 *(
lua_√w°©e
Ë(
lua_AŒoc
 
f
, *
ud
);

110 
LUA_API
 (
lua_˛o£
Ë(
lua_Sèã
 *
L
);

111 
LUA_API
 
lua_Sèã
 *(
lua_√wthªad
Ë÷ua_Sèã *
L
);

113 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_©∑nic
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
);

119 
LUA_API
 (
lua_gët›
Ë(
lua_Sèã
 *
L
);

120 
LUA_API
 (
lua_£â›
Ë(
lua_Sèã
 *
L
, 
idx
);

121 
LUA_API
 (
lua_pushvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

122 
LUA_API
 (
lua_ªmove
Ë(
lua_Sèã
 *
L
, 
idx
);

123 
LUA_API
 (
lua_ö£π
Ë(
lua_Sèã
 *
L
, 
idx
);

124 
LUA_API
 (
lua_ª∂a˚
Ë(
lua_Sèã
 *
L
, 
idx
);

125 
LUA_API
 (
lua_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
);

127 
LUA_API
 (
lua_xmove
Ë(
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
);

134 
LUA_API
 (
lua_i¢umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

135 
LUA_API
 (
lua_is°rög
Ë(
lua_Sèã
 *
L
, 
idx
);

136 
LUA_API
 (
lua_iscfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

137 
LUA_API
 (
lua_isu£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

138 
LUA_API
 (
lua_ty≥
Ë(
lua_Sèã
 *
L
, 
idx
);

139 
LUA_API
 c⁄° *(
lua_ty≥«me
Ë(
lua_Sèã
 *
L
, 
ç
);

141 
LUA_API
 (
lua_equÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

142 
LUA_API
 (
lua_øwequÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

143 
LUA_API
 (
lua_Às°h™
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

145 
LUA_API
 
	$lua_Numbî
 (
lua_t⁄umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

146 
LUA_API
 
	$lua_I¡egî
 (
lua_toöãgî
Ë(
lua_Sèã
 *
L
, 
idx
);

147 
LUA_API
 (
lua_toboﬁón
Ë(
lua_Sèã
 *
L
, 
idx
);

148 
LUA_API
 c⁄° *(
lua_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

149 
LUA_API
 
	$size_t
 (
lua_objÀn
Ë(
lua_Sèã
 *
L
, 
idx
);

150 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_tocfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

151 
LUA_API
 *(
lua_tou£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

152 
LUA_API
 
lua_Sèã
 *(
lua_tŸhªad
Ë÷ua_Sèã *
L
, 
idx
);

153 
LUA_API
 c⁄° *(
lua_t›oöãr
Ë(
lua_Sèã
 *
L
, 
idx
);

159 
LUA_API
 (
lua_pushnû
Ë(
lua_Sèã
 *
L
);

160 
LUA_API
 (
lua_pushnumbî
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
n
);

161 
LUA_API
 (
lua_pushöãgî
Ë(
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
);

162 
LUA_API
 (
lua_pushl°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
l
);

163 
LUA_API
 (
lua_push°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

164 
LUA_API
 c⁄° *(
lua_pushvf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
,

165 
va_li°
 
¨gp
);

166 
LUA_API
 c⁄° *(
lua_pushf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

167 
LUA_API
 (
lua_pushc˛osuª
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

168 
LUA_API
 (
lua_pushboﬁón
Ë(
lua_Sèã
 *
L
, 
b
);

169 
LUA_API
 (
lua_pushlightu£rd©a
Ë(
lua_Sèã
 *
L
, *
p
);

170 
LUA_API
 (
lua_pushthªad
Ë(
lua_Sèã
 *
L
);

176 
LUA_API
 (
lua_gëèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

177 
LUA_API
 (
lua_gëfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

178 
LUA_API
 (
lua_øwgë
Ë(
lua_Sèã
 *
L
, 
idx
);

179 
LUA_API
 (
lua_øwgëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

180 
LUA_API
 (
lua_¸óãèbÀ
Ë(
lua_Sèã
 *
L
, 
«º
, 
ƒec
);

181 
LUA_API
 *(
lua_√wu£rd©a
Ë(
lua_Sèã
 *
L
, 
size_t
 
sz
);

182 
LUA_API
 (
lua_gëmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

183 
LUA_API
 (
lua_gë„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

189 
LUA_API
 (
lua_£âabÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

190 
LUA_API
 (
lua_£tfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

191 
LUA_API
 (
lua_øw£t
Ë(
lua_Sèã
 *
L
, 
idx
);

192 
LUA_API
 (
lua_øw£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

193 
LUA_API
 (
lua_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

194 
LUA_API
 (
lua_£t„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

200 
LUA_API
 (
lua_ˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
);

201 
LUA_API
 (
lua_pˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
);

202 
LUA_API
 (
lua_˝ˇŒ
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
func
, *
ud
);

203 
LUA_API
 (
lua_lﬂd
Ë(
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
dt
,

204 c⁄° *
chunk«me
);

206 
LUA_API
 (
lua_dump
Ë(
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
);

212 
LUA_API
 (
lua_yõld
Ë(
lua_Sèã
 *
L
, 
ƒesu…s
);

213 
LUA_API
 (
lua_ªsume
Ë(
lua_Sèã
 *
L
, 
«rg
);

214 
LUA_API
 (
lua_°©us
Ë(
lua_Sèã
 *
L
);

220 
	#LUA_GCSTOP
 0

	)

221 
	#LUA_GCRESTART
 1

	)

222 
	#LUA_GCCOLLECT
 2

	)

223 
	#LUA_GCCOUNT
 3

	)

224 
	#LUA_GCCOUNTB
 4

	)

225 
	#LUA_GCSTEP
 5

	)

226 
	#LUA_GCSETPAUSE
 6

	)

227 
	#LUA_GCSETSTEPMUL
 7

	)

229 
LUA_API
 (
lua_gc
Ë(
lua_Sèã
 *
L
, 
wh©
, 
d©a
);

236 
LUA_API
 (
lua_îr‹
Ë(
lua_Sèã
 *
L
);

238 
LUA_API
 (
lua_√xt
Ë(
lua_Sèã
 *
L
, 
idx
);

240 
LUA_API
 (
lua_c⁄ˇt
Ë(
lua_Sèã
 *
L
, 
n
);

242 
LUA_API
 
	$lua_AŒoc
 (
lua_gëÆlocf
Ë(
lua_Sèã
 *
L
, **
ud
);

243 
LUA_API
 
	`lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
);

253 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

255 
	#lua_√wèbÀ
(
L
Ë
	`lua_¸óãèbÀ
(L, 0, 0)

	)

257 
	#lua_ªgi°î
(
L
,
n
,
f
Ë(
	`lua_pushcfun˘i⁄
(L, (f)), 
	`lua_£tglobÆ
(L, (n)))

	)

259 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, (f), 0)

	)

261 
	#lua_°æí
(
L
,
i
Ë
	`lua_objÀn
(L, (i))

	)

263 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TFUNCTION
)

	)

264 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTABLE
)

	)

265 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TLIGHTUSERDATA
)

	)

266 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNIL
)

	)

267 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TBOOLEAN
)

	)

268 
	#lua_i°hªad
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTHREAD
)

	)

269 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNONE
)

	)

270 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L, (n)Ë<0)

	)

272 
	#lua_pushlôîÆ
(
L
, 
s
) \

273 
	`lua_pushl°rög
(
L
, "" 
s
, ((s)/())-1)

	)

275 
	#lua_£tglobÆ
(
L
,
s
Ë
	`lua_£tfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

276 
	#lua_gëglobÆ
(
L
,
s
Ë
	`lua_gëfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

278 
	#lua_to°rög
(
L
,
i
Ë
	`lua_tﬁ°rög
(L, (i), 
NULL
)

	)

286 
	#lua_›í
(Ë
	`luaL_√w°©e
()

	)

288 
	#lua_gëªgi°ry
(
L
Ë
	`lua_pushvÆue
(L, 
LUA_REGISTRYINDEX
)

	)

290 
	#lua_gëgccou¡
(
L
Ë
	`lua_gc
(L, 
LUA_GCCOUNT
, 0)

	)

292 
	#lua_Chunkªadî
 
lua_Ródî


	)

293 
	#lua_Chunkwrôî
 
lua_Wrôî


	)

307 
	#LUA_HOOKCALL
 0

	)

308 
	#LUA_HOOKRET
 1

	)

309 
	#LUA_HOOKLINE
 2

	)

310 
	#LUA_HOOKCOUNT
 3

	)

311 
	#LUA_HOOKTAILRET
 4

	)

317 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

318 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

319 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

320 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

322 
lua_Debug
 
	tlua_Debug
;

326 (*
	tlua_Hook
Ë(
	tlua_Sèã
 *
	tL
, 
	tlua_Debug
 *
	t¨
);

329 
LUA_API
 
	`lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
);

330 
LUA_API
 
	`lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
);

331 
LUA_API
 c⁄° *
	`lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

332 
LUA_API
 c⁄° *
	`lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

333 
LUA_API
 c⁄° *
	`lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

334 
LUA_API
 c⁄° *
	`lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

336 
LUA_API
 
	`lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

337 
LUA_API
 
lua_Hook
 
	`lua_gëhook
 (
lua_Sèã
 *
L
);

338 
LUA_API
 
	`lua_gëhookmask
 (
lua_Sèã
 *
L
);

339 
LUA_API
 
	`lua_gëhookcou¡
 (
lua_Sèã
 *
L
);

342 
	slua_Debug
 {

343 
evít
;

344 c⁄° *
«me
;

345 c⁄° *
«mewh©
;

346 c⁄° *
wh©
;

347 c⁄° *
sour˚
;

348 
cuºíéöe
;

349 
nups
;

350 
löedeföed
;

351 
œ°löedeföed
;

352 
sh‹t_§c
[
LUA_IDSIZE
];

354 
i_ci
;

	@luac.c

7 
	~<î∫o.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#luac_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

16 
	~"œuxlib.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"l°rög.h
"

24 
	~"lundump.h
"

26 
	#PROGNAME
 "luac"

	)

27 
	#OUTPUT
 
PROGNAME
 ".out"

	)

29 
	gli°ög
=0;

30 
	gdumpög
=1;

31 
	g°rùpög
=0;

32 
	gOuçut
[]={ 
OUTPUT
 };

33 c⁄° * 
	gouçut
=
Ouçut
;

34 c⁄° * 
	g¥og«me
=
PROGNAME
;

36 
	$Áèl
(c⁄° * 
mesßge
)

38 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

39 
	`exô
(
EXIT_FAILURE
);

40 
	}
}

42 
	$ˇ¬Ÿ
(c⁄° * 
wh©
)

44 
	`Ârötf
(
°dîr
,"%s: c™nŸ %†%s: %s\n",
¥og«me
,
wh©
,
ouçut
,
	`°ªº‹
(
î∫o
));

45 
	`exô
(
EXIT_FAILURE
);

46 
	}
}

48 
	$ußge
(c⁄° * 
mesßge
)

50 i‡(*
mesßge
=='-')

51 
	`Ârötf
(
°dîr
,"%s: uƒecognized o±i⁄ " 
LUA_QS
 "\n",
¥og«me
,
mesßge
);

53 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

54 
	`Ârötf
(
°dîr
,

59 " -ÿ«mê ouçuàtÿfûê" 
	`LUA_QL
("name") " (default is \"%s\")\n"

64 
¥og«me
,
Ouçut
);

65 
	`exô
(
EXIT_FAILURE
);

66 
	}
}

68 
	#IS
(
s
Ë(
	`°rcmp
(
¨gv
[
i
],s)==0)

	)

70 
	$dﬂrgs
(
¨gc
, * 
¨gv
[])

72 
i
;

73 i‡(
¨gv
[0]!=
NULL
 && *¨gv[0]!=0Ë
¥og«me
=argv[0];

74 
i
=1; i<
¨gc
; i++)

76 i‡(*
¨gv
[
i
]!='-')

78 i‡(
	`IS
("--"))

80 ++
i
;

83 i‡(
	`IS
("-"))

85 i‡(
	`IS
("-l"))

86 ++
li°ög
;

87 i‡(
	`IS
("-o"))

89 
ouçut
=
¨gv
[++
i
];

90 i‡(
ouçut
==
NULL
 || *ouçut==0Ë
	`ußge
(
	`LUA_QL
("-o") "Çeedsárgument");

91 i‡(
	`IS
("-")Ë
ouçut
=
NULL
;

93 i‡(
	`IS
("-p"))

94 
dumpög
=0;

95 i‡(
	`IS
("-s"))

96 
°rùpög
=1;

97 i‡(
	`IS
("-v"))

99 
	`¥ötf
("%† %s\n",
LUA_VERSION
,
LUA_COPYRIGHT
);

100 i‡(
¨gc
==2Ë
	`exô
(
EXIT_SUCCESS
);

103 
	`ußge
(
¨gv
[
i
]);

105 i‡(
i
==
¨gc
 && (
li°ög
 || !
dumpög
))

107 
dumpög
=0;

108 
¨gv
[--
i
]=
Ouçut
;

110  
i
;

111 
	}
}

113 
	#t›rŸo
(
L
,
i
Ë(
	`˛vÆue
(L->
t›
+(i))->
l
.
p
)

	)

115 
PrŸo
* 
	$comböe
(
lua_Sèã
* 
L
, 
n
)

117 i‡(
n
==1)

118  
	`t›rŸo
(
L
,-1);

121 
i
,
pc
;

122 
PrŸo
* 
f
=
	`luaF_√w¥Ÿo
(
L
);

123 
	`£çtvÆue2s
(
L
,L->
t›
,
f
); 
	`ö¸_t›
(L);

124 
f
->
sour˚
=
	`luaS_√wlôîÆ
(
L
,"=(" 
PROGNAME
 ")");

125 
f
->
max°acksize
=1;

126 
pc
=2*
n
+1;

127 
f
->
code
=
	`luaM_√wve˘‹
(
L
,
pc
,
In°ru˘i⁄
);

128 
f
->
sizecode
=
pc
;

129 
f
->
p
=
	`luaM_√wve˘‹
(
L
,
n
,
PrŸo
*);

130 
f
->
sizï
=
n
;

131 
pc
=0;

132 
i
=0; i<
n
; i++)

134 
f
->
p
[
i
]=
	`t›rŸo
(
L
,i-
n
-1);

135 
f
->
code
[
pc
++]=
	`CREATE_ABx
(
OP_CLOSURE
,0,
i
);

136 
f
->
code
[
pc
++]=
	`CREATE_ABC
(
OP_CALL
,0,1,1);

138 
f
->
code
[
pc
++]=
	`CREATE_ABC
(
OP_RETURN
,0,1,0);

139  
f
;

141 
	}
}

143 
	$wrôî
(
lua_Sèã
* 
L
, c⁄° * 
p
, 
size_t
 
size
, * 
u
)

145 
	`UNUSED
(
L
);

146  (
	`fwrôe
(
p
,
size
,1,(
FILE
*)
u
)!=1) && (size!=0);

147 
	}
}

149 
	sSmaö
 {

150 
	m¨gc
;

151 ** 
	m¨gv
;

154 
	$pmaö
(
lua_Sèã
* 
L
)

156 
Smaö
* 
s
 = (Smaö*)
	`lua_tou£rd©a
(
L
, 1);

157 
¨gc
=
s
->argc;

158 ** 
¨gv
=
s
->argv;

159 
PrŸo
* 
f
;

160 
i
;

161 i‡(!
	`lua_check°ack
(
L
,
¨gc
)Ë
	`Áèl
("too many input files");

162 
i
=0; i<
¨gc
; i++)

164 c⁄° * 
fûíame
=
	`IS
("-"Ë? 
NULL
 : 
¨gv
[
i
];

165 i‡(
	`luaL_lﬂdfûe
(
L
,
fûíame
)!=0Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

167 
f
=
	`comböe
(
L
,
¨gc
);

168 i‡(
li°ög
Ë
	`luaU_¥öt
(
f
,listing>1);

169 i‡(
dumpög
)

171 
FILE
* 
D
(
ouçut
==
NULL
Ë? 
°dout
 : 
	`f›í
(output,"wb");

172 i‡(
D
==
NULL
Ë
	`ˇ¬Ÿ
("open");

173 
	`lua_lock
(
L
);

174 
	`luaU_dump
(
L
,
f
,
wrôî
,
D
,
°rùpög
);

175 
	`lua_u∆ock
(
L
);

176 i‡(
	`„º‹
(
D
)Ë
	`ˇ¬Ÿ
("write");

177 i‡(
	`f˛o£
(
D
)Ë
	`ˇ¬Ÿ
("close");

180 
	}
}

182 
	$maö
(
¨gc
, * 
¨gv
[])

184 
lua_Sèã
* 
L
;

185 
Smaö
 
s
;

186 
i
=
	`dﬂrgs
(
¨gc
,
¨gv
);

187 
¨gc
-=
i
; 
¨gv
+=i;

188 i‡(
¨gc
<=0Ë
	`ußge
("no input files given");

189 
L
=
	`lua_›í
();

190 i‡(
L
==
NULL
Ë
	`Áèl
("notÉnough memory for state");

191 
s
.
¨gc
=argc;

192 
s
.
¨gv
=argv;

193 i‡(
	`lua_˝ˇŒ
(
L
,
pmaö
,&
s
)!=0Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

194 
	`lua_˛o£
(
L
);

195  
EXIT_SUCCESS
;

196 
	}
}

	@luaconf.h

8 #i‚de‡
lc⁄fig_h


9 
	#lc⁄fig_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

27 #i‡
deföed
(
__STRICT_ANSI__
)

28 
	#LUA_ANSI


	)

32 #i‡!
deföed
(
LUA_ANSI
Ë&& deföed(
_WIN32
)

33 
	#LUA_WIN


	)

36 #i‡
deföed
(
LUA_USE_LINUX
)

37 
	#LUA_USE_POSIX


	)

38 
	#LUA_USE_DLOPEN


	)

39 
	#LUA_USE_READLINE


	)

42 #i‡
deföed
(
LUA_USE_MACOSX
)

43 
	#LUA_USE_POSIX


	)

44 
	#LUA_DL_DYLD


	)

54 #i‡
deföed
(
LUA_USE_POSIX
)

55 
	#LUA_USE_MKSTEMP


	)

56 
	#LUA_USE_ISATTY


	)

57 
	#LUA_USE_POPEN


	)

58 
	#LUA_USE_ULONGJMP


	)

71 #i‡
deföed
(
_WIN32
)

76 
	#LUA_LDIR
 "!\\lua\\"

	)

77 
	#LUA_CDIR
 "!\\"

	)

78 
	#LUA_PATH_DEFAULT
 \

79 ".\\?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?\\init.lua;" \

80 
LUA_CDIR
"?.lua;" LUA_CDIR"?\\öô.lua"

	)

81 
	#LUA_CPATH_DEFAULT
 \

82 ".\\?.dŒ;" 
LUA_CDIR
"?.dŒ;" LUA_CDIR"lﬂdÆl.dŒ"

	)

85 
	#LUA_ROOT
 "/u§/loˇl/"

	)

86 
	#LUA_LDIR
 
LUA_ROOT
 "sh¨e/lua/5.1/"

	)

87 
	#LUA_CDIR
 
LUA_ROOT
 "lib/lua/5.1/"

	)

88 
	#LUA_PATH_DEFAULT
 \

89 "./?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?/init.lua;" \

90 
LUA_CDIR
"?.lua;" LUA_CDIR"?/öô.lua"

	)

91 
	#LUA_CPATH_DEFAULT
 \

92 "./?.so;" 
LUA_CDIR
"?.so;" LUA_CDIR"lﬂdÆl.so"

	)

101 #i‡
deföed
(
_WIN32
)

102 
	#LUA_DIRSEP
 "\\"

	)

104 
	#LUA_DIRSEP
 "/"

	)

120 
	#LUA_PATHSEP
 ";"

	)

121 
	#LUA_PATH_MARK
 "?"

	)

122 
	#LUA_EXECDIR
 "!"

	)

123 
	#LUA_IGMARK
 "-"

	)

131 
	#LUA_INTEGER
 
±rdiff_t


	)

142 #i‡
deföed
(
LUA_BUILD_AS_DLL
)

144 #i‡
deföed
(
LUA_CORE
Ë|| deföed(
LUA_LIB
)

145 
	#LUA_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

147 
	#LUA_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

152 
	#LUA_API
 

	)

157 
	#LUALIB_API
 
LUA_API


	)

169 #i‡
deföed
(
luØŒ_c
)

170 
	#LUAI_FUNC
 

	)

171 
	#LUAI_DATA


	)

173 #ñi‡
deföed
(
__GNUC__
Ë&& ((__GNUC__*100 + 
__GNUC_MINOR__
) >= 302) && \

174 
	$deföed
(
__ELF__
)

175 
	#LUAI_FUNC
 
	`__©åibuã__
((
	`visibûôy
("hiddí"))Ë

	)

176 
	#LUAI_DATA
 
LUAI_FUNC


	)

179 
	#LUAI_FUNC
 

	)

180 
	#LUAI_DATA
 

	)

189 
	#LUA_QL
(
x
Ë"'" x "'"

	)

190 
	#LUA_QS
 
	`LUA_QL
("%s")

	)

198 
	#LUA_IDSIZE
 60

	)

207 #i‡
	`deföed
(
lua_c
Ë|| deföed(
luØŒ_c
)

215 #i‡
	`deföed
(
LUA_USE_ISATTY
)

216 
	~<uni°d.h
>

217 
	#lua_°dö_is_ây
(Ë
	`ißây
(0)

	)

218 #ñi‡
	`deföed
(
LUA_WIN
)

219 
	~<io.h
>

220 
	~<°dio.h
>

221 
	#lua_°dö_is_ây
(Ë
	`_ißây
(
	`_fûío
(
°dö
))

	)

223 
	#lua_°dö_is_ây
(Ë1

	)

233 
	#LUA_PROMPT
 "> "

	)

234 
	#LUA_PROMPT2
 ">> "

	)

242 
	#LUA_PROGNAME
 "lua"

	)

250 
	#LUA_MAXINPUT
 512

	)

261 #i‡
	`deföed
(
LUA_USE_READLINE
)

262 
	~<°dio.h
>

263 
	~<ªadlöe/ªadlöe.h
>

264 
	~<ªadlöe/hi°‹y.h
>

265 
	#lua_ªadlöe
(
L
,
b
,
p
Ë(()L, ((b)=
	`ªadlöe
’)Ë!
NULL
)

	)

266 
	#lua_ßvñöe
(
L
,
idx
) \

267 i‡(
	`lua_°æí
(
L
,
idx
) > 0) \

268 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

269 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

271 
	#lua_ªadlöe
(
L
,
b
,
p
) \

272 (()
L
, 
	`Âuts
(
p
, 
°dout
), 
	`fÊush
(stdout), \

273 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
°dö
Ë!
NULL
Ë

	)

274 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; 
	}

	)
}

275 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

290 
	#LUAI_GCPAUSE
 200

	)

301 
	#LUAI_GCMUL
 200

	)

310 #unde‡
LUA_COMPAT_GETN


317 #unde‡
LUA_COMPAT_LOADLIB


324 
	#LUA_COMPAT_VARARG


	)

331 
	#LUA_COMPAT_MOD


	)

339 
	#LUA_COMPAT_LSTR
 1

	)

346 
	#LUA_COMPAT_GFIND


	)

354 
	#LUA_COMPAT_OPENLIB


	)

365 #i‡
deföed
(
LUA_USE_APICHECK
)

366 
	~<as£π.h
>

367 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; 
	`as£π
(o); }

	)

369 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; }

	)

379 #i‡
INT_MAX
-20 < 32760

380 
	#LUAI_BITSINT
 16

	)

381 #ñi‡
INT_MAX
 > 2147483640L

383 
	#LUAI_BITSINT
 32

	)

401 #i‡
LUAI_BITSINT
 >= 32

402 
	#LUAI_UINT32
 

	)

403 
	#LUAI_INT32
 

	)

404 
	#LUAI_MAXINT32
 
INT_MAX


	)

405 
	#LUAI_UMEM
 
size_t


	)

406 
	#LUAI_MEM
 
±rdiff_t


	)

409 
	#LUAI_UINT32
 

	)

410 
	#LUAI_INT32
 

	)

411 
	#LUAI_MAXINT32
 
LONG_MAX


	)

412 
	#LUAI_UMEM
 

	)

413 
	#LUAI_MEM
 

	)

423 
	#LUAI_MAXCALLS
 20000

	)

433 
	#LUAI_MAXCSTACK
 2048

	)

455 
	#LUAI_MAXCCALLS
 200

	)

462 
	#LUAI_MAXVARS
 200

	)

469 
	#LUAI_MAXUPVALUES
 60

	)

475 
	#LUAL_BUFFERSIZE
 
BUFSIZ


	)

491 
	#LUA_NUMBER_DOUBLE


	)

492 
	#LUA_NUMBER
 

	)

498 
	#LUAI_UACNUMBER
 

	)

508 
	#LUA_NUMBER_SCAN
 "%lf"

	)

509 
	#LUA_NUMBER_FMT
 "%.14g"

	)

510 
	#lua_numbî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_NUMBER_FMT
, (n))

	)

511 
	#LUAI_MAXNUMBER2STR
 32

	)

512 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p))

	)

518 #i‡
deföed
(
LUA_CORE
)

519 
	~<m©h.h
>

520 
	#luai_numadd
(
a
,
b
Ë(◊)+(b))

	)

521 
	#luai_numsub
(
a
,
b
Ë(◊)-(b))

	)

522 
	#luai_nummul
(
a
,
b
Ë(◊)*(b))

	)

523 
	#luai_numdiv
(
a
,
b
Ë(◊)/(b))

	)

524 
	#luai_nummod
(
a
,
b
Ë(◊Ë- 
	`Êo‹
(◊)/(b))*(b))

	)

525 
	#luai_numpow
(
a
,
b
Ë(
	`pow
◊,b))

	)

526 
	#luai_numunm
(
a
Ë(-◊))

	)

527 
	#luai_numeq
(
a
,
b
Ë(◊)==(b))

	)

528 
	#luai_num…
(
a
,
b
Ë(◊)<(b))

	)

529 
	#luai_numÀ
(
a
,
b
Ë(◊)<=(b))

	)

530 
	#luai_numi¢™
(
a
Ë(!
	`luai_numeq
(◊), (a)))

	)

544 #i‡
deföed
(
LUA_NUMBER_DOUBLE
Ë&& !deföed(
LUA_ANSI
Ë&& !deföed(
__SSE2__
) && \

545 (
deföed
(
__i386
Ë|| deföed (
_M_IX86
Ë|| 
	$deföed
(
__i386__
))

546 
	uluai_Ca°
 { 
l_d
; 
l_l
; };

547 
	#lua_numbî2öt
(
i
,
d
) \

548 { vﬁ©ûê
luai_Ca°
 
u
; u.
l_d
 = (
d
Ë+ 6755399441055744.0; (
i
Ëu.
l_l
; 
	}

	)
}

549 
	#lua_numbî2öãgî
(
i
,
n
Ë
	`lua_numbî2öt
(i,Ç)

	)

553 
	#lua_numbî2öt
(
i
,
d
Ë((i)=()(d))

	)

554 
	#lua_numbî2öãgî
(
i
,
d
Ë((i)=(
lua_I¡egî
)(d))

	)

568 
	#LUAI_USER_ALIGNMENT_T
 uni⁄ { 
u
; *
s
; 
l
; }

	)

579 #i‡
deföed
(
__˝lu•lus
)

581 
	#LUAI_THROW
(
L
,
c
Ë
	`throw
(c)

	)

582 
	#LUAI_TRY
(
L
,
c
,
a
Ë
åy
 {á } 
	`ˇtch
(...) \

583 { i‡((
c
)->
°©us
 =0Ë(c)->°©u†-1; }

	)

584 
	#luai_jmpbuf
 

	)

586 #ñi‡
deföed
(
LUA_USE_ULONGJMP
)

588 
	#LUAI_THROW
(
L
,
c
Ë
	`_l⁄gjmp
((c)->
b
, 1)

	)

589 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`_£tjmp
((c)->
b
Ë=0Ë{á }

	)

590 
	#luai_jmpbuf
 
jmp_buf


	)

594 
	#LUAI_THROW
(
L
,
c
Ë
	`l⁄gjmp
((c)->
b
, 1)

	)

595 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`£tjmp
((c)->
b
Ë=0Ë{á }

	)

596 
	#luai_jmpbuf
 
jmp_buf


	)

606 
	#LUA_MAXCAPTURES
 32

	)

617 #i‡
deföed
(
lo¶ib_c
Ë|| deföed(
luØŒ_c
)

619 #i‡
deföed
(
LUA_USE_MKSTEMP
)

620 
	~<uni°d.h
>

621 
	#LUA_TMPNAMBUFSIZE
 32

	)

622 
	#lua_tm≤am
(
b
,
e
) { \

623 
	`°r˝y
(
b
, "/tmp/lua_XXXXXX"); \

624 
e
 = 
	`mk°emp
(
b
); \

625 i‡(
e
 !-1Ë
	`˛o£
(e); \

626 
e
 = (ê=-1); }

	)

629 
	#LUA_TMPNAMBUFSIZE
 
L_tm≤am


	)

630 
	#lua_tm≤am
(
b
,
e
Ë{É = (
	`tm≤am
(bË=
NULL
); }

	)

641 #i‡
deföed
(
LUA_USE_POPEN
)

643 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`p›í
(c,m))

	)

644 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`p˛o£
(fûeË!-1))

	)

646 #ñi‡
deföed
(
LUA_WIN
)

648 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`_p›í
(c,m))

	)

649 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`_p˛o£
(fûeË!-1))

	)

653 
	#lua_p›í
(
L
,
c
,
m
) (()(()c, m), \

654 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("p›í"Ë"ÇŸ suµ‹ãd"), (
FILE
*)0)

	)

655 
	#lua_p˛o£
(
L
,
fûe
Ë(()(()L, fûe), 0)

	)

673 #i‡
deföed
(
LUA_USE_DLOPEN
)

674 
	#LUA_DL_DLOPEN


	)

677 #i‡
deföed
(
LUA_WIN
)

678 
	#LUA_DL_DLL


	)

688 
	#LUAI_EXTRASPACE
 0

	)

696 
	#luai_u£r°©e›í
(
L
Ë(()L)

	)

697 
	#luai_u£r°©e˛o£
(
L
Ë(()L)

	)

698 
	#luai_u£r°©ëhªad
(
L
,
L1
Ë(()L)

	)

699 
	#luai_u£r°©e‰ì
(
L
Ë(()L)

	)

700 
	#luai_u£r°©îesume
(
L
,
n
Ë(()L)

	)

701 
	#luai_u£r°©eyõld
(
L
,
n
Ë(()L)

	)

712 #i‡
deföed
(
LUA_USELONGLONG
)

714 
	#LUA_INTFRMLEN
 "Œ"

	)

715 
	#LUA_INTFRM_T
 

	)

719 
	#LUA_INTFRMLEN
 "l"

	)

720 
	#LUA_INTFRM_T
 

	)

	@lualib.h

8 #i‚de‡
luÆib_h


9 
	#luÆib_h


	)

11 
	~"lua.h
"

15 
	#LUA_FILEHANDLE
 "FILE*"

	)

18 
	#LUA_COLIBNAME
 "c‹outöe"

	)

19 
LUALIB_API
 (
lua›í_ba£
Ë(
lua_Sèã
 *
L
);

21 
	#LUA_TABLIBNAME
 "èbÀ"

	)

22 
LUALIB_API
 (
lua›í_èbÀ
Ë(
lua_Sèã
 *
L
);

24 
	#LUA_IOLIBNAME
 "io"

	)

25 
LUALIB_API
 (
lua›í_io
Ë(
lua_Sèã
 *
L
);

27 
	#LUA_OSLIBNAME
 "os"

	)

28 
LUALIB_API
 (
lua›í_os
Ë(
lua_Sèã
 *
L
);

30 
	#LUA_STRLIBNAME
 "°rög"

	)

31 
LUALIB_API
 (
lua›í_°rög
Ë(
lua_Sèã
 *
L
);

33 
	#LUA_MATHLIBNAME
 "m©h"

	)

34 
LUALIB_API
 (
lua›í_m©h
Ë(
lua_Sèã
 *
L
);

36 
	#LUA_DBLIBNAME
 "debug"

	)

37 
LUALIB_API
 (
lua›í_debug
Ë(
lua_Sèã
 *
L
);

39 
	#LUA_LOADLIBNAME
 "∑ckage"

	)

40 
LUALIB_API
 (
lua›í_∑ckage
Ë(
lua_Sèã
 *
L
);

44 
LUALIB_API
 (
luaL_›ílibs
Ë(
lua_Sèã
 *
L
);

48 #i‚de‡
lua_as£π


49 
	#lua_as£π
(
x
Ë(()0)

	)

	@lundump.c

7 
	~<°rög.h
>

9 
	#lundump_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"ldebug.h
"

15 
	~"ldo.h
"

16 
	~"lfunc.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°rög.h
"

20 
	~"lundump.h
"

21 
	~"lzio.h
"

24 
lua_Sèã
* 
	mL
;

25 
ZIO
* 
	mZ
;

26 
Mbuf„r
* 
	mb
;

27 c⁄° * 
	m«me
;

28 } 
	tLﬂdSèã
;

30 #ifde‡
LUAC_TRUST_BINARIES


31 
	#IF
(
c
,
s
)

	)

33 
	#IF
(
c
,
s
Ëi‡(cË
	`îr‹
(
S
,s)

	)

35 
	$îr‹
(
LﬂdSèã
* 
S
, c⁄° * 
why
)

37 
	`luaO_pushf°rög
(
S
->
L
,"%s: %†öÖªcompûed chunk",S->
«me
,
why
);

38 
	`luaD_throw
(
S
->
L
,
LUA_ERRSYNTAX
);

39 
	}
}

42 
	#LﬂdMem
(
S
,
b
,
n
,
size
Ë
	`LﬂdBlock
(S,b,“)*(size))

	)

43 
	#LﬂdByã
(
S
Ë(
lu_byã
)
	`LﬂdCh¨
(S)

	)

44 
	#LﬂdV¨
(
S
,
x
Ë
	`LﬂdMem
(S,&x,1,(x))

	)

45 
	#LﬂdVe˘‹
(
S
,
b
,
n
,
size
Ë
	`LﬂdMem
(S,b,n,size)

	)

47 
	$LﬂdBlock
(
LﬂdSèã
* 
S
, * 
b
, 
size_t
 
size
)

49 
size_t
 
r
=
	`luaZ_ªad
(
S
->
Z
,
b
,
size
);

50 
	`IF
 (
r
!=0, "unexpectedÉnd");

51 
	}
}

53 
	$LﬂdCh¨
(
LﬂdSèã
* 
S
)

55 
x
;

56 
	`LﬂdV¨
(
S
,
x
);

57  
x
;

58 
	}
}

60 
	$LﬂdI¡
(
LﬂdSèã
* 
S
)

62 
x
;

63 
	`LﬂdV¨
(
S
,
x
);

64 
	`IF
 (
x
<0, "bad integer");

65  
x
;

66 
	}
}

68 
lua_Numbî
 
	$LﬂdNumbî
(
LﬂdSèã
* 
S
)

70 
lua_Numbî
 
x
;

71 
	`LﬂdV¨
(
S
,
x
);

72  
x
;

73 
	}
}

75 
TSåög
* 
	$LﬂdSåög
(
LﬂdSèã
* 
S
)

77 
size_t
 
size
;

78 
	`LﬂdV¨
(
S
,
size
);

79 i‡(
size
==0)

80  
NULL
;

83 * 
s
=
	`luaZ_›í•a˚
(
S
->
L
,S->
b
,
size
);

84 
	`LﬂdBlock
(
S
,
s
,
size
);

85  
	`luaS_√wl°r
(
S
->
L
,
s
,
size
-1);

87 
	}
}

89 
	$LﬂdCode
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

91 
n
=
	`LﬂdI¡
(
S
);

92 
f
->
code
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
In°ru˘i⁄
);

93 
f
->
sizecode
=
n
;

94 
	`LﬂdVe˘‹
(
S
,
f
->
code
,
n
,(
In°ru˘i⁄
));

95 
	}
}

97 
PrŸo
* 
LﬂdFun˘i⁄
(
LﬂdSèã
* 
S
, 
TSåög
* 
p
);

99 
	$LﬂdC⁄°™ts
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

101 
i
,
n
;

102 
n
=
	`LﬂdI¡
(
S
);

103 
f
->
k
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
TVÆue
);

104 
f
->
sizek
=
n
;

105 
i
=0; i<
n
; i++Ë
	`£äûvÆue
(&
f
->
k
[i]);

106 
i
=0; i<
n
; i++)

108 
TVÆue
* 
o
=&
f
->
k
[
i
];

109 
t
=
	`LﬂdCh¨
(
S
);

110 
t
)

112 
LUA_TNIL
:

113 
	`£äûvÆue
(
o
);

115 
LUA_TBOOLEAN
:

116 
	`£tbvÆue
(
o
,
	`LﬂdCh¨
(
S
));

118 
LUA_TNUMBER
:

119 
	`£ävÆue
(
o
,
	`LﬂdNumbî
(
S
));

121 
LUA_TSTRING
:

122 
	`£tsvÆue2n
(
S
->
L
,
o
,
	`LﬂdSåög
(S));

125 
	`IF
 (1, "bad constant");

129 
n
=
	`LﬂdI¡
(
S
);

130 
f
->
p
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
PrŸo
*);

131 
f
->
sizï
=
n
;

132 
i
=0; i<
n
; i++Ë
f
->
p
[i]=
NULL
;

133 
i
=0; i<
n
; i++Ë
f
->
p
[i]=
	`LﬂdFun˘i⁄
(
S
,f->
sour˚
);

134 
	}
}

136 
	$LﬂdDebug
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

138 
i
,
n
;

139 
n
=
	`LﬂdI¡
(
S
);

140 
f
->
löeöfo
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,);

141 
f
->
sizñöeöfo
=
n
;

142 
	`LﬂdVe˘‹
(
S
,
f
->
löeöfo
,
n
,());

143 
n
=
	`LﬂdI¡
(
S
);

144 
f
->
locv¨s
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
LocV¨
);

145 
f
->
sizñocv¨s
=
n
;

146 
i
=0; i<
n
; i++Ë
f
->
locv¨s
[i].
v¨«me
=
NULL
;

147 
i
=0; i<
n
; i++)

149 
f
->
locv¨s
[
i
].
v¨«me
=
	`LﬂdSåög
(
S
);

150 
f
->
locv¨s
[
i
].
°¨çc
=
	`LﬂdI¡
(
S
);

151 
f
->
locv¨s
[
i
].
ídpc
=
	`LﬂdI¡
(
S
);

153 
n
=
	`LﬂdI¡
(
S
);

154 
f
->
upvÆues
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
TSåög
*);

155 
f
->
sizeupvÆues
=
n
;

156 
i
=0; i<
n
; i++Ë
f
->
upvÆues
[i]=
NULL
;

157 
i
=0; i<
n
; i++Ë
f
->
upvÆues
[i]=
	`LﬂdSåög
(
S
);

158 
	}
}

160 
PrŸo
* 
	$LﬂdFun˘i⁄
(
LﬂdSèã
* 
S
, 
TSåög
* 
p
)

162 
PrŸo
* 
f
=
	`luaF_√w¥Ÿo
(
S
->
L
);

163 
	`£çtvÆue2s
(
S
->
L
,S->L->
t›
,
f
); 
	`ö¸_t›
(S->L);

164 
f
->
sour˚
=
	`LﬂdSåög
(
S
); i‡(f->sour˚==
NULL
Ëf->sour˚=
p
;

165 
f
->
löedeföed
=
	`LﬂdI¡
(
S
);

166 
f
->
œ°löedeföed
=
	`LﬂdI¡
(
S
);

167 
f
->
nups
=
	`LﬂdByã
(
S
);

168 
f
->
num∑øms
=
	`LﬂdByã
(
S
);

169 
f
->
is_v¨¨g
=
	`LﬂdByã
(
S
);

170 
f
->
max°acksize
=
	`LﬂdByã
(
S
);

171 
	`LﬂdCode
(
S
,
f
);

172 
	`LﬂdC⁄°™ts
(
S
,
f
);

173 
	`LﬂdDebug
(
S
,
f
);

174 
	`IF
 (!
	`luaG_checkcode
(
f
), "bad code");

175 
S
->
L
->
t›
--;

176  
f
;

177 
	}
}

179 
	$LﬂdHódî
(
LﬂdSèã
* 
S
)

181 
h
[
LUAC_HEADERSIZE
];

182 
s
[
LUAC_HEADERSIZE
];

183 
	`luaU_hódî
(
h
);

184 
	`LﬂdBlock
(
S
,
s
,
LUAC_HEADERSIZE
);

185 
	`IF
 (
	`memcmp
(
h
,
s
,
LUAC_HEADERSIZE
)!=0, "bad header");

186 
	}
}

191 
PrŸo
* 
	$luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, 
Mbuf„r
* 
buff
, c⁄° * 
«me
)

193 
LﬂdSèã
 
S
;

194 i‡(*
«me
=='@' || *name=='=')

195 
S
.
«me
=name+1;

196 i‡(*
«me
==
LUA_SIGNATURE
[0])

197 
S
.
«me
="binary string";

199 
S
.
«me
=name;

200 
S
.
L
=L;

201 
S
.
Z
=Z;

202 
S
.
b
=
buff
;

203 
	`LﬂdHódî
(&
S
);

204  
	`LﬂdFun˘i⁄
(&
S
,
	`luaS_√wlôîÆ
(
L
,"=?"));

205 
	}
}

210 
	$luaU_hódî
 (* 
h
)

212 
x
=1;

213 
	`mem˝y
(
h
,
LUA_SIGNATURE
,(LUA_SIGNATURE)-1);

214 
h
+=(
LUA_SIGNATURE
)-1;

215 *
h
++=()
LUAC_VERSION
;

216 *
h
++=()
LUAC_FORMAT
;

217 *
h
++=()*(*)&
x
;

218 *
h
++=()();

219 *
h
++=()(
size_t
);

220 *
h
++=()(
In°ru˘i⁄
);

221 *
h
++=()(
lua_Numbî
);

222 *
h
++=()(((
lua_Numbî
)0.5)==0);

223 
	}
}

	@lundump.h

7 #i‚de‡
lundump_h


8 
	#lundump_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
LUAI_FUNC
 
PrŸo
* 
luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, 
Mbuf„r
* 
buff
, c⁄° * 
«me
);

17 
LUAI_FUNC
 
luaU_hódî
 (* 
h
);

20 
LUAI_FUNC
 
luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
, * 
d©a
, 
°rù
);

22 #ifde‡
luac_c


24 
LUAI_FUNC
 
luaU_¥öt
 (c⁄° 
PrŸo
* 
f
, 
fuŒ
);

28 
	#LUAC_VERSION
 0x51

	)

31 
	#LUAC_FORMAT
 0

	)

34 
	#LUAC_HEADERSIZE
 12

	)

	@lvm.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#lvm_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"l°©e.h
"

24 
	~"l°rög.h
"

25 
	~"…abÀ.h
"

26 
	~"…m.h
"

27 
	~"lvm.h
"

32 
	#MAXTAGLOOP
 100

	)

35 c⁄° 
TVÆue
 *
	$luaV_t⁄umbî
 (c⁄° 
TVÆue
 *
obj
, TVÆuê*
n
) {

36 
lua_Numbî
 
num
;

37 i‡(
	`âi¢umbî
(
obj
))  obj;

38 i‡(
	`âis°rög
(
obj
Ë&& 
	`luaO_°r2d
(
	`svÆue
(obj), &
num
)) {

39 
	`£ävÆue
(
n
, 
num
);

40  
n
;

43  
NULL
;

44 
	}
}

47 
	$luaV_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
) {

48 i‡(!
	`âi¢umbî
(
obj
))

51 
s
[
LUAI_MAXNUMBER2STR
];

52 
lua_Numbî
 
n
 = 
	`nvÆue
(
obj
);

53 
	`lua_numbî2°r
(
s
, 
n
);

54 
	`£tsvÆue2s
(
L
, 
obj
, 
	`luaS_√w
(L, 
s
));

57 
	}
}

60 
	$åa˚exec
 (
lua_Sèã
 *
L
, c⁄° 
In°ru˘i⁄
 *
pc
) {

61 
lu_byã
 
mask
 = 
L
->
hookmask
;

62 c⁄° 
In°ru˘i⁄
 *
ﬁdpc
 = 
L
->
ßvedpc
;

63 
L
->
ßvedpc
 = 
pc
;

64 i‡(
mask
 > 
LUA_MASKLINE
) {

65 i‡(
L
->
hookcou¡
 == 0) {

66 
	`ª£thookcou¡
(
L
);

67 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCOUNT
, -1);

70 i‡(
mask
 & 
LUA_MASKLINE
) {

71 
PrŸo
 *
p
 = 
	`ci_func
(
L
->
ci
)->
l
.p;

72 
≈c
 = 
	`pcRñ
(
pc
, 
p
);

73 
√wlöe
 = 
	`gëlöe
(
p
, 
≈c
);

76 i‡(
≈c
 =0 || 
pc
 <
ﬁdpc
 || 
√wlöe
 !
	`gëlöe
(
p
, 
	`pcRñ
(oldpc,Ö)))

77 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKLINE
, 
√wlöe
);

79 
	}
}

82 
	$ˇŒTMªs
 (
lua_Sèã
 *
L
, 
StkId
 
ªs
, c⁄° 
TVÆue
 *
f
,

83 c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

84 
±rdiff_t
 
ªsu…
 = 
	`ßve°ack
(
L
, 
ªs
);

85 
	`£tobj2s
(
L
, L->
t›
, 
f
);

86 
	`£tobj2s
(
L
, L->
t›
+1, 
p1
);

87 
	`£tobj2s
(
L
, L->
t›
+2, 
p2
);

88 
	`luaD_check°ack
(
L
, 3);

89 
L
->
t›
 += 3;

90 
	`luaD_ˇŒ
(
L
, L->
t›
 - 3, 1);

91 
ªs
 = 
	`ª°‹e°ack
(
L
, 
ªsu…
);

92 
L
->
t›
--;

93 
	`£tobjs2s
(
L
, 
ªs
, L->
t›
);

94 
	}
}

98 
	$ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

99 c⁄° 
TVÆue
 *
p2
, c⁄° TVÆuê*
p3
) {

100 
	`£tobj2s
(
L
, L->
t›
, 
f
);

101 
	`£tobj2s
(
L
, L->
t›
+1, 
p1
);

102 
	`£tobj2s
(
L
, L->
t›
+2, 
p2
);

103 
	`£tobj2s
(
L
, L->
t›
+3, 
p3
);

104 
	`luaD_check°ack
(
L
, 4);

105 
L
->
t›
 += 4;

106 
	`luaD_ˇŒ
(
L
, L->
t›
 - 4, 0);

107 
	}
}

110 
	$luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

111 
lo›
;

112 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

113 c⁄° 
TVÆue
 *
tm
;

114 i‡(
	`âi°abÀ
(
t
)) {

115 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

116 c⁄° 
TVÆue
 *
ªs
 = 
	`luaH_gë
(
h
, 
key
);

117 i‡(!
	`âi¢û
(
ªs
) ||

118 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_INDEX
)Ë=
NULL
) {

119 
	`£tobj2s
(
L
, 
vÆ
, 
ªs
);

124 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_INDEX
)))

125 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

126 i‡(
	`âisfun˘i⁄
(
tm
)) {

127 
	`ˇŒTMªs
(
L
, 
vÆ
, 
tm
, 
t
, 
key
);

130 
t
 = 
tm
;

132 
	`luaG_ru√º‹
(
L
, "loop in gettable");

133 
	}
}

136 
	$luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

137 
lo›
;

138 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

139 c⁄° 
TVÆue
 *
tm
;

140 i‡(
	`âi°abÀ
(
t
)) {

141 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

142 
TVÆue
 *
ﬁdvÆ
 = 
	`luaH_£t
(
L
, 
h
, 
key
);

143 i‡(!
	`âi¢û
(
ﬁdvÆ
) ||

144 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_NEWINDEX
)Ë=
NULL
) {

145 
	`£tobj2t
(
L
, 
ﬁdvÆ
, 
vÆ
);

146 
	`luaC_b¨rõπ
(
L
, 
h
, 
vÆ
);

151 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_NEWINDEX
)))

152 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

153 i‡(
	`âisfun˘i⁄
(
tm
)) {

154 
	`ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
);

157 
t
 = 
tm
;

159 
	`luaG_ru√º‹
(
L
, "loop in settable");

160 
	}
}

163 
	$ˇŒ_böTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

164 
StkId
 
ªs
, 
TMS
 
evít
) {

165 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

166 i‡(
	`âi¢û
(
tm
))

167 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

168 i‡(!
	`âisfun˘i⁄
(
tm
))  0;

169 
	`ˇŒTMªs
(
L
, 
ªs
, 
tm
, 
p1
, 
p2
);

171 
	}
}

174 c⁄° 
TVÆue
 *
	$gë_compTM
 (
lua_Sèã
 *
L
, 
TabÀ
 *
mt1
, TabÀ *
mt2
,

175 
TMS
 
evít
) {

176 c⁄° 
TVÆue
 *
tm1
 = 
	`Á°tm
(
L
, 
mt1
, 
evít
);

177 c⁄° 
TVÆue
 *
tm2
;

178 i‡(
tm1
 =
NULL
)  NULL;

179 i‡(
mt1
 =
mt2
Ë 
tm1
;

180 
tm2
 = 
	`Á°tm
(
L
, 
mt2
, 
evít
);

181 i‡(
tm2
 =
NULL
)  NULL;

182 i‡(
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

183  
tm1
;

184  
NULL
;

185 
	}
}

188 
	$ˇŒ_‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

189 
TMS
 
evít
) {

190 c⁄° 
TVÆue
 *
tm1
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

191 c⁄° 
TVÆue
 *
tm2
;

192 i‡(
	`âi¢û
(
tm1
))  -1;

193 
tm2
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

194 i‡(!
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

196 
	`ˇŒTMªs
(
L
, L->
t›
, 
tm1
, 
p1
, 
p2
);

197  !
	`l_isÁl£
(
L
->
t›
);

198 
	}
}

201 
	$l_°rcmp
 (c⁄° 
TSåög
 *
ls
, c⁄° TSåög *
rs
) {

202 c⁄° *
l
 = 
	`gë°r
(
ls
);

203 
size_t
 
Œ
 = 
ls
->
tsv
.
Àn
;

204 c⁄° *
r
 = 
	`gë°r
(
rs
);

205 
size_t
 
Ã
 = 
rs
->
tsv
.
Àn
;

207 
ãmp
 = 
	`°rcﬁl
(
l
, 
r
);

208 i‡(
ãmp
 != 0) Åemp;

210 
size_t
 
Àn
 = 
	`°æí
(
l
);

211 i‡(
Àn
 =
Ã
)

212  (
Àn
 =
Œ
) ? 0 : 1;

213 i‡(
Àn
 =
Œ
)

216 
Àn
++;

217 
l
 +
Àn
; 
Œ
 -Àn; 
r
 +Àn; 
Ã
 -=Üen;

220 
	}
}

223 
	$luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

224 
ªs
;

225 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

226  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

227 i‡(
	`âi¢umbî
(
l
))

228  
	`luai_num…
(
	`nvÆue
(
l
),ÇvÆue(
r
));

229 i‡(
	`âis°rög
(
l
))

230  
	`l_°rcmp
(
	`øwtsvÆue
(
l
),ÑawtsvÆue(
r
)) < 0;

231 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LT
)) != -1)

232  
ªs
;

233  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

234 
	}
}

237 
	$Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

238 
ªs
;

239 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

240  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

241 i‡(
	`âi¢umbî
(
l
))

242  
	`luai_numÀ
(
	`nvÆue
(
l
),ÇvÆue(
r
));

243 i‡(
	`âis°rög
(
l
))

244  
	`l_°rcmp
(
	`øwtsvÆue
(
l
),ÑawtsvÆue(
r
)) <= 0;

245 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LE
)) != -1)

246  
ªs
;

247 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
r
, 
l
, 
TM_LT
)) != -1)

248  !
ªs
;

249  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

250 
	}
}

253 
	$luaV_equÆvÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

254 c⁄° 
TVÆue
 *
tm
;

255 
	`lua_as£π
(
	`ây≥
(
t1
Ë=ây≥(
t2
));

256 
	`ây≥
(
t1
)) {

257 
LUA_TNIL
:  1;

258 
LUA_TNUMBER
:  
	`luai_numeq
(
	`nvÆue
(
t1
),ÇvÆue(
t2
));

259 
LUA_TBOOLEAN
:  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

260 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

261 
LUA_TUSERDATA
: {

262 i‡(
	`uvÆue
(
t1
Ë=uvÆue(
t2
))  1;

263 
tm
 = 
	`gë_compTM
(
L
, 
	`uvÆue
(
t1
)->
më©abÀ
, uvÆue(
t2
)->metatable,

264 
TM_EQ
);

267 
LUA_TTABLE
: {

268 i‡(
	`hvÆue
(
t1
Ë=hvÆue(
t2
))  1;

269 
tm
 = 
	`gë_compTM
(
L
, 
	`hvÆue
(
t1
)->
më©abÀ
, hvÆue(
t2
)->më©abÀ, 
TM_EQ
);

272 :  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

274 i‡(
tm
 =
NULL
)  0;

275 
	`ˇŒTMªs
(
L
, L->
t›
, 
tm
, 
t1
, 
t2
);

276  !
	`l_isÁl£
(
L
->
t›
);

277 
	}
}

280 
	$luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
, 
œ°
) {

282 
StkId
 
t›
 = 
L
->
ba£
 + 
œ°
 + 1;

283 
n
 = 2;

284 i‡(!
	`to°rög
(
L
, 
t›
-2) || !tostring(L,Åop-1)) {

285 i‡(!
	`ˇŒ_böTM
(
L
, 
t›
-2,Å›-1,Å›-2, 
TM_CONCAT
))

286 
	`luaG_c⁄ˇãº‹
(
L
, 
t›
-2,Åop-1);

287 } i‡(
	`tsvÆue
(
t›
-1)->
Àn
 > 0) {

289 
size_t
 
é
 = 
	`tsvÆue
(
t›
-1)->
Àn
;

290 *
buf„r
;

291 
i
;

293 
n
 = 1;Ç < 
tŸÆ
 && 
	`to°rög
(
L
, 
t›
-n-1);Ç++) {

294 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
n
-1)->
Àn
;

295 i‡(
l
 >
MAX_SIZET
 - 
é
Ë
	`luaG_ru√º‹
(
L
, "stringÜength overflow");

296 
é
 +
l
;

298 
buf„r
 = 
	`luaZ_›í•a˚
(
L
, &
	`G
(L)->
buff
, 
é
);

299 
é
 = 0;

300 
i
=
n
; i>0; i--) {

301 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
i
)->
Àn
;

302 
	`mem˝y
(
buf„r
+
é
, 
	`svÆue
(
t›
-
i
), 
l
);

303 
é
 +
l
;

305 
	`£tsvÆue2s
(
L
, 
t›
-
n
, 
	`luaS_√wl°r
(L, 
buf„r
, 
é
));

307 
tŸÆ
 -
n
-1;

308 
œ°
 -
n
-1;

309 } 
tŸÆ
 > 1);

310 
	}
}

313 
	$Arôh
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
,

314 c⁄° 
TVÆue
 *
rc
, 
TMS
 
›
) {

315 
TVÆue
 
ãmpb
, 
ãmpc
;

316 c⁄° 
TVÆue
 *
b
, *
c
;

317 i‡((
b
 = 
	`luaV_t⁄umbî
(
rb
, &
ãmpb
)Ë!
NULL
 &&

318 (
c
 = 
	`luaV_t⁄umbî
(
rc
, &
ãmpc
)Ë!
NULL
) {

319 
lua_Numbî
 
nb
 = 
	`nvÆue
(
b
), 
nc
 =ÇvÆue(
c
);

320 
›
) {

321 
TM_ADD
: 
	`£ävÆue
(
ø
, 
	`luai_numadd
(
nb
, 
nc
)); ;

322 
TM_SUB
: 
	`£ävÆue
(
ø
, 
	`luai_numsub
(
nb
, 
nc
)); ;

323 
TM_MUL
: 
	`£ävÆue
(
ø
, 
	`luai_nummul
(
nb
, 
nc
)); ;

324 
TM_DIV
: 
	`£ävÆue
(
ø
, 
	`luai_numdiv
(
nb
, 
nc
)); ;

325 
TM_MOD
: 
	`£ävÆue
(
ø
, 
	`luai_nummod
(
nb
, 
nc
)); ;

326 
TM_POW
: 
	`£ävÆue
(
ø
, 
	`luai_numpow
(
nb
, 
nc
)); ;

327 
TM_UNM
: 
	`£ävÆue
(
ø
, 
	`luai_numunm
(
nb
)); ;

328 : 
	`lua_as£π
(0); ;

331 i‡(!
	`ˇŒ_böTM
(
L
, 
rb
, 
rc
, 
ø
, 
›
))

332 
	`luaG_¨ôhîr‹
(
L
, 
rb
, 
rc
);

333 
	}
}

341 
	#ru¡ime_check
(
L
, 
c
Ë{ i‡(!(c)Ë; }

	)

343 
	#RA
(
i
Ë(
ba£
+
	`GETARG_A
(i))

	)

345 
	#RB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_B
(i))

	)

346 
	#RC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_C
(i))

	)

347 
	#RKB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

348 
	`ISK
(
	`GETARG_B
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_B(i)Ë: 
ba£
+GETARG_B(i))

	)

349 
	#RKC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

350 
	`ISK
(
	`GETARG_C
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_C(i)Ë: 
ba£
+GETARG_C(i))

	)

351 
	#KBx
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, 
k
+
	`GETARG_Bx
(i))

	)

354 
	#dojump
(
L
,
pc
,
i
Ë{’cË+(i); 
	`luai_thªadyõld
(L);}

	)

357 
	#PrŸe˘
(
x
Ë{ 
L
->
ßvedpc
 = 
pc
; {x;}; 
ba£
 = L->ba£; }

	)

360 
	#¨ôh_›
(
›
,
tm
) { \

361 
TVÆue
 *
rb
 = 
	`RKB
(
i
); \

362 
TVÆue
 *
rc
 = 
	`RKC
(
i
); \

363 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) { \

364 
lua_Numbî
 
nb
 = 
	`nvÆue
(
rb
), 
nc
 =ÇvÆue(
rc
); \

365 
	`£ävÆue
(
ø
, 
	`›
(
nb
, 
nc
)); \

368 
	`PrŸe˘
(
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
tm
)); \

369 }

	)

373 
	$luaV_execuã
 (
lua_Sèã
 *
L
, 
√xecˇŒs
) {

374 
LClosuª
 *
˛
;

375 
StkId
 
ba£
;

376 
TVÆue
 *
k
;

377 c⁄° 
In°ru˘i⁄
 *
pc
;

378 
ªíåy
:

379 
pc
 = 
L
->
ßvedpc
;

380 
˛
 = &
	`˛vÆue
(
L
->
ci
->
func
)->
l
;

381 
ba£
 = 
L
->base;

382 
k
 = 
˛
->
p
->k;

385 c⁄° 
In°ru˘i⁄
 
i
 = *
pc
++;

386 
StkId
 
ø
;

387 i‡((
L
->
hookmask
 & (
LUA_MASKLINE
 | 
LUA_MASKCOUNT
)) &&

388 (--
L
->
hookcou¡
 =0 || L->
hookmask
 & 
LUA_MASKLINE
)) {

389 
	`åa˚exec
(
L
, 
pc
);

390 i‡(
L
->
°©us
 =
LUA_YIELD
) {

391 
L
->
ßvedpc
 = 
pc
 - 1;

394 
ba£
 = 
L
->base;

397 
ø
 = 
	`RA
(
i
);

398 
	`lua_as£π
(
ba£
 =
L
->ba£ && L->ba£ =L->
ci
->base);

399 
	`lua_as£π
(
ba£
 <
L
->
t›
 && L->t› <L->
°ack
 + L->
°acksize
);

400 
	`lua_as£π
(
L
->
t›
 =L->
ci
->t› || 
	`luaG_check›í›
(
i
));

401 
	`GET_OPCODE
(
i
)) {

402 
OP_MOVE
: {

403 
	`£tobjs2s
(
L
, 
ø
, 
	`RB
(
i
));

406 
OP_LOADK
: {

407 
	`£tobj2s
(
L
, 
ø
, 
	`KBx
(
i
));

410 
OP_LOADBOOL
: {

411 
	`£tbvÆue
(
ø
, 
	`GETARG_B
(
i
));

412 i‡(
	`GETARG_C
(
i
)Ë
pc
++;

415 
OP_LOADNIL
: {

416 
TVÆue
 *
rb
 = 
	`RB
(
i
);

418 
	`£äûvÆue
(
rb
--);

419 } 
rb
 >
ø
);

422 
OP_GETUPVAL
: {

423 
b
 = 
	`GETARG_B
(
i
);

424 
	`£tobj2s
(
L
, 
ø
, 
˛
->
upvÆs
[
b
]->
v
);

427 
OP_GETGLOBAL
: {

428 
TVÆue
 
g
;

429 
TVÆue
 *
rb
 = 
	`KBx
(
i
);

430 
	`£thvÆue
(
L
, &
g
, 
˛
->
ív
);

431 
	`lua_as£π
(
	`âis°rög
(
rb
));

432 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, &
g
, 
rb
, 
ø
));

435 
OP_GETTABLE
: {

436 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
	`RB
(
i
), 
	`RKC
(i), 
ø
));

439 
OP_SETGLOBAL
: {

440 
TVÆue
 
g
;

441 
	`£thvÆue
(
L
, &
g
, 
˛
->
ív
);

442 
	`lua_as£π
(
	`âis°rög
(
	`KBx
(
i
)));

443 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, &
g
, 
	`KBx
(
i
), 
ø
));

446 
OP_SETUPVAL
: {

447 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
	`GETARG_B
(
i
)];

448 
	`£tobj
(
L
, 
uv
->
v
, 
ø
);

449 
	`luaC_b¨rõr
(
L
, 
uv
, 
ø
);

452 
OP_SETTABLE
: {

453 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, 
ø
, 
	`RKB
(
i
), 
	`RKC
(i)));

456 
OP_NEWTABLE
: {

457 
b
 = 
	`GETARG_B
(
i
);

458 
c
 = 
	`GETARG_C
(
i
);

459 
	`£thvÆue
(
L
, 
ø
, 
	`luaH_√w
(L, 
	`luaO_fb2öt
(
b
),ÜuaO_fb2öt(
c
)));

460 
	`PrŸe˘
(
	`luaC_checkGC
(
L
));

463 
OP_SELF
: {

464 
StkId
 
rb
 = 
	`RB
(
i
);

465 
	`£tobjs2s
(
L
, 
ø
+1, 
rb
);

466 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
rb
, 
	`RKC
(
i
), 
ø
));

469 
OP_ADD
: {

470 
	`¨ôh_›
(
luai_numadd
, 
TM_ADD
);

473 
OP_SUB
: {

474 
	`¨ôh_›
(
luai_numsub
, 
TM_SUB
);

477 
OP_MUL
: {

478 
	`¨ôh_›
(
luai_nummul
, 
TM_MUL
);

481 
OP_DIV
: {

482 
	`¨ôh_›
(
luai_numdiv
, 
TM_DIV
);

485 
OP_MOD
: {

486 
	`¨ôh_›
(
luai_nummod
, 
TM_MOD
);

489 
OP_POW
: {

490 
	`¨ôh_›
(
luai_numpow
, 
TM_POW
);

493 
OP_UNM
: {

494 
TVÆue
 *
rb
 = 
	`RB
(
i
);

495 i‡(
	`âi¢umbî
(
rb
)) {

496 
lua_Numbî
 
nb
 = 
	`nvÆue
(
rb
);

497 
	`£ävÆue
(
ø
, 
	`luai_numunm
(
nb
));

500 
	`PrŸe˘
(
	`Arôh
(
L
, 
ø
, 
rb
,Ñb, 
TM_UNM
));

504 
OP_NOT
: {

505 
ªs
 = 
	`l_isÁl£
(
	`RB
(
i
));

506 
	`£tbvÆue
(
ø
, 
ªs
);

509 
OP_LEN
: {

510 c⁄° 
TVÆue
 *
rb
 = 
	`RB
(
i
);

511 
	`ây≥
(
rb
)) {

512 
LUA_TTABLE
: {

513 
	`£ävÆue
(
ø
, 
	`ˇ°_num
(
	`luaH_gën
(
	`hvÆue
(
rb
))));

516 
LUA_TSTRING
: {

517 
	`£ävÆue
(
ø
, 
	`ˇ°_num
(
	`tsvÆue
(
rb
)->
Àn
));

521 
	`PrŸe˘
(

522 i‡(!
	`ˇŒ_böTM
(
L
, 
rb
, 
luaO_nûobje˘
, 
ø
, 
TM_LEN
))

523 
	`luaG_ty≥îr‹
(
L
, 
rb
, "getÜength of");

529 
OP_CONCAT
: {

530 
b
 = 
	`GETARG_B
(
i
);

531 
c
 = 
	`GETARG_C
(
i
);

532 
	`PrŸe˘
(
	`luaV_c⁄ˇt
(
L
, 
c
-
b
+1, c); 
	`luaC_checkGC
(L));

533 
	`£tobjs2s
(
L
, 
	`RA
(
i
), 
ba£
+
b
);

536 
OP_JMP
: {

537 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

540 
OP_EQ
: {

541 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

542 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

543 
	`PrŸe˘
(

544 i‡(
	`equÆobj
(
L
, 
rb
, 
rc
Ë=
	`GETARG_A
(
i
))

545 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

547 
pc
++;

550 
OP_LT
: {

551 
	`PrŸe˘
(

552 i‡(
	`luaV_Às°h™
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë=
	`GETARG_A
(i))

553 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

555 
pc
++;

558 
OP_LE
: {

559 
	`PrŸe˘
(

560 i‡(
	`Às£quÆ
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë=
	`GETARG_A
(i))

561 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

563 
pc
++;

566 
OP_TEST
: {

567 i‡(
	`l_isÁl£
(
ø
Ë!
	`GETARG_C
(
i
))

568 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

569 
pc
++;

572 
OP_TESTSET
: {

573 
TVÆue
 *
rb
 = 
	`RB
(
i
);

574 i‡(
	`l_isÁl£
(
rb
Ë!
	`GETARG_C
(
i
)) {

575 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

576 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

578 
pc
++;

581 
OP_CALL
: {

582 
b
 = 
	`GETARG_B
(
i
);

583 
ƒesu…s
 = 
	`GETARG_C
(
i
) - 1;

584 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

585 
L
->
ßvedpc
 = 
pc
;

586 
	`luaD_¥eˇŒ
(
L
, 
ø
, 
ƒesu…s
)) {

587 
PCRLUA
: {

588 
√xecˇŒs
++;

589 
ªíåy
;

591 
PCRC
: {

593 i‡(
ƒesu…s
 >0Ë
L
->
t›
 = L->
ci
->top;

594 
ba£
 = 
L
->base;

602 
OP_TAILCALL
: {

603 
b
 = 
	`GETARG_B
(
i
);

604 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

605 
L
->
ßvedpc
 = 
pc
;

606 
	`lua_as£π
(
	`GETARG_C
(
i
Ë- 1 =
LUA_MULTRET
);

607 
	`luaD_¥eˇŒ
(
L
, 
ø
, 
LUA_MULTRET
)) {

608 
PCRLUA
: {

610 
CÆlInfo
 *
ci
 = 
L
->ci - 1;

611 
aux
;

612 
StkId
 
func
 = 
ci
->func;

613 
StkId
 
pfunc
 = (
ci
+1)->
func
;

614 i‡(
L
->
›íupvÆ
Ë
	`luaF_˛o£
(L, 
ci
->
ba£
);

615 
L
->
ba£
 = 
ci
->ba£ = ci->
func
 + ((ci+1)->ba£ - 
pfunc
);

616 
aux
 = 0; 
pfunc
+aux < 
L
->
t›
;áux++)

617 
	`£tobjs2s
(
L
, 
func
+
aux
, 
pfunc
+aux);

618 
ci
->
t›
 = 
L
->t› = 
func
+
aux
;

619 
	`lua_as£π
(
L
->
t›
 =L->
ba£
 + 
	`˛vÆue
(
func
)->
l
.
p
->
max°acksize
);

620 
ci
->
ßvedpc
 = 
L
->savedpc;

621 
ci
->
èûˇŒs
++;

622 
L
->
ci
--;

623 
ªíåy
;

625 
PCRC
: {

626 
ba£
 = 
L
->base;

634 
OP_RETURN
: {

635 
b
 = 
	`GETARG_B
(
i
);

636 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b-1;

637 i‡(
L
->
›íupvÆ
Ë
	`luaF_˛o£
(L, 
ba£
);

638 
L
->
ßvedpc
 = 
pc
;

639 
b
 = 
	`luaD_posˇŒ
(
L
, 
ø
);

640 i‡(--
√xecˇŒs
 == 0)

643 i‡(
b
Ë
L
->
t›
 = L->
ci
->top;

644 
	`lua_as£π
(
	`isLua
(
L
->
ci
));

645 
	`lua_as£π
(
	`GET_OPCODE
(*((
L
->
ci
)->
ßvedpc
 - 1)Ë=
OP_CALL
);

646 
ªíåy
;

649 
OP_FORLOOP
: {

650 
lua_Numbî
 
°ï
 = 
	`nvÆue
(
ø
+2);

651 
lua_Numbî
 
idx
 = 
	`luai_numadd
(
	`nvÆue
(
ø
), 
°ï
);

652 
lua_Numbî
 
limô
 = 
	`nvÆue
(
ø
+1);

653 i‡(
	`luai_num…
(0, 
°ï
Ë? 
	`luai_numÀ
(
idx
, 
limô
)

654 : 
	`luai_numÀ
(
limô
, 
idx
)) {

655 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

656 
	`£ävÆue
(
ø
, 
idx
);

657 
	`£ävÆue
(
ø
+3, 
idx
);

661 
OP_FORPREP
: {

662 c⁄° 
TVÆue
 *
öô
 = 
ø
;

663 c⁄° 
TVÆue
 *
∂imô
 = 
ø
+1;

664 c⁄° 
TVÆue
 *
p°ï
 = 
ø
+2;

665 
L
->
ßvedpc
 = 
pc
;

666 i‡(!
	`t⁄umbî
(
öô
, 
ø
))

667 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") " initial value must beáÇumber");

668 i‡(!
	`t⁄umbî
(
∂imô
, 
ø
+1))

669 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") "Üimit must beáÇumber");

670 i‡(!
	`t⁄umbî
(
p°ï
, 
ø
+2))

671 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") " step must beáÇumber");

672 
	`£ävÆue
(
ø
, 
	`luai_numsub
(
	`nvÆue
‘a),ÇvÆue(
p°ï
)));

673 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

676 
OP_TFORLOOP
: {

677 
StkId
 
cb
 = 
ø
 + 3;

678 
	`£tobjs2s
(
L
, 
cb
+2, 
ø
+2);

679 
	`£tobjs2s
(
L
, 
cb
+1, 
ø
+1);

680 
	`£tobjs2s
(
L
, 
cb
, 
ø
);

681 
L
->
t›
 = 
cb
+3;

682 
	`PrŸe˘
(
	`luaD_ˇŒ
(
L
, 
cb
, 
	`GETARG_C
(
i
)));

683 
L
->
t›
 = L->
ci
->top;

684 
cb
 = 
	`RA
(
i
) + 3;

685 i‡(!
	`âi¢û
(
cb
)) {

686 
	`£tobjs2s
(
L
, 
cb
-1, cb);

687 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

689 
pc
++;

692 
OP_SETLIST
: {

693 
n
 = 
	`GETARG_B
(
i
);

694 
c
 = 
	`GETARG_C
(
i
);

695 
œ°
;

696 
TabÀ
 *
h
;

697 i‡(
n
 == 0) {

698 
n
 = 
	`ˇ°_öt
(
L
->
t›
 - 
ø
) - 1;

699 
L
->
t›
 = L->
ci
->top;

701 i‡(
c
 =0Ë¯
	`ˇ°_öt
(*
pc
++);

702 
	`ru¡ime_check
(
L
, 
	`âi°abÀ
(
ø
));

703 
h
 = 
	`hvÆue
(
ø
);

704 
œ°
 = ((
c
-1)*
LFIELDS_PER_FLUSH
Ë+ 
n
;

705 i‡(
œ°
 > 
h
->
sizóºay
)

706 
	`luaH_ªsizóºay
(
L
, 
h
, 
œ°
);

707 ; 
n
 > 0;Ç--) {

708 
TVÆue
 *
vÆ
 = 
ø
+
n
;

709 
	`£tobj2t
(
L
, 
	`luaH_£äum
(L, 
h
, 
œ°
--), 
vÆ
);

710 
	`luaC_b¨rõπ
(
L
, 
h
, 
vÆ
);

714 
OP_CLOSE
: {

715 
	`luaF_˛o£
(
L
, 
ø
);

718 
OP_CLOSURE
: {

719 
PrŸo
 *
p
;

720 
Closuª
 *
n˛
;

721 
nup
, 
j
;

722 
p
 = 
˛
->p->p[
	`GETARG_Bx
(
i
)];

723 
nup
 = 
p
->
nups
;

724 
n˛
 = 
	`luaF_√wL˛osuª
(
L
, 
nup
, 
˛
->
ív
);

725 
n˛
->
l
.
p
 =Ö;

726 
j
=0; j<
nup
; j++, 
pc
++) {

727 i‡(
	`GET_OPCODE
(*
pc
Ë=
OP_GETUPVAL
)

728 
n˛
->
l
.
upvÆs
[
j
] = 
˛
->upvÆs[
	`GETARG_B
(*
pc
)];

730 
	`lua_as£π
(
	`GET_OPCODE
(*
pc
Ë=
OP_MOVE
);

731 
n˛
->
l
.
upvÆs
[
j
] = 
	`luaF_födupvÆ
(
L
, 
ba£
 + 
	`GETARG_B
(*
pc
));

734 
	`£t˛vÆue
(
L
, 
ø
, 
n˛
);

735 
	`PrŸe˘
(
	`luaC_checkGC
(
L
));

738 
OP_VARARG
: {

739 
b
 = 
	`GETARG_B
(
i
) - 1;

740 
j
;

741 
CÆlInfo
 *
ci
 = 
L
->ci;

742 
n
 = 
	`ˇ°_öt
(
ci
->
ba£
 - ci->
func
Ë- 
˛
->
p
->
num∑øms
 - 1;

743 i‡(
b
 =
LUA_MULTRET
) {

744 
	`PrŸe˘
(
	`luaD_check°ack
(
L
, 
n
));

745 
ø
 = 
	`RA
(
i
);

746 
b
 = 
n
;

747 
L
->
t›
 = 
ø
 + 
n
;

749 
j
 = 0; j < 
b
; j++) {

750 i‡(
j
 < 
n
) {

751 
	`£tobjs2s
(
L
, 
ø
 + 
j
, 
ci
->
ba£
 - 
n
 + j);

754 
	`£äûvÆue
(
ø
 + 
j
);

761 
	}
}

	@lvm.h

7 #i‚de‡
lvm_h


8 
	#lvm_h


	)

11 
	~"ldo.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

16 
	#to°rög
(
L
,
o
Ë((
	`ây≥
(oË=
LUA_TSTRING
Ë|| (
	`luaV_to°rög
(L, o)))

	)

18 
	#t⁄umbî
(
o
,
n
Ë(
	`ây≥
(oË=
LUA_TNUMBER
 || \

19 (((
o
Ë
	`luaV_t⁄umbî
(o,
n
)Ë!
NULL
))

	)

21 
	#equÆobj
(
L
,
o1
,
o2
) \

22 (
	`ây≥
(
o1
Ë=ây≥(
o2
Ë&& 
	`luaV_equÆvÆ
(
L
, o1, o2))

	)

25 
LUAI_FUNC
 
luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

26 
LUAI_FUNC
 
luaV_equÆvÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

27 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaV_t⁄umbî
 (c⁄° TVÆuê*
obj
, TVÆuê*
n
);

28 
LUAI_FUNC
 
luaV_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
);

29 
LUAI_FUNC
 
luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

30 
StkId
 
vÆ
);

31 
LUAI_FUNC
 
luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

32 
StkId
 
vÆ
);

33 
LUAI_FUNC
 
luaV_execuã
 (
lua_Sèã
 *
L
, 
√xecˇŒs
);

34 
LUAI_FUNC
 
luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
, 
œ°
);

	@lzio.c

8 
	~<°rög.h
>

10 
	#lzio_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"Œimôs.h
"

16 
	~"lmem.h
"

17 
	~"l°©e.h
"

18 
	~"lzio.h
"

21 
	$luaZ_fûl
 (
ZIO
 *
z
) {

22 
size_t
 
size
;

23 
lua_Sèã
 *
L
 = 
z
->L;

24 c⁄° *
buff
;

25 
	`lua_u∆ock
(
L
);

26 
buff
 = 
z
->
	`ªadî
(
L
, z->
d©a
, &
size
);

27 
	`lua_lock
(
L
);

28 i‡(
buff
 =
NULL
 || 
size
 =0Ë 
EOZ
;

29 
z
->
n
 = 
size
 - 1;

30 
z
->
p
 = 
buff
;

31  
	`ch¨2öt
(*(
z
->
p
++));

32 
	}
}

35 
	$luaZ_lookahód
 (
ZIO
 *
z
) {

36 i‡(
z
->
n
 == 0) {

37 i‡(
	`luaZ_fûl
(
z
Ë=
EOZ
)

38  
EOZ
;

40 
z
->
n
++;

41 
z
->
p
--;

44  
	`ch¨2öt
(*
z
->
p
);

45 
	}
}

48 
	$luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
, *
d©a
) {

49 
z
->
L
 = L;

50 
z
->
ªadî
 =Ñeader;

51 
z
->
d©a
 = data;

52 
z
->
n
 = 0;

53 
z
->
p
 = 
NULL
;

54 
	}
}

58 
size_t
 
	$luaZ_ªad
 (
ZIO
 *
z
, *
b
, 
size_t
 
n
) {

59 
n
) {

60 
size_t
 
m
;

61 i‡(
	`luaZ_lookahód
(
z
Ë=
EOZ
)

62  
n
;

63 
m
 = (
n
 <
z
->n) ?Ç : z->n;

64 
	`mem˝y
(
b
, 
z
->
p
, 
m
);

65 
z
->
n
 -
m
;

66 
z
->
p
 +
m
;

67 
b
 = (*)b + 
m
;

68 
n
 -
m
;

71 
	}
}

74 *
	$luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
) {

75 i‡(
n
 > 
buff
->
buffsize
) {

76 i‡(
n
 < 
LUA_MINBUFFER
)Ç = LUA_MINBUFFER;

77 
	`luaZ_ªsizebuf„r
(
L
, 
buff
, 
n
);

79  
buff
->
buf„r
;

80 
	}
}

	@lzio.h

8 #i‚de‡
lzio_h


9 
	#lzio_h


	)

11 
	~"lua.h
"

13 
	~"lmem.h
"

16 
	#EOZ
 (-1Ë

	)

18 
Zio
 
	tZIO
;

20 
	#ch¨2öt
(
c
Ë
	`ˇ°
(, ca°(, (c)))

	)

22 
	#zgëc
(
z
Ë(((z)->
n
--)>0 ? 
	`ch¨2öt
(*(z)->
p
++Ë: 
	`luaZ_fûl
(z))

	)

24 
	sMbuf„r
 {

25 *
	mbuf„r
;

26 
size_t
 
	mn
;

27 
size_t
 
	mbuffsize
;

28 } 
	tMbuf„r
;

30 
	#luaZ_öôbuf„r
(
L
, 
buff
Ë((buff)->
buf„r
 = 
NULL
, (buff)->
buffsize
 = 0)

	)

32 
	#luaZ_buf„r
(
buff
Ë((buff)->
buf„r
)

	)

33 
	#luaZ_sizebuf„r
(
buff
Ë((buff)->
buffsize
)

	)

34 
	#luaZ_bufÊí
(
buff
Ë((buff)->
n
)

	)

36 
	#luaZ_ª£tbuf„r
(
buff
Ë((buff)->
n
 = 0)

	)

39 
	#luaZ_ªsizebuf„r
(
L
, 
buff
, 
size
) \

40 (
	`luaM_ªÆlocve˘‹
(
L
, (
buff
)->
buf„r
, (buff)->
buffsize
, 
size
, ), \

41 (
buff
)->
buffsize
 = 
size
)

	)

43 
	#luaZ_‰ìbuf„r
(
L
, 
buff
Ë
	`luaZ_ªsizebuf„r
(L, buff, 0)

	)

46 
LUAI_FUNC
 *
luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
);

47 
LUAI_FUNC
 
luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
,

48 *
d©a
);

49 
LUAI_FUNC
 
size_t
 
luaZ_ªad
 (
ZIO
* 
z
, * 
b
, size_à
n
);

50 
LUAI_FUNC
 
luaZ_lookahód
 (
ZIO
 *
z
);

56 
	sZio
 {

57 
size_t
 
	mn
;

58 c⁄° *
	mp
;

59 
lua_Ródî
 
	mªadî
;

60 * 
	md©a
;

61 
lua_Sèã
 *
	mL
;

65 
LUAI_FUNC
 
luaZ_fûl
 (
ZIO
 *
z
);

	@print.c

7 
	~<˘y≥.h
>

8 
	~<°dio.h
>

10 
	#luac_c


	)

11 
	#LUA_CORE


	)

13 
	~"ldebug.h
"

14 
	~"lobje˘.h
"

15 
	~"l›codes.h
"

16 
	~"lundump.h
"

18 
	#PrötFun˘i⁄
 
luaU_¥öt


	)

20 
	#Sizeof
(
x
Ë(()(x))

	)

21 
	#VOID
(
p
Ë((c⁄° *)’))

	)

23 
	$PrötSåög
(c⁄° 
PrŸo
* 
f
, 
n
)

25 c⁄° * 
s
=
	`svÆue
(&
f
->
k
[
n
]);

26 
	`putch¨
('"');

27 ; *
s
; s++)

29 *
s
)

31 '"': 
	`¥ötf
("\\\""); ;

32 '\a': 
	`¥ötf
("\\a"); ;

33 '\b': 
	`¥ötf
("\\b"); ;

34 '\f': 
	`¥ötf
("\\f"); ;

35 '\n': 
	`¥ötf
("\\n"); ;

36 '\r': 
	`¥ötf
("\\r"); ;

37 '\t': 
	`¥ötf
("\\t"); ;

38 '\v': 
	`¥ötf
("\\v"); ;

39 : i‡(
	`i•röt
(()*
s
))

40 
	`¥ötf
("%c",*
s
);

42 
	`¥ötf
("\\%03u",()*
s
);

45 
	`putch¨
('"');

46 
	}
}

48 
	$PrötC⁄°™t
(c⁄° 
PrŸo
* 
f
, 
i
)

50 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

51 
	`ây≥
(
o
))

53 
LUA_TNIL
:

54 
	`¥ötf
("nil");

56 
LUA_TBOOLEAN
:

57 
	`¥ötf
(
	`bvÆue
(
o
) ? "true" : "false");

59 
LUA_TNUMBER
:

60 
	`¥ötf
(
LUA_NUMBER_FMT
,
	`nvÆue
(
o
));

62 
LUA_TSTRING
:

63 
	`PrötSåög
(
f
,
i
);

66 
	`¥ötf
("?Åy≥=%d",
	`ây≥
(
o
));

69 
	}
}

71 
	$PrötCode
(c⁄° 
PrŸo
* 
f
)

73 c⁄° 
In°ru˘i⁄
* 
code
=
f
->code;

74 
pc
,
n
=
f
->
sizecode
;

75 
pc
=0;Öc<
n
;Öc++)

77 
In°ru˘i⁄
 
i
=
code
[
pc
];

78 
OpCode
 
o
=
	`GET_OPCODE
(
i
);

79 
a
=
	`GETARG_A
(
i
);

80 
b
=
	`GETARG_B
(
i
);

81 
c
=
	`GETARG_C
(
i
);

82 
bx
=
	`GETARG_Bx
(
i
);

83 
sbx
=
	`GETARG_sBx
(
i
);

84 
löe
=
	`gëlöe
(
f
,
pc
);

85 
	`¥ötf
("\t%d\t",
pc
+1);

86 i‡(
löe
>0Ë
	`¥ötf
("[%d]\t",line); printf("[-]\t");

87 
	`¥ötf
("%-9s\t",
luaP_›«mes
[
o
]);

88 
	`gëOpMode
(
o
))

90 
iABC
:

91 
	`¥ötf
("%d",
a
);

92 i‡(
	`gëBMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
b
Ë? (-1-
	`INDEXK
(b)) : b);

93 i‡(
	`gëCMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
c
Ë? (-1-
	`INDEXK
(c)) : c);

95 
iABx
:

96 i‡(
	`gëBMode
(
o
)==
OpArgK
Ë
	`¥ötf
("%d %d",
a
,-1-
bx
); printf("%d %d",a,bx);

98 
iAsBx
:

99 i‡(
o
==
OP_JMP
Ë
	`¥ötf
("%d",
sbx
); ¥ötf("%d %d",
a
,sbx);

102 
o
)

104 
OP_LOADK
:

105 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
bx
);

107 
OP_GETUPVAL
:

108 
OP_SETUPVAL
:

109 
	`¥ötf
("\t; %s", (
f
->
sizeupvÆues
>0Ë? 
	`gë°r
(f->
upvÆues
[
b
]) : "-");

111 
OP_GETGLOBAL
:

112 
OP_SETGLOBAL
:

113 
	`¥ötf
("\t; %s",
	`svÆue
(&
f
->
k
[
bx
]));

115 
OP_GETTABLE
:

116 
OP_SELF
:

117 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

119 
OP_SETTABLE
:

120 
OP_ADD
:

121 
OP_SUB
:

122 
OP_MUL
:

123 
OP_DIV
:

124 
OP_POW
:

125 
OP_EQ
:

126 
OP_LT
:

127 
OP_LE
:

128 i‡(
	`ISK
(
b
Ë|| ISK(
c
))

130 
	`¥ötf
("\t; ");

131 i‡(
	`ISK
(
b
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); 
	`¥ötf
("-");

132 
	`¥ötf
(" ");

133 i‡(
	`ISK
(
c
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); 
	`¥ötf
("-");

136 
OP_JMP
:

137 
OP_FORLOOP
:

138 
OP_FORPREP
:

139 
	`¥ötf
("\t;Åÿ%d",
sbx
+
pc
+2);

141 
OP_CLOSURE
:

142 
	`¥ötf
("\t; %p",
	`VOID
(
f
->
p
[
bx
]));

144 
OP_SETLIST
:

145 i‡(
c
==0Ë
	`¥ötf
("\t; %d",()
code
[++
pc
]);

146 
	`¥ötf
("\t; %d",
c
);

151 
	`¥ötf
("\n");

153 
	}
}

155 
	#SS
(
x
Ë(x==1)?"":"s"

	)

156 
	#S
(
x
Ëx,
	`SS
(x)

	)

158 
	$PrötHódî
(c⁄° 
PrŸo
* 
f
)

160 c⁄° * 
s
=
	`gë°r
(
f
->
sour˚
);

161 i‡(*
s
=='@' || *s=='=')

162 
s
++;

163 i‡(*
s
==
LUA_SIGNATURE
[0])

164 
s
="(bstring)";

166 
s
="(string)";

167 
	`¥ötf
("\n%s <%s:%d,%d> (%d instruction%s, %d bytesát %p)\n",

168 (
f
->
löedeföed
==0)?"maö":"fun˘i⁄",
s
,

169 
f
->
löedeföed
,f->
œ°löedeföed
,

170 
	`S
(
f
->
sizecode
),f->sizecode*
	`Sizeof
(
In°ru˘i⁄
),
	`VOID
(f));

171 
	`¥ötf
("%d%sÖaram%s, %d slot%s, %d upvalue%s, ",

172 
f
->
num∑øms
,f->
is_v¨¨g
?"+":"",
	`SS
(f->numparams),

173 
	`S
(
f
->
max°acksize
),S(f->
nups
));

174 
	`¥ötf
("%dÜocal%s, %d constant%s, %d function%s\n",

175 
	`S
(
f
->
sizñocv¨s
),S(f->
sizek
),S(f->
sizï
));

176 
	}
}

178 
	$PrötC⁄°™ts
(c⁄° 
PrŸo
* 
f
)

180 
i
,
n
=
f
->
sizek
;

181 
	`¥ötf
("c⁄°™t†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

182 
i
=0; i<
n
; i++)

184 
	`¥ötf
("\t%d\t",
i
+1);

185 
	`PrötC⁄°™t
(
f
,
i
);

186 
	`¥ötf
("\n");

188 
	}
}

190 
	$PrötLoˇls
(c⁄° 
PrŸo
* 
f
)

192 
i
,
n
=
f
->
sizñocv¨s
;

193 
	`¥ötf
("loˇl†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

194 
i
=0; i<
n
; i++)

196 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

197 
i
,
	`gë°r
(
f
->
locv¨s
[i].
v¨«me
),f->locv¨s[i].
°¨çc
+1,f->locv¨s[i].
ídpc
+1);

199 
	}
}

201 
	$PrötUpvÆues
(c⁄° 
PrŸo
* 
f
)

203 
i
,
n
=
f
->
sizeupvÆues
;

204 
	`¥ötf
("upvÆue†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

205 i‡(
f
->
upvÆues
==
NULL
) ;

206 
i
=0; i<
n
; i++)

208 
	`¥ötf
("\t%d\t%s\n",
i
,
	`gë°r
(
f
->
upvÆues
[i]));

210 
	}
}

212 
	$PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
)

214 
i
,
n
=
f
->
sizï
;

215 
	`PrötHódî
(
f
);

216 
	`PrötCode
(
f
);

217 i‡(
fuŒ
)

219 
	`PrötC⁄°™ts
(
f
);

220 
	`PrötLoˇls
(
f
);

221 
	`PrötUpvÆues
(
f
);

223 
i
=0; i<
n
; i++Ë
	`PrötFun˘i⁄
(
f
->
p
[i],
fuŒ
);

224 
	}
}

	@
2
.
.
0
55
463
lapi.c
lapi.h
lauxlib.c
lauxlib.h
lbaselib.c
lcode.c
lcode.h
ldblib.c
ldebug.c
ldebug.h
ldo.c
ldo.h
ldump.c
lfunc.c
lfunc.h
lgc.c
lgc.h
linit.c
liolib.c
llex.c
llex.h
llimits.h
lmathlib.c
lmem.c
lmem.h
loadlib.c
lobject.c
lobject.h
lopcodes.c
lopcodes.h
loslib.c
lparser.c
lparser.h
lstate.c
lstate.h
lstring.c
lstring.h
lstrlib.c
ltable.c
ltable.h
ltablib.c
ltm.c
ltm.h
lua.c
lua.h
luac.c
luaconf.h
lualib.h
lundump.c
lundump.h
lvm.c
lvm.h
lzio.c
lzio.h
print.c
